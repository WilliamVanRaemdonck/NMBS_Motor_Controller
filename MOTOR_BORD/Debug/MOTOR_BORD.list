
MOTOR_BORD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067e8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001158  080068a8  080068a8  000078a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a00  08007a00  0000905c  2**0
                  CONTENTS
  4 .ARM          00000000  08007a00  08007a00  0000905c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a00  08007a00  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a00  08007a00  00008a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a04  08007a04  00008a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007a08  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  2000005c  08007a64  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08007a64  000094c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114a1  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002416  00000000  00000000  0001a525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  0001c940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7b  00000000  00000000  0001d900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000117b1  00000000  00000000  0001e57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d44  00000000  00000000  0002fd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069423  00000000  00000000  00044a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ade93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fa0  00000000  00000000  000aded8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  000b1e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006890 	.word	0x08006890

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08006890 	.word	0x08006890

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_d2uiz>:
 8000244:	b570      	push	{r4, r5, r6, lr}
 8000246:	2200      	movs	r2, #0
 8000248:	4b0c      	ldr	r3, [pc, #48]	@ (800027c <__aeabi_d2uiz+0x38>)
 800024a:	0004      	movs	r4, r0
 800024c:	000d      	movs	r5, r1
 800024e:	f000 ff61 	bl	8001114 <__aeabi_dcmpge>
 8000252:	2800      	cmp	r0, #0
 8000254:	d104      	bne.n	8000260 <__aeabi_d2uiz+0x1c>
 8000256:	0020      	movs	r0, r4
 8000258:	0029      	movs	r1, r5
 800025a:	f000 fec7 	bl	8000fec <__aeabi_d2iz>
 800025e:	bd70      	pop	{r4, r5, r6, pc}
 8000260:	4b06      	ldr	r3, [pc, #24]	@ (800027c <__aeabi_d2uiz+0x38>)
 8000262:	2200      	movs	r2, #0
 8000264:	0020      	movs	r0, r4
 8000266:	0029      	movs	r1, r5
 8000268:	f000 fb24 	bl	80008b4 <__aeabi_dsub>
 800026c:	f000 febe 	bl	8000fec <__aeabi_d2iz>
 8000270:	2380      	movs	r3, #128	@ 0x80
 8000272:	061b      	lsls	r3, r3, #24
 8000274:	469c      	mov	ip, r3
 8000276:	4460      	add	r0, ip
 8000278:	e7f1      	b.n	800025e <__aeabi_d2uiz+0x1a>
 800027a:	46c0      	nop			@ (mov r8, r8)
 800027c:	41e00000 	.word	0x41e00000

08000280 <__aeabi_ddiv>:
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000282:	46de      	mov	lr, fp
 8000284:	4645      	mov	r5, r8
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	b5e0      	push	{r5, r6, r7, lr}
 800028c:	b087      	sub	sp, #28
 800028e:	9200      	str	r2, [sp, #0]
 8000290:	9301      	str	r3, [sp, #4]
 8000292:	030b      	lsls	r3, r1, #12
 8000294:	0b1b      	lsrs	r3, r3, #12
 8000296:	469b      	mov	fp, r3
 8000298:	0fca      	lsrs	r2, r1, #31
 800029a:	004b      	lsls	r3, r1, #1
 800029c:	0004      	movs	r4, r0
 800029e:	4680      	mov	r8, r0
 80002a0:	0d5b      	lsrs	r3, r3, #21
 80002a2:	9202      	str	r2, [sp, #8]
 80002a4:	d100      	bne.n	80002a8 <__aeabi_ddiv+0x28>
 80002a6:	e16a      	b.n	800057e <__aeabi_ddiv+0x2fe>
 80002a8:	4ad4      	ldr	r2, [pc, #848]	@ (80005fc <__aeabi_ddiv+0x37c>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d100      	bne.n	80002b0 <__aeabi_ddiv+0x30>
 80002ae:	e18c      	b.n	80005ca <__aeabi_ddiv+0x34a>
 80002b0:	4659      	mov	r1, fp
 80002b2:	0f42      	lsrs	r2, r0, #29
 80002b4:	00c9      	lsls	r1, r1, #3
 80002b6:	430a      	orrs	r2, r1
 80002b8:	2180      	movs	r1, #128	@ 0x80
 80002ba:	0409      	lsls	r1, r1, #16
 80002bc:	4311      	orrs	r1, r2
 80002be:	00c2      	lsls	r2, r0, #3
 80002c0:	4690      	mov	r8, r2
 80002c2:	4acf      	ldr	r2, [pc, #828]	@ (8000600 <__aeabi_ddiv+0x380>)
 80002c4:	4689      	mov	r9, r1
 80002c6:	4692      	mov	sl, r2
 80002c8:	449a      	add	sl, r3
 80002ca:	2300      	movs	r3, #0
 80002cc:	2400      	movs	r4, #0
 80002ce:	9303      	str	r3, [sp, #12]
 80002d0:	9e00      	ldr	r6, [sp, #0]
 80002d2:	9f01      	ldr	r7, [sp, #4]
 80002d4:	033b      	lsls	r3, r7, #12
 80002d6:	0b1b      	lsrs	r3, r3, #12
 80002d8:	469b      	mov	fp, r3
 80002da:	007b      	lsls	r3, r7, #1
 80002dc:	0030      	movs	r0, r6
 80002de:	0d5b      	lsrs	r3, r3, #21
 80002e0:	0ffd      	lsrs	r5, r7, #31
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d100      	bne.n	80002e8 <__aeabi_ddiv+0x68>
 80002e6:	e128      	b.n	800053a <__aeabi_ddiv+0x2ba>
 80002e8:	4ac4      	ldr	r2, [pc, #784]	@ (80005fc <__aeabi_ddiv+0x37c>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d100      	bne.n	80002f0 <__aeabi_ddiv+0x70>
 80002ee:	e177      	b.n	80005e0 <__aeabi_ddiv+0x360>
 80002f0:	4659      	mov	r1, fp
 80002f2:	0f72      	lsrs	r2, r6, #29
 80002f4:	00c9      	lsls	r1, r1, #3
 80002f6:	430a      	orrs	r2, r1
 80002f8:	2180      	movs	r1, #128	@ 0x80
 80002fa:	0409      	lsls	r1, r1, #16
 80002fc:	4311      	orrs	r1, r2
 80002fe:	468b      	mov	fp, r1
 8000300:	49bf      	ldr	r1, [pc, #764]	@ (8000600 <__aeabi_ddiv+0x380>)
 8000302:	00f2      	lsls	r2, r6, #3
 8000304:	468c      	mov	ip, r1
 8000306:	4651      	mov	r1, sl
 8000308:	4463      	add	r3, ip
 800030a:	1acb      	subs	r3, r1, r3
 800030c:	469a      	mov	sl, r3
 800030e:	2300      	movs	r3, #0
 8000310:	9e02      	ldr	r6, [sp, #8]
 8000312:	406e      	eors	r6, r5
 8000314:	2c0f      	cmp	r4, #15
 8000316:	d827      	bhi.n	8000368 <__aeabi_ddiv+0xe8>
 8000318:	49ba      	ldr	r1, [pc, #744]	@ (8000604 <__aeabi_ddiv+0x384>)
 800031a:	00a4      	lsls	r4, r4, #2
 800031c:	5909      	ldr	r1, [r1, r4]
 800031e:	468f      	mov	pc, r1
 8000320:	46cb      	mov	fp, r9
 8000322:	4642      	mov	r2, r8
 8000324:	9e02      	ldr	r6, [sp, #8]
 8000326:	9b03      	ldr	r3, [sp, #12]
 8000328:	2b02      	cmp	r3, #2
 800032a:	d016      	beq.n	800035a <__aeabi_ddiv+0xda>
 800032c:	2b03      	cmp	r3, #3
 800032e:	d100      	bne.n	8000332 <__aeabi_ddiv+0xb2>
 8000330:	e2a6      	b.n	8000880 <__aeabi_ddiv+0x600>
 8000332:	2b01      	cmp	r3, #1
 8000334:	d000      	beq.n	8000338 <__aeabi_ddiv+0xb8>
 8000336:	e0df      	b.n	80004f8 <__aeabi_ddiv+0x278>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	2400      	movs	r4, #0
 800033e:	4690      	mov	r8, r2
 8000340:	051b      	lsls	r3, r3, #20
 8000342:	4323      	orrs	r3, r4
 8000344:	07f6      	lsls	r6, r6, #31
 8000346:	4333      	orrs	r3, r6
 8000348:	4640      	mov	r0, r8
 800034a:	0019      	movs	r1, r3
 800034c:	b007      	add	sp, #28
 800034e:	bcf0      	pop	{r4, r5, r6, r7}
 8000350:	46bb      	mov	fp, r7
 8000352:	46b2      	mov	sl, r6
 8000354:	46a9      	mov	r9, r5
 8000356:	46a0      	mov	r8, r4
 8000358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035a:	2200      	movs	r2, #0
 800035c:	2400      	movs	r4, #0
 800035e:	4690      	mov	r8, r2
 8000360:	4ba6      	ldr	r3, [pc, #664]	@ (80005fc <__aeabi_ddiv+0x37c>)
 8000362:	e7ed      	b.n	8000340 <__aeabi_ddiv+0xc0>
 8000364:	002e      	movs	r6, r5
 8000366:	e7df      	b.n	8000328 <__aeabi_ddiv+0xa8>
 8000368:	45cb      	cmp	fp, r9
 800036a:	d200      	bcs.n	800036e <__aeabi_ddiv+0xee>
 800036c:	e1d4      	b.n	8000718 <__aeabi_ddiv+0x498>
 800036e:	d100      	bne.n	8000372 <__aeabi_ddiv+0xf2>
 8000370:	e1cf      	b.n	8000712 <__aeabi_ddiv+0x492>
 8000372:	2301      	movs	r3, #1
 8000374:	425b      	negs	r3, r3
 8000376:	469c      	mov	ip, r3
 8000378:	4644      	mov	r4, r8
 800037a:	4648      	mov	r0, r9
 800037c:	2700      	movs	r7, #0
 800037e:	44e2      	add	sl, ip
 8000380:	465b      	mov	r3, fp
 8000382:	0e15      	lsrs	r5, r2, #24
 8000384:	021b      	lsls	r3, r3, #8
 8000386:	431d      	orrs	r5, r3
 8000388:	0c19      	lsrs	r1, r3, #16
 800038a:	042b      	lsls	r3, r5, #16
 800038c:	0212      	lsls	r2, r2, #8
 800038e:	9500      	str	r5, [sp, #0]
 8000390:	0c1d      	lsrs	r5, r3, #16
 8000392:	4691      	mov	r9, r2
 8000394:	9102      	str	r1, [sp, #8]
 8000396:	9503      	str	r5, [sp, #12]
 8000398:	f7ff ff4e 	bl	8000238 <__aeabi_uidivmod>
 800039c:	0002      	movs	r2, r0
 800039e:	436a      	muls	r2, r5
 80003a0:	040b      	lsls	r3, r1, #16
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	4680      	mov	r8, r0
 80003a6:	4319      	orrs	r1, r3
 80003a8:	428a      	cmp	r2, r1
 80003aa:	d909      	bls.n	80003c0 <__aeabi_ddiv+0x140>
 80003ac:	9d00      	ldr	r5, [sp, #0]
 80003ae:	2301      	movs	r3, #1
 80003b0:	46ac      	mov	ip, r5
 80003b2:	425b      	negs	r3, r3
 80003b4:	4461      	add	r1, ip
 80003b6:	469c      	mov	ip, r3
 80003b8:	44e0      	add	r8, ip
 80003ba:	428d      	cmp	r5, r1
 80003bc:	d800      	bhi.n	80003c0 <__aeabi_ddiv+0x140>
 80003be:	e1fb      	b.n	80007b8 <__aeabi_ddiv+0x538>
 80003c0:	1a88      	subs	r0, r1, r2
 80003c2:	9902      	ldr	r1, [sp, #8]
 80003c4:	f7ff ff38 	bl	8000238 <__aeabi_uidivmod>
 80003c8:	9a03      	ldr	r2, [sp, #12]
 80003ca:	0424      	lsls	r4, r4, #16
 80003cc:	4342      	muls	r2, r0
 80003ce:	0409      	lsls	r1, r1, #16
 80003d0:	0c24      	lsrs	r4, r4, #16
 80003d2:	0003      	movs	r3, r0
 80003d4:	430c      	orrs	r4, r1
 80003d6:	42a2      	cmp	r2, r4
 80003d8:	d906      	bls.n	80003e8 <__aeabi_ddiv+0x168>
 80003da:	9900      	ldr	r1, [sp, #0]
 80003dc:	3b01      	subs	r3, #1
 80003de:	468c      	mov	ip, r1
 80003e0:	4464      	add	r4, ip
 80003e2:	42a1      	cmp	r1, r4
 80003e4:	d800      	bhi.n	80003e8 <__aeabi_ddiv+0x168>
 80003e6:	e1e1      	b.n	80007ac <__aeabi_ddiv+0x52c>
 80003e8:	1aa0      	subs	r0, r4, r2
 80003ea:	4642      	mov	r2, r8
 80003ec:	0412      	lsls	r2, r2, #16
 80003ee:	431a      	orrs	r2, r3
 80003f0:	4693      	mov	fp, r2
 80003f2:	464b      	mov	r3, r9
 80003f4:	4659      	mov	r1, fp
 80003f6:	0c1b      	lsrs	r3, r3, #16
 80003f8:	001d      	movs	r5, r3
 80003fa:	9304      	str	r3, [sp, #16]
 80003fc:	040b      	lsls	r3, r1, #16
 80003fe:	4649      	mov	r1, r9
 8000400:	0409      	lsls	r1, r1, #16
 8000402:	0c09      	lsrs	r1, r1, #16
 8000404:	000c      	movs	r4, r1
 8000406:	0c1b      	lsrs	r3, r3, #16
 8000408:	435c      	muls	r4, r3
 800040a:	0c12      	lsrs	r2, r2, #16
 800040c:	436b      	muls	r3, r5
 800040e:	4688      	mov	r8, r1
 8000410:	4351      	muls	r1, r2
 8000412:	436a      	muls	r2, r5
 8000414:	0c25      	lsrs	r5, r4, #16
 8000416:	46ac      	mov	ip, r5
 8000418:	185b      	adds	r3, r3, r1
 800041a:	4463      	add	r3, ip
 800041c:	4299      	cmp	r1, r3
 800041e:	d903      	bls.n	8000428 <__aeabi_ddiv+0x1a8>
 8000420:	2180      	movs	r1, #128	@ 0x80
 8000422:	0249      	lsls	r1, r1, #9
 8000424:	468c      	mov	ip, r1
 8000426:	4462      	add	r2, ip
 8000428:	0c19      	lsrs	r1, r3, #16
 800042a:	0424      	lsls	r4, r4, #16
 800042c:	041b      	lsls	r3, r3, #16
 800042e:	0c24      	lsrs	r4, r4, #16
 8000430:	188a      	adds	r2, r1, r2
 8000432:	191c      	adds	r4, r3, r4
 8000434:	4290      	cmp	r0, r2
 8000436:	d302      	bcc.n	800043e <__aeabi_ddiv+0x1be>
 8000438:	d116      	bne.n	8000468 <__aeabi_ddiv+0x1e8>
 800043a:	42a7      	cmp	r7, r4
 800043c:	d214      	bcs.n	8000468 <__aeabi_ddiv+0x1e8>
 800043e:	465b      	mov	r3, fp
 8000440:	9d00      	ldr	r5, [sp, #0]
 8000442:	3b01      	subs	r3, #1
 8000444:	444f      	add	r7, r9
 8000446:	9305      	str	r3, [sp, #20]
 8000448:	454f      	cmp	r7, r9
 800044a:	419b      	sbcs	r3, r3
 800044c:	46ac      	mov	ip, r5
 800044e:	425b      	negs	r3, r3
 8000450:	4463      	add	r3, ip
 8000452:	18c0      	adds	r0, r0, r3
 8000454:	4285      	cmp	r5, r0
 8000456:	d300      	bcc.n	800045a <__aeabi_ddiv+0x1da>
 8000458:	e1a1      	b.n	800079e <__aeabi_ddiv+0x51e>
 800045a:	4282      	cmp	r2, r0
 800045c:	d900      	bls.n	8000460 <__aeabi_ddiv+0x1e0>
 800045e:	e1f6      	b.n	800084e <__aeabi_ddiv+0x5ce>
 8000460:	d100      	bne.n	8000464 <__aeabi_ddiv+0x1e4>
 8000462:	e1f1      	b.n	8000848 <__aeabi_ddiv+0x5c8>
 8000464:	9b05      	ldr	r3, [sp, #20]
 8000466:	469b      	mov	fp, r3
 8000468:	1b3c      	subs	r4, r7, r4
 800046a:	42a7      	cmp	r7, r4
 800046c:	41bf      	sbcs	r7, r7
 800046e:	9d00      	ldr	r5, [sp, #0]
 8000470:	1a80      	subs	r0, r0, r2
 8000472:	427f      	negs	r7, r7
 8000474:	1bc0      	subs	r0, r0, r7
 8000476:	4285      	cmp	r5, r0
 8000478:	d100      	bne.n	800047c <__aeabi_ddiv+0x1fc>
 800047a:	e1d0      	b.n	800081e <__aeabi_ddiv+0x59e>
 800047c:	9902      	ldr	r1, [sp, #8]
 800047e:	f7ff fedb 	bl	8000238 <__aeabi_uidivmod>
 8000482:	9a03      	ldr	r2, [sp, #12]
 8000484:	040b      	lsls	r3, r1, #16
 8000486:	4342      	muls	r2, r0
 8000488:	0c21      	lsrs	r1, r4, #16
 800048a:	0007      	movs	r7, r0
 800048c:	4319      	orrs	r1, r3
 800048e:	428a      	cmp	r2, r1
 8000490:	d900      	bls.n	8000494 <__aeabi_ddiv+0x214>
 8000492:	e178      	b.n	8000786 <__aeabi_ddiv+0x506>
 8000494:	1a88      	subs	r0, r1, r2
 8000496:	9902      	ldr	r1, [sp, #8]
 8000498:	f7ff fece 	bl	8000238 <__aeabi_uidivmod>
 800049c:	9a03      	ldr	r2, [sp, #12]
 800049e:	0424      	lsls	r4, r4, #16
 80004a0:	4342      	muls	r2, r0
 80004a2:	0409      	lsls	r1, r1, #16
 80004a4:	0c24      	lsrs	r4, r4, #16
 80004a6:	0003      	movs	r3, r0
 80004a8:	430c      	orrs	r4, r1
 80004aa:	42a2      	cmp	r2, r4
 80004ac:	d900      	bls.n	80004b0 <__aeabi_ddiv+0x230>
 80004ae:	e15d      	b.n	800076c <__aeabi_ddiv+0x4ec>
 80004b0:	4641      	mov	r1, r8
 80004b2:	1aa4      	subs	r4, r4, r2
 80004b4:	043a      	lsls	r2, r7, #16
 80004b6:	431a      	orrs	r2, r3
 80004b8:	9d04      	ldr	r5, [sp, #16]
 80004ba:	0413      	lsls	r3, r2, #16
 80004bc:	0c1b      	lsrs	r3, r3, #16
 80004be:	4359      	muls	r1, r3
 80004c0:	4647      	mov	r7, r8
 80004c2:	436b      	muls	r3, r5
 80004c4:	469c      	mov	ip, r3
 80004c6:	0c10      	lsrs	r0, r2, #16
 80004c8:	4347      	muls	r7, r0
 80004ca:	0c0b      	lsrs	r3, r1, #16
 80004cc:	44bc      	add	ip, r7
 80004ce:	4463      	add	r3, ip
 80004d0:	4368      	muls	r0, r5
 80004d2:	429f      	cmp	r7, r3
 80004d4:	d903      	bls.n	80004de <__aeabi_ddiv+0x25e>
 80004d6:	2580      	movs	r5, #128	@ 0x80
 80004d8:	026d      	lsls	r5, r5, #9
 80004da:	46ac      	mov	ip, r5
 80004dc:	4460      	add	r0, ip
 80004de:	0c1f      	lsrs	r7, r3, #16
 80004e0:	0409      	lsls	r1, r1, #16
 80004e2:	041b      	lsls	r3, r3, #16
 80004e4:	0c09      	lsrs	r1, r1, #16
 80004e6:	183f      	adds	r7, r7, r0
 80004e8:	185b      	adds	r3, r3, r1
 80004ea:	42bc      	cmp	r4, r7
 80004ec:	d200      	bcs.n	80004f0 <__aeabi_ddiv+0x270>
 80004ee:	e102      	b.n	80006f6 <__aeabi_ddiv+0x476>
 80004f0:	d100      	bne.n	80004f4 <__aeabi_ddiv+0x274>
 80004f2:	e0fd      	b.n	80006f0 <__aeabi_ddiv+0x470>
 80004f4:	2301      	movs	r3, #1
 80004f6:	431a      	orrs	r2, r3
 80004f8:	4b43      	ldr	r3, [pc, #268]	@ (8000608 <__aeabi_ddiv+0x388>)
 80004fa:	4453      	add	r3, sl
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	dc00      	bgt.n	8000502 <__aeabi_ddiv+0x282>
 8000500:	e0ae      	b.n	8000660 <__aeabi_ddiv+0x3e0>
 8000502:	0751      	lsls	r1, r2, #29
 8000504:	d000      	beq.n	8000508 <__aeabi_ddiv+0x288>
 8000506:	e198      	b.n	800083a <__aeabi_ddiv+0x5ba>
 8000508:	4659      	mov	r1, fp
 800050a:	01c9      	lsls	r1, r1, #7
 800050c:	d506      	bpl.n	800051c <__aeabi_ddiv+0x29c>
 800050e:	4659      	mov	r1, fp
 8000510:	4b3e      	ldr	r3, [pc, #248]	@ (800060c <__aeabi_ddiv+0x38c>)
 8000512:	4019      	ands	r1, r3
 8000514:	2380      	movs	r3, #128	@ 0x80
 8000516:	468b      	mov	fp, r1
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	4453      	add	r3, sl
 800051c:	493c      	ldr	r1, [pc, #240]	@ (8000610 <__aeabi_ddiv+0x390>)
 800051e:	428b      	cmp	r3, r1
 8000520:	dd00      	ble.n	8000524 <__aeabi_ddiv+0x2a4>
 8000522:	e71a      	b.n	800035a <__aeabi_ddiv+0xda>
 8000524:	4659      	mov	r1, fp
 8000526:	08d2      	lsrs	r2, r2, #3
 8000528:	0749      	lsls	r1, r1, #29
 800052a:	4311      	orrs	r1, r2
 800052c:	465a      	mov	r2, fp
 800052e:	055b      	lsls	r3, r3, #21
 8000530:	0254      	lsls	r4, r2, #9
 8000532:	4688      	mov	r8, r1
 8000534:	0b24      	lsrs	r4, r4, #12
 8000536:	0d5b      	lsrs	r3, r3, #21
 8000538:	e702      	b.n	8000340 <__aeabi_ddiv+0xc0>
 800053a:	465a      	mov	r2, fp
 800053c:	9b00      	ldr	r3, [sp, #0]
 800053e:	431a      	orrs	r2, r3
 8000540:	d100      	bne.n	8000544 <__aeabi_ddiv+0x2c4>
 8000542:	e07e      	b.n	8000642 <__aeabi_ddiv+0x3c2>
 8000544:	465b      	mov	r3, fp
 8000546:	2b00      	cmp	r3, #0
 8000548:	d100      	bne.n	800054c <__aeabi_ddiv+0x2cc>
 800054a:	e100      	b.n	800074e <__aeabi_ddiv+0x4ce>
 800054c:	4658      	mov	r0, fp
 800054e:	f000 fdeb 	bl	8001128 <__clzsi2>
 8000552:	0002      	movs	r2, r0
 8000554:	0003      	movs	r3, r0
 8000556:	3a0b      	subs	r2, #11
 8000558:	271d      	movs	r7, #29
 800055a:	9e00      	ldr	r6, [sp, #0]
 800055c:	1aba      	subs	r2, r7, r2
 800055e:	0019      	movs	r1, r3
 8000560:	4658      	mov	r0, fp
 8000562:	40d6      	lsrs	r6, r2
 8000564:	3908      	subs	r1, #8
 8000566:	4088      	lsls	r0, r1
 8000568:	0032      	movs	r2, r6
 800056a:	4302      	orrs	r2, r0
 800056c:	4693      	mov	fp, r2
 800056e:	9a00      	ldr	r2, [sp, #0]
 8000570:	408a      	lsls	r2, r1
 8000572:	4928      	ldr	r1, [pc, #160]	@ (8000614 <__aeabi_ddiv+0x394>)
 8000574:	4453      	add	r3, sl
 8000576:	468a      	mov	sl, r1
 8000578:	449a      	add	sl, r3
 800057a:	2300      	movs	r3, #0
 800057c:	e6c8      	b.n	8000310 <__aeabi_ddiv+0x90>
 800057e:	465b      	mov	r3, fp
 8000580:	4303      	orrs	r3, r0
 8000582:	4699      	mov	r9, r3
 8000584:	d056      	beq.n	8000634 <__aeabi_ddiv+0x3b4>
 8000586:	465b      	mov	r3, fp
 8000588:	2b00      	cmp	r3, #0
 800058a:	d100      	bne.n	800058e <__aeabi_ddiv+0x30e>
 800058c:	e0cd      	b.n	800072a <__aeabi_ddiv+0x4aa>
 800058e:	4658      	mov	r0, fp
 8000590:	f000 fdca 	bl	8001128 <__clzsi2>
 8000594:	230b      	movs	r3, #11
 8000596:	425b      	negs	r3, r3
 8000598:	469c      	mov	ip, r3
 800059a:	0002      	movs	r2, r0
 800059c:	4484      	add	ip, r0
 800059e:	4666      	mov	r6, ip
 80005a0:	231d      	movs	r3, #29
 80005a2:	1b9b      	subs	r3, r3, r6
 80005a4:	0026      	movs	r6, r4
 80005a6:	0011      	movs	r1, r2
 80005a8:	4658      	mov	r0, fp
 80005aa:	40de      	lsrs	r6, r3
 80005ac:	3908      	subs	r1, #8
 80005ae:	4088      	lsls	r0, r1
 80005b0:	0033      	movs	r3, r6
 80005b2:	4303      	orrs	r3, r0
 80005b4:	4699      	mov	r9, r3
 80005b6:	0023      	movs	r3, r4
 80005b8:	408b      	lsls	r3, r1
 80005ba:	4698      	mov	r8, r3
 80005bc:	4b16      	ldr	r3, [pc, #88]	@ (8000618 <__aeabi_ddiv+0x398>)
 80005be:	2400      	movs	r4, #0
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	469a      	mov	sl, r3
 80005c4:	2300      	movs	r3, #0
 80005c6:	9303      	str	r3, [sp, #12]
 80005c8:	e682      	b.n	80002d0 <__aeabi_ddiv+0x50>
 80005ca:	465a      	mov	r2, fp
 80005cc:	4302      	orrs	r2, r0
 80005ce:	4691      	mov	r9, r2
 80005d0:	d12a      	bne.n	8000628 <__aeabi_ddiv+0x3a8>
 80005d2:	2200      	movs	r2, #0
 80005d4:	469a      	mov	sl, r3
 80005d6:	2302      	movs	r3, #2
 80005d8:	4690      	mov	r8, r2
 80005da:	2408      	movs	r4, #8
 80005dc:	9303      	str	r3, [sp, #12]
 80005de:	e677      	b.n	80002d0 <__aeabi_ddiv+0x50>
 80005e0:	465a      	mov	r2, fp
 80005e2:	9b00      	ldr	r3, [sp, #0]
 80005e4:	431a      	orrs	r2, r3
 80005e6:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <__aeabi_ddiv+0x39c>)
 80005e8:	469c      	mov	ip, r3
 80005ea:	44e2      	add	sl, ip
 80005ec:	2a00      	cmp	r2, #0
 80005ee:	d117      	bne.n	8000620 <__aeabi_ddiv+0x3a0>
 80005f0:	2302      	movs	r3, #2
 80005f2:	431c      	orrs	r4, r3
 80005f4:	2300      	movs	r3, #0
 80005f6:	469b      	mov	fp, r3
 80005f8:	3302      	adds	r3, #2
 80005fa:	e689      	b.n	8000310 <__aeabi_ddiv+0x90>
 80005fc:	000007ff 	.word	0x000007ff
 8000600:	fffffc01 	.word	0xfffffc01
 8000604:	08007954 	.word	0x08007954
 8000608:	000003ff 	.word	0x000003ff
 800060c:	feffffff 	.word	0xfeffffff
 8000610:	000007fe 	.word	0x000007fe
 8000614:	000003f3 	.word	0x000003f3
 8000618:	fffffc0d 	.word	0xfffffc0d
 800061c:	fffff801 	.word	0xfffff801
 8000620:	2303      	movs	r3, #3
 8000622:	0032      	movs	r2, r6
 8000624:	431c      	orrs	r4, r3
 8000626:	e673      	b.n	8000310 <__aeabi_ddiv+0x90>
 8000628:	469a      	mov	sl, r3
 800062a:	2303      	movs	r3, #3
 800062c:	46d9      	mov	r9, fp
 800062e:	240c      	movs	r4, #12
 8000630:	9303      	str	r3, [sp, #12]
 8000632:	e64d      	b.n	80002d0 <__aeabi_ddiv+0x50>
 8000634:	2300      	movs	r3, #0
 8000636:	4698      	mov	r8, r3
 8000638:	469a      	mov	sl, r3
 800063a:	3301      	adds	r3, #1
 800063c:	2404      	movs	r4, #4
 800063e:	9303      	str	r3, [sp, #12]
 8000640:	e646      	b.n	80002d0 <__aeabi_ddiv+0x50>
 8000642:	2301      	movs	r3, #1
 8000644:	431c      	orrs	r4, r3
 8000646:	2300      	movs	r3, #0
 8000648:	469b      	mov	fp, r3
 800064a:	3301      	adds	r3, #1
 800064c:	e660      	b.n	8000310 <__aeabi_ddiv+0x90>
 800064e:	2300      	movs	r3, #0
 8000650:	2480      	movs	r4, #128	@ 0x80
 8000652:	4698      	mov	r8, r3
 8000654:	2600      	movs	r6, #0
 8000656:	4b92      	ldr	r3, [pc, #584]	@ (80008a0 <__aeabi_ddiv+0x620>)
 8000658:	0324      	lsls	r4, r4, #12
 800065a:	e671      	b.n	8000340 <__aeabi_ddiv+0xc0>
 800065c:	2201      	movs	r2, #1
 800065e:	4252      	negs	r2, r2
 8000660:	2101      	movs	r1, #1
 8000662:	1ac9      	subs	r1, r1, r3
 8000664:	2938      	cmp	r1, #56	@ 0x38
 8000666:	dd00      	ble.n	800066a <__aeabi_ddiv+0x3ea>
 8000668:	e666      	b.n	8000338 <__aeabi_ddiv+0xb8>
 800066a:	291f      	cmp	r1, #31
 800066c:	dc00      	bgt.n	8000670 <__aeabi_ddiv+0x3f0>
 800066e:	e0ab      	b.n	80007c8 <__aeabi_ddiv+0x548>
 8000670:	201f      	movs	r0, #31
 8000672:	4240      	negs	r0, r0
 8000674:	1ac3      	subs	r3, r0, r3
 8000676:	4658      	mov	r0, fp
 8000678:	40d8      	lsrs	r0, r3
 800067a:	0003      	movs	r3, r0
 800067c:	2920      	cmp	r1, #32
 800067e:	d004      	beq.n	800068a <__aeabi_ddiv+0x40a>
 8000680:	4658      	mov	r0, fp
 8000682:	4988      	ldr	r1, [pc, #544]	@ (80008a4 <__aeabi_ddiv+0x624>)
 8000684:	4451      	add	r1, sl
 8000686:	4088      	lsls	r0, r1
 8000688:	4302      	orrs	r2, r0
 800068a:	1e51      	subs	r1, r2, #1
 800068c:	418a      	sbcs	r2, r1
 800068e:	431a      	orrs	r2, r3
 8000690:	2307      	movs	r3, #7
 8000692:	0019      	movs	r1, r3
 8000694:	2400      	movs	r4, #0
 8000696:	4011      	ands	r1, r2
 8000698:	4213      	tst	r3, r2
 800069a:	d00c      	beq.n	80006b6 <__aeabi_ddiv+0x436>
 800069c:	230f      	movs	r3, #15
 800069e:	4013      	ands	r3, r2
 80006a0:	2b04      	cmp	r3, #4
 80006a2:	d100      	bne.n	80006a6 <__aeabi_ddiv+0x426>
 80006a4:	e0f9      	b.n	800089a <__aeabi_ddiv+0x61a>
 80006a6:	1d11      	adds	r1, r2, #4
 80006a8:	4291      	cmp	r1, r2
 80006aa:	419b      	sbcs	r3, r3
 80006ac:	000a      	movs	r2, r1
 80006ae:	425b      	negs	r3, r3
 80006b0:	0759      	lsls	r1, r3, #29
 80006b2:	025b      	lsls	r3, r3, #9
 80006b4:	0b1c      	lsrs	r4, r3, #12
 80006b6:	08d2      	lsrs	r2, r2, #3
 80006b8:	430a      	orrs	r2, r1
 80006ba:	4690      	mov	r8, r2
 80006bc:	2300      	movs	r3, #0
 80006be:	e63f      	b.n	8000340 <__aeabi_ddiv+0xc0>
 80006c0:	2480      	movs	r4, #128	@ 0x80
 80006c2:	464b      	mov	r3, r9
 80006c4:	0324      	lsls	r4, r4, #12
 80006c6:	4223      	tst	r3, r4
 80006c8:	d009      	beq.n	80006de <__aeabi_ddiv+0x45e>
 80006ca:	465b      	mov	r3, fp
 80006cc:	4223      	tst	r3, r4
 80006ce:	d106      	bne.n	80006de <__aeabi_ddiv+0x45e>
 80006d0:	431c      	orrs	r4, r3
 80006d2:	0324      	lsls	r4, r4, #12
 80006d4:	002e      	movs	r6, r5
 80006d6:	4690      	mov	r8, r2
 80006d8:	4b71      	ldr	r3, [pc, #452]	@ (80008a0 <__aeabi_ddiv+0x620>)
 80006da:	0b24      	lsrs	r4, r4, #12
 80006dc:	e630      	b.n	8000340 <__aeabi_ddiv+0xc0>
 80006de:	2480      	movs	r4, #128	@ 0x80
 80006e0:	464b      	mov	r3, r9
 80006e2:	0324      	lsls	r4, r4, #12
 80006e4:	431c      	orrs	r4, r3
 80006e6:	0324      	lsls	r4, r4, #12
 80006e8:	9e02      	ldr	r6, [sp, #8]
 80006ea:	4b6d      	ldr	r3, [pc, #436]	@ (80008a0 <__aeabi_ddiv+0x620>)
 80006ec:	0b24      	lsrs	r4, r4, #12
 80006ee:	e627      	b.n	8000340 <__aeabi_ddiv+0xc0>
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d100      	bne.n	80006f6 <__aeabi_ddiv+0x476>
 80006f4:	e700      	b.n	80004f8 <__aeabi_ddiv+0x278>
 80006f6:	9800      	ldr	r0, [sp, #0]
 80006f8:	1e51      	subs	r1, r2, #1
 80006fa:	4684      	mov	ip, r0
 80006fc:	4464      	add	r4, ip
 80006fe:	4284      	cmp	r4, r0
 8000700:	d200      	bcs.n	8000704 <__aeabi_ddiv+0x484>
 8000702:	e084      	b.n	800080e <__aeabi_ddiv+0x58e>
 8000704:	42bc      	cmp	r4, r7
 8000706:	d200      	bcs.n	800070a <__aeabi_ddiv+0x48a>
 8000708:	e0ae      	b.n	8000868 <__aeabi_ddiv+0x5e8>
 800070a:	d100      	bne.n	800070e <__aeabi_ddiv+0x48e>
 800070c:	e0c1      	b.n	8000892 <__aeabi_ddiv+0x612>
 800070e:	000a      	movs	r2, r1
 8000710:	e6f0      	b.n	80004f4 <__aeabi_ddiv+0x274>
 8000712:	4542      	cmp	r2, r8
 8000714:	d900      	bls.n	8000718 <__aeabi_ddiv+0x498>
 8000716:	e62c      	b.n	8000372 <__aeabi_ddiv+0xf2>
 8000718:	464b      	mov	r3, r9
 800071a:	07dc      	lsls	r4, r3, #31
 800071c:	0858      	lsrs	r0, r3, #1
 800071e:	4643      	mov	r3, r8
 8000720:	085b      	lsrs	r3, r3, #1
 8000722:	431c      	orrs	r4, r3
 8000724:	4643      	mov	r3, r8
 8000726:	07df      	lsls	r7, r3, #31
 8000728:	e62a      	b.n	8000380 <__aeabi_ddiv+0x100>
 800072a:	f000 fcfd 	bl	8001128 <__clzsi2>
 800072e:	2315      	movs	r3, #21
 8000730:	469c      	mov	ip, r3
 8000732:	4484      	add	ip, r0
 8000734:	0002      	movs	r2, r0
 8000736:	4663      	mov	r3, ip
 8000738:	3220      	adds	r2, #32
 800073a:	2b1c      	cmp	r3, #28
 800073c:	dc00      	bgt.n	8000740 <__aeabi_ddiv+0x4c0>
 800073e:	e72e      	b.n	800059e <__aeabi_ddiv+0x31e>
 8000740:	0023      	movs	r3, r4
 8000742:	3808      	subs	r0, #8
 8000744:	4083      	lsls	r3, r0
 8000746:	4699      	mov	r9, r3
 8000748:	2300      	movs	r3, #0
 800074a:	4698      	mov	r8, r3
 800074c:	e736      	b.n	80005bc <__aeabi_ddiv+0x33c>
 800074e:	f000 fceb 	bl	8001128 <__clzsi2>
 8000752:	0002      	movs	r2, r0
 8000754:	0003      	movs	r3, r0
 8000756:	3215      	adds	r2, #21
 8000758:	3320      	adds	r3, #32
 800075a:	2a1c      	cmp	r2, #28
 800075c:	dc00      	bgt.n	8000760 <__aeabi_ddiv+0x4e0>
 800075e:	e6fb      	b.n	8000558 <__aeabi_ddiv+0x2d8>
 8000760:	9900      	ldr	r1, [sp, #0]
 8000762:	3808      	subs	r0, #8
 8000764:	4081      	lsls	r1, r0
 8000766:	2200      	movs	r2, #0
 8000768:	468b      	mov	fp, r1
 800076a:	e702      	b.n	8000572 <__aeabi_ddiv+0x2f2>
 800076c:	9900      	ldr	r1, [sp, #0]
 800076e:	3b01      	subs	r3, #1
 8000770:	468c      	mov	ip, r1
 8000772:	4464      	add	r4, ip
 8000774:	42a1      	cmp	r1, r4
 8000776:	d900      	bls.n	800077a <__aeabi_ddiv+0x4fa>
 8000778:	e69a      	b.n	80004b0 <__aeabi_ddiv+0x230>
 800077a:	42a2      	cmp	r2, r4
 800077c:	d800      	bhi.n	8000780 <__aeabi_ddiv+0x500>
 800077e:	e697      	b.n	80004b0 <__aeabi_ddiv+0x230>
 8000780:	1e83      	subs	r3, r0, #2
 8000782:	4464      	add	r4, ip
 8000784:	e694      	b.n	80004b0 <__aeabi_ddiv+0x230>
 8000786:	46ac      	mov	ip, r5
 8000788:	4461      	add	r1, ip
 800078a:	3f01      	subs	r7, #1
 800078c:	428d      	cmp	r5, r1
 800078e:	d900      	bls.n	8000792 <__aeabi_ddiv+0x512>
 8000790:	e680      	b.n	8000494 <__aeabi_ddiv+0x214>
 8000792:	428a      	cmp	r2, r1
 8000794:	d800      	bhi.n	8000798 <__aeabi_ddiv+0x518>
 8000796:	e67d      	b.n	8000494 <__aeabi_ddiv+0x214>
 8000798:	1e87      	subs	r7, r0, #2
 800079a:	4461      	add	r1, ip
 800079c:	e67a      	b.n	8000494 <__aeabi_ddiv+0x214>
 800079e:	4285      	cmp	r5, r0
 80007a0:	d000      	beq.n	80007a4 <__aeabi_ddiv+0x524>
 80007a2:	e65f      	b.n	8000464 <__aeabi_ddiv+0x1e4>
 80007a4:	45b9      	cmp	r9, r7
 80007a6:	d900      	bls.n	80007aa <__aeabi_ddiv+0x52a>
 80007a8:	e65c      	b.n	8000464 <__aeabi_ddiv+0x1e4>
 80007aa:	e656      	b.n	800045a <__aeabi_ddiv+0x1da>
 80007ac:	42a2      	cmp	r2, r4
 80007ae:	d800      	bhi.n	80007b2 <__aeabi_ddiv+0x532>
 80007b0:	e61a      	b.n	80003e8 <__aeabi_ddiv+0x168>
 80007b2:	1e83      	subs	r3, r0, #2
 80007b4:	4464      	add	r4, ip
 80007b6:	e617      	b.n	80003e8 <__aeabi_ddiv+0x168>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	d800      	bhi.n	80007be <__aeabi_ddiv+0x53e>
 80007bc:	e600      	b.n	80003c0 <__aeabi_ddiv+0x140>
 80007be:	46ac      	mov	ip, r5
 80007c0:	1e83      	subs	r3, r0, #2
 80007c2:	4698      	mov	r8, r3
 80007c4:	4461      	add	r1, ip
 80007c6:	e5fb      	b.n	80003c0 <__aeabi_ddiv+0x140>
 80007c8:	4837      	ldr	r0, [pc, #220]	@ (80008a8 <__aeabi_ddiv+0x628>)
 80007ca:	0014      	movs	r4, r2
 80007cc:	4450      	add	r0, sl
 80007ce:	4082      	lsls	r2, r0
 80007d0:	465b      	mov	r3, fp
 80007d2:	0017      	movs	r7, r2
 80007d4:	4083      	lsls	r3, r0
 80007d6:	40cc      	lsrs	r4, r1
 80007d8:	1e7a      	subs	r2, r7, #1
 80007da:	4197      	sbcs	r7, r2
 80007dc:	4323      	orrs	r3, r4
 80007de:	433b      	orrs	r3, r7
 80007e0:	001a      	movs	r2, r3
 80007e2:	465b      	mov	r3, fp
 80007e4:	40cb      	lsrs	r3, r1
 80007e6:	0751      	lsls	r1, r2, #29
 80007e8:	d009      	beq.n	80007fe <__aeabi_ddiv+0x57e>
 80007ea:	210f      	movs	r1, #15
 80007ec:	4011      	ands	r1, r2
 80007ee:	2904      	cmp	r1, #4
 80007f0:	d005      	beq.n	80007fe <__aeabi_ddiv+0x57e>
 80007f2:	1d11      	adds	r1, r2, #4
 80007f4:	4291      	cmp	r1, r2
 80007f6:	4192      	sbcs	r2, r2
 80007f8:	4252      	negs	r2, r2
 80007fa:	189b      	adds	r3, r3, r2
 80007fc:	000a      	movs	r2, r1
 80007fe:	0219      	lsls	r1, r3, #8
 8000800:	d400      	bmi.n	8000804 <__aeabi_ddiv+0x584>
 8000802:	e755      	b.n	80006b0 <__aeabi_ddiv+0x430>
 8000804:	2200      	movs	r2, #0
 8000806:	2301      	movs	r3, #1
 8000808:	2400      	movs	r4, #0
 800080a:	4690      	mov	r8, r2
 800080c:	e598      	b.n	8000340 <__aeabi_ddiv+0xc0>
 800080e:	000a      	movs	r2, r1
 8000810:	42bc      	cmp	r4, r7
 8000812:	d000      	beq.n	8000816 <__aeabi_ddiv+0x596>
 8000814:	e66e      	b.n	80004f4 <__aeabi_ddiv+0x274>
 8000816:	454b      	cmp	r3, r9
 8000818:	d000      	beq.n	800081c <__aeabi_ddiv+0x59c>
 800081a:	e66b      	b.n	80004f4 <__aeabi_ddiv+0x274>
 800081c:	e66c      	b.n	80004f8 <__aeabi_ddiv+0x278>
 800081e:	4b23      	ldr	r3, [pc, #140]	@ (80008ac <__aeabi_ddiv+0x62c>)
 8000820:	4a23      	ldr	r2, [pc, #140]	@ (80008b0 <__aeabi_ddiv+0x630>)
 8000822:	4453      	add	r3, sl
 8000824:	4592      	cmp	sl, r2
 8000826:	da00      	bge.n	800082a <__aeabi_ddiv+0x5aa>
 8000828:	e718      	b.n	800065c <__aeabi_ddiv+0x3dc>
 800082a:	2101      	movs	r1, #1
 800082c:	4249      	negs	r1, r1
 800082e:	1d0a      	adds	r2, r1, #4
 8000830:	428a      	cmp	r2, r1
 8000832:	4189      	sbcs	r1, r1
 8000834:	4249      	negs	r1, r1
 8000836:	448b      	add	fp, r1
 8000838:	e666      	b.n	8000508 <__aeabi_ddiv+0x288>
 800083a:	210f      	movs	r1, #15
 800083c:	4011      	ands	r1, r2
 800083e:	2904      	cmp	r1, #4
 8000840:	d100      	bne.n	8000844 <__aeabi_ddiv+0x5c4>
 8000842:	e661      	b.n	8000508 <__aeabi_ddiv+0x288>
 8000844:	0011      	movs	r1, r2
 8000846:	e7f2      	b.n	800082e <__aeabi_ddiv+0x5ae>
 8000848:	42bc      	cmp	r4, r7
 800084a:	d800      	bhi.n	800084e <__aeabi_ddiv+0x5ce>
 800084c:	e60a      	b.n	8000464 <__aeabi_ddiv+0x1e4>
 800084e:	2302      	movs	r3, #2
 8000850:	425b      	negs	r3, r3
 8000852:	469c      	mov	ip, r3
 8000854:	9900      	ldr	r1, [sp, #0]
 8000856:	444f      	add	r7, r9
 8000858:	454f      	cmp	r7, r9
 800085a:	419b      	sbcs	r3, r3
 800085c:	44e3      	add	fp, ip
 800085e:	468c      	mov	ip, r1
 8000860:	425b      	negs	r3, r3
 8000862:	4463      	add	r3, ip
 8000864:	18c0      	adds	r0, r0, r3
 8000866:	e5ff      	b.n	8000468 <__aeabi_ddiv+0x1e8>
 8000868:	4649      	mov	r1, r9
 800086a:	9d00      	ldr	r5, [sp, #0]
 800086c:	0048      	lsls	r0, r1, #1
 800086e:	4548      	cmp	r0, r9
 8000870:	4189      	sbcs	r1, r1
 8000872:	46ac      	mov	ip, r5
 8000874:	4249      	negs	r1, r1
 8000876:	4461      	add	r1, ip
 8000878:	4681      	mov	r9, r0
 800087a:	3a02      	subs	r2, #2
 800087c:	1864      	adds	r4, r4, r1
 800087e:	e7c7      	b.n	8000810 <__aeabi_ddiv+0x590>
 8000880:	2480      	movs	r4, #128	@ 0x80
 8000882:	465b      	mov	r3, fp
 8000884:	0324      	lsls	r4, r4, #12
 8000886:	431c      	orrs	r4, r3
 8000888:	0324      	lsls	r4, r4, #12
 800088a:	4690      	mov	r8, r2
 800088c:	4b04      	ldr	r3, [pc, #16]	@ (80008a0 <__aeabi_ddiv+0x620>)
 800088e:	0b24      	lsrs	r4, r4, #12
 8000890:	e556      	b.n	8000340 <__aeabi_ddiv+0xc0>
 8000892:	4599      	cmp	r9, r3
 8000894:	d3e8      	bcc.n	8000868 <__aeabi_ddiv+0x5e8>
 8000896:	000a      	movs	r2, r1
 8000898:	e7bd      	b.n	8000816 <__aeabi_ddiv+0x596>
 800089a:	2300      	movs	r3, #0
 800089c:	e708      	b.n	80006b0 <__aeabi_ddiv+0x430>
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	000007ff 	.word	0x000007ff
 80008a4:	0000043e 	.word	0x0000043e
 80008a8:	0000041e 	.word	0x0000041e
 80008ac:	000003ff 	.word	0x000003ff
 80008b0:	fffffc02 	.word	0xfffffc02

080008b4 <__aeabi_dsub>:
 80008b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008b6:	464e      	mov	r6, r9
 80008b8:	4645      	mov	r5, r8
 80008ba:	46de      	mov	lr, fp
 80008bc:	4657      	mov	r7, sl
 80008be:	b5e0      	push	{r5, r6, r7, lr}
 80008c0:	b085      	sub	sp, #20
 80008c2:	9000      	str	r0, [sp, #0]
 80008c4:	9101      	str	r1, [sp, #4]
 80008c6:	030c      	lsls	r4, r1, #12
 80008c8:	004f      	lsls	r7, r1, #1
 80008ca:	0fce      	lsrs	r6, r1, #31
 80008cc:	0a61      	lsrs	r1, r4, #9
 80008ce:	9c00      	ldr	r4, [sp, #0]
 80008d0:	46b0      	mov	r8, r6
 80008d2:	0f64      	lsrs	r4, r4, #29
 80008d4:	430c      	orrs	r4, r1
 80008d6:	9900      	ldr	r1, [sp, #0]
 80008d8:	0d7f      	lsrs	r7, r7, #21
 80008da:	00c8      	lsls	r0, r1, #3
 80008dc:	0011      	movs	r1, r2
 80008de:	001a      	movs	r2, r3
 80008e0:	031b      	lsls	r3, r3, #12
 80008e2:	469c      	mov	ip, r3
 80008e4:	9100      	str	r1, [sp, #0]
 80008e6:	9201      	str	r2, [sp, #4]
 80008e8:	0051      	lsls	r1, r2, #1
 80008ea:	0d4b      	lsrs	r3, r1, #21
 80008ec:	4699      	mov	r9, r3
 80008ee:	9b01      	ldr	r3, [sp, #4]
 80008f0:	9d00      	ldr	r5, [sp, #0]
 80008f2:	0fd9      	lsrs	r1, r3, #31
 80008f4:	4663      	mov	r3, ip
 80008f6:	0f6a      	lsrs	r2, r5, #29
 80008f8:	0a5b      	lsrs	r3, r3, #9
 80008fa:	4313      	orrs	r3, r2
 80008fc:	00ea      	lsls	r2, r5, #3
 80008fe:	4694      	mov	ip, r2
 8000900:	4693      	mov	fp, r2
 8000902:	4ac1      	ldr	r2, [pc, #772]	@ (8000c08 <__aeabi_dsub+0x354>)
 8000904:	9003      	str	r0, [sp, #12]
 8000906:	9302      	str	r3, [sp, #8]
 8000908:	4591      	cmp	r9, r2
 800090a:	d100      	bne.n	800090e <__aeabi_dsub+0x5a>
 800090c:	e0cd      	b.n	8000aaa <__aeabi_dsub+0x1f6>
 800090e:	2501      	movs	r5, #1
 8000910:	4069      	eors	r1, r5
 8000912:	464d      	mov	r5, r9
 8000914:	1b7d      	subs	r5, r7, r5
 8000916:	46aa      	mov	sl, r5
 8000918:	428e      	cmp	r6, r1
 800091a:	d100      	bne.n	800091e <__aeabi_dsub+0x6a>
 800091c:	e080      	b.n	8000a20 <__aeabi_dsub+0x16c>
 800091e:	2d00      	cmp	r5, #0
 8000920:	dc00      	bgt.n	8000924 <__aeabi_dsub+0x70>
 8000922:	e335      	b.n	8000f90 <__aeabi_dsub+0x6dc>
 8000924:	4649      	mov	r1, r9
 8000926:	2900      	cmp	r1, #0
 8000928:	d100      	bne.n	800092c <__aeabi_dsub+0x78>
 800092a:	e0df      	b.n	8000aec <__aeabi_dsub+0x238>
 800092c:	4297      	cmp	r7, r2
 800092e:	d100      	bne.n	8000932 <__aeabi_dsub+0x7e>
 8000930:	e194      	b.n	8000c5c <__aeabi_dsub+0x3a8>
 8000932:	4652      	mov	r2, sl
 8000934:	2501      	movs	r5, #1
 8000936:	2a38      	cmp	r2, #56	@ 0x38
 8000938:	dc19      	bgt.n	800096e <__aeabi_dsub+0xba>
 800093a:	2280      	movs	r2, #128	@ 0x80
 800093c:	9b02      	ldr	r3, [sp, #8]
 800093e:	0412      	lsls	r2, r2, #16
 8000940:	4313      	orrs	r3, r2
 8000942:	9302      	str	r3, [sp, #8]
 8000944:	4652      	mov	r2, sl
 8000946:	2a1f      	cmp	r2, #31
 8000948:	dd00      	ble.n	800094c <__aeabi_dsub+0x98>
 800094a:	e1e3      	b.n	8000d14 <__aeabi_dsub+0x460>
 800094c:	4653      	mov	r3, sl
 800094e:	2220      	movs	r2, #32
 8000950:	4661      	mov	r1, ip
 8000952:	9d02      	ldr	r5, [sp, #8]
 8000954:	1ad2      	subs	r2, r2, r3
 8000956:	4095      	lsls	r5, r2
 8000958:	40d9      	lsrs	r1, r3
 800095a:	430d      	orrs	r5, r1
 800095c:	4661      	mov	r1, ip
 800095e:	4091      	lsls	r1, r2
 8000960:	000a      	movs	r2, r1
 8000962:	1e51      	subs	r1, r2, #1
 8000964:	418a      	sbcs	r2, r1
 8000966:	4315      	orrs	r5, r2
 8000968:	9a02      	ldr	r2, [sp, #8]
 800096a:	40da      	lsrs	r2, r3
 800096c:	1aa4      	subs	r4, r4, r2
 800096e:	1b45      	subs	r5, r0, r5
 8000970:	42a8      	cmp	r0, r5
 8000972:	4180      	sbcs	r0, r0
 8000974:	4240      	negs	r0, r0
 8000976:	1a24      	subs	r4, r4, r0
 8000978:	0223      	lsls	r3, r4, #8
 800097a:	d400      	bmi.n	800097e <__aeabi_dsub+0xca>
 800097c:	e13d      	b.n	8000bfa <__aeabi_dsub+0x346>
 800097e:	0264      	lsls	r4, r4, #9
 8000980:	0a64      	lsrs	r4, r4, #9
 8000982:	2c00      	cmp	r4, #0
 8000984:	d100      	bne.n	8000988 <__aeabi_dsub+0xd4>
 8000986:	e147      	b.n	8000c18 <__aeabi_dsub+0x364>
 8000988:	0020      	movs	r0, r4
 800098a:	f000 fbcd 	bl	8001128 <__clzsi2>
 800098e:	0003      	movs	r3, r0
 8000990:	3b08      	subs	r3, #8
 8000992:	2120      	movs	r1, #32
 8000994:	0028      	movs	r0, r5
 8000996:	1aca      	subs	r2, r1, r3
 8000998:	40d0      	lsrs	r0, r2
 800099a:	409c      	lsls	r4, r3
 800099c:	0002      	movs	r2, r0
 800099e:	409d      	lsls	r5, r3
 80009a0:	4322      	orrs	r2, r4
 80009a2:	429f      	cmp	r7, r3
 80009a4:	dd00      	ble.n	80009a8 <__aeabi_dsub+0xf4>
 80009a6:	e177      	b.n	8000c98 <__aeabi_dsub+0x3e4>
 80009a8:	1bd8      	subs	r0, r3, r7
 80009aa:	3001      	adds	r0, #1
 80009ac:	1a09      	subs	r1, r1, r0
 80009ae:	002c      	movs	r4, r5
 80009b0:	408d      	lsls	r5, r1
 80009b2:	40c4      	lsrs	r4, r0
 80009b4:	1e6b      	subs	r3, r5, #1
 80009b6:	419d      	sbcs	r5, r3
 80009b8:	0013      	movs	r3, r2
 80009ba:	40c2      	lsrs	r2, r0
 80009bc:	408b      	lsls	r3, r1
 80009be:	4325      	orrs	r5, r4
 80009c0:	2700      	movs	r7, #0
 80009c2:	0014      	movs	r4, r2
 80009c4:	431d      	orrs	r5, r3
 80009c6:	076b      	lsls	r3, r5, #29
 80009c8:	d009      	beq.n	80009de <__aeabi_dsub+0x12a>
 80009ca:	230f      	movs	r3, #15
 80009cc:	402b      	ands	r3, r5
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	d005      	beq.n	80009de <__aeabi_dsub+0x12a>
 80009d2:	1d2b      	adds	r3, r5, #4
 80009d4:	42ab      	cmp	r3, r5
 80009d6:	41ad      	sbcs	r5, r5
 80009d8:	426d      	negs	r5, r5
 80009da:	1964      	adds	r4, r4, r5
 80009dc:	001d      	movs	r5, r3
 80009de:	0223      	lsls	r3, r4, #8
 80009e0:	d400      	bmi.n	80009e4 <__aeabi_dsub+0x130>
 80009e2:	e140      	b.n	8000c66 <__aeabi_dsub+0x3b2>
 80009e4:	4a88      	ldr	r2, [pc, #544]	@ (8000c08 <__aeabi_dsub+0x354>)
 80009e6:	3701      	adds	r7, #1
 80009e8:	4297      	cmp	r7, r2
 80009ea:	d100      	bne.n	80009ee <__aeabi_dsub+0x13a>
 80009ec:	e101      	b.n	8000bf2 <__aeabi_dsub+0x33e>
 80009ee:	2601      	movs	r6, #1
 80009f0:	4643      	mov	r3, r8
 80009f2:	4986      	ldr	r1, [pc, #536]	@ (8000c0c <__aeabi_dsub+0x358>)
 80009f4:	08ed      	lsrs	r5, r5, #3
 80009f6:	4021      	ands	r1, r4
 80009f8:	074a      	lsls	r2, r1, #29
 80009fa:	432a      	orrs	r2, r5
 80009fc:	057c      	lsls	r4, r7, #21
 80009fe:	024d      	lsls	r5, r1, #9
 8000a00:	0b2d      	lsrs	r5, r5, #12
 8000a02:	0d64      	lsrs	r4, r4, #21
 8000a04:	401e      	ands	r6, r3
 8000a06:	0524      	lsls	r4, r4, #20
 8000a08:	432c      	orrs	r4, r5
 8000a0a:	07f6      	lsls	r6, r6, #31
 8000a0c:	4334      	orrs	r4, r6
 8000a0e:	0010      	movs	r0, r2
 8000a10:	0021      	movs	r1, r4
 8000a12:	b005      	add	sp, #20
 8000a14:	bcf0      	pop	{r4, r5, r6, r7}
 8000a16:	46bb      	mov	fp, r7
 8000a18:	46b2      	mov	sl, r6
 8000a1a:	46a9      	mov	r9, r5
 8000a1c:	46a0      	mov	r8, r4
 8000a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a20:	2d00      	cmp	r5, #0
 8000a22:	dc00      	bgt.n	8000a26 <__aeabi_dsub+0x172>
 8000a24:	e2d0      	b.n	8000fc8 <__aeabi_dsub+0x714>
 8000a26:	4649      	mov	r1, r9
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	d000      	beq.n	8000a2e <__aeabi_dsub+0x17a>
 8000a2c:	e0d4      	b.n	8000bd8 <__aeabi_dsub+0x324>
 8000a2e:	4661      	mov	r1, ip
 8000a30:	9b02      	ldr	r3, [sp, #8]
 8000a32:	4319      	orrs	r1, r3
 8000a34:	d100      	bne.n	8000a38 <__aeabi_dsub+0x184>
 8000a36:	e12b      	b.n	8000c90 <__aeabi_dsub+0x3dc>
 8000a38:	1e69      	subs	r1, r5, #1
 8000a3a:	2d01      	cmp	r5, #1
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dsub+0x18c>
 8000a3e:	e1d9      	b.n	8000df4 <__aeabi_dsub+0x540>
 8000a40:	4295      	cmp	r5, r2
 8000a42:	d100      	bne.n	8000a46 <__aeabi_dsub+0x192>
 8000a44:	e10a      	b.n	8000c5c <__aeabi_dsub+0x3a8>
 8000a46:	2501      	movs	r5, #1
 8000a48:	2938      	cmp	r1, #56	@ 0x38
 8000a4a:	dc17      	bgt.n	8000a7c <__aeabi_dsub+0x1c8>
 8000a4c:	468a      	mov	sl, r1
 8000a4e:	4653      	mov	r3, sl
 8000a50:	2b1f      	cmp	r3, #31
 8000a52:	dd00      	ble.n	8000a56 <__aeabi_dsub+0x1a2>
 8000a54:	e1e7      	b.n	8000e26 <__aeabi_dsub+0x572>
 8000a56:	2220      	movs	r2, #32
 8000a58:	1ad2      	subs	r2, r2, r3
 8000a5a:	9b02      	ldr	r3, [sp, #8]
 8000a5c:	4661      	mov	r1, ip
 8000a5e:	4093      	lsls	r3, r2
 8000a60:	001d      	movs	r5, r3
 8000a62:	4653      	mov	r3, sl
 8000a64:	40d9      	lsrs	r1, r3
 8000a66:	4663      	mov	r3, ip
 8000a68:	4093      	lsls	r3, r2
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	430d      	orrs	r5, r1
 8000a6e:	1e51      	subs	r1, r2, #1
 8000a70:	418a      	sbcs	r2, r1
 8000a72:	4653      	mov	r3, sl
 8000a74:	4315      	orrs	r5, r2
 8000a76:	9a02      	ldr	r2, [sp, #8]
 8000a78:	40da      	lsrs	r2, r3
 8000a7a:	18a4      	adds	r4, r4, r2
 8000a7c:	182d      	adds	r5, r5, r0
 8000a7e:	4285      	cmp	r5, r0
 8000a80:	4180      	sbcs	r0, r0
 8000a82:	4240      	negs	r0, r0
 8000a84:	1824      	adds	r4, r4, r0
 8000a86:	0223      	lsls	r3, r4, #8
 8000a88:	d400      	bmi.n	8000a8c <__aeabi_dsub+0x1d8>
 8000a8a:	e0b6      	b.n	8000bfa <__aeabi_dsub+0x346>
 8000a8c:	4b5e      	ldr	r3, [pc, #376]	@ (8000c08 <__aeabi_dsub+0x354>)
 8000a8e:	3701      	adds	r7, #1
 8000a90:	429f      	cmp	r7, r3
 8000a92:	d100      	bne.n	8000a96 <__aeabi_dsub+0x1e2>
 8000a94:	e0ad      	b.n	8000bf2 <__aeabi_dsub+0x33e>
 8000a96:	2101      	movs	r1, #1
 8000a98:	4b5c      	ldr	r3, [pc, #368]	@ (8000c0c <__aeabi_dsub+0x358>)
 8000a9a:	086a      	lsrs	r2, r5, #1
 8000a9c:	401c      	ands	r4, r3
 8000a9e:	4029      	ands	r1, r5
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	07e5      	lsls	r5, r4, #31
 8000aa4:	4315      	orrs	r5, r2
 8000aa6:	0864      	lsrs	r4, r4, #1
 8000aa8:	e78d      	b.n	80009c6 <__aeabi_dsub+0x112>
 8000aaa:	4a59      	ldr	r2, [pc, #356]	@ (8000c10 <__aeabi_dsub+0x35c>)
 8000aac:	9b02      	ldr	r3, [sp, #8]
 8000aae:	4692      	mov	sl, r2
 8000ab0:	4662      	mov	r2, ip
 8000ab2:	44ba      	add	sl, r7
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	d02c      	beq.n	8000b12 <__aeabi_dsub+0x25e>
 8000ab8:	428e      	cmp	r6, r1
 8000aba:	d02e      	beq.n	8000b1a <__aeabi_dsub+0x266>
 8000abc:	4652      	mov	r2, sl
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	d060      	beq.n	8000b84 <__aeabi_dsub+0x2d0>
 8000ac2:	2f00      	cmp	r7, #0
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_dsub+0x214>
 8000ac6:	e0db      	b.n	8000c80 <__aeabi_dsub+0x3cc>
 8000ac8:	4663      	mov	r3, ip
 8000aca:	000e      	movs	r6, r1
 8000acc:	9c02      	ldr	r4, [sp, #8]
 8000ace:	08d8      	lsrs	r0, r3, #3
 8000ad0:	0762      	lsls	r2, r4, #29
 8000ad2:	4302      	orrs	r2, r0
 8000ad4:	08e4      	lsrs	r4, r4, #3
 8000ad6:	0013      	movs	r3, r2
 8000ad8:	4323      	orrs	r3, r4
 8000ada:	d100      	bne.n	8000ade <__aeabi_dsub+0x22a>
 8000adc:	e254      	b.n	8000f88 <__aeabi_dsub+0x6d4>
 8000ade:	2580      	movs	r5, #128	@ 0x80
 8000ae0:	032d      	lsls	r5, r5, #12
 8000ae2:	4325      	orrs	r5, r4
 8000ae4:	032d      	lsls	r5, r5, #12
 8000ae6:	4c48      	ldr	r4, [pc, #288]	@ (8000c08 <__aeabi_dsub+0x354>)
 8000ae8:	0b2d      	lsrs	r5, r5, #12
 8000aea:	e78c      	b.n	8000a06 <__aeabi_dsub+0x152>
 8000aec:	4661      	mov	r1, ip
 8000aee:	9b02      	ldr	r3, [sp, #8]
 8000af0:	4319      	orrs	r1, r3
 8000af2:	d100      	bne.n	8000af6 <__aeabi_dsub+0x242>
 8000af4:	e0cc      	b.n	8000c90 <__aeabi_dsub+0x3dc>
 8000af6:	0029      	movs	r1, r5
 8000af8:	3901      	subs	r1, #1
 8000afa:	2d01      	cmp	r5, #1
 8000afc:	d100      	bne.n	8000b00 <__aeabi_dsub+0x24c>
 8000afe:	e188      	b.n	8000e12 <__aeabi_dsub+0x55e>
 8000b00:	4295      	cmp	r5, r2
 8000b02:	d100      	bne.n	8000b06 <__aeabi_dsub+0x252>
 8000b04:	e0aa      	b.n	8000c5c <__aeabi_dsub+0x3a8>
 8000b06:	2501      	movs	r5, #1
 8000b08:	2938      	cmp	r1, #56	@ 0x38
 8000b0a:	dd00      	ble.n	8000b0e <__aeabi_dsub+0x25a>
 8000b0c:	e72f      	b.n	800096e <__aeabi_dsub+0xba>
 8000b0e:	468a      	mov	sl, r1
 8000b10:	e718      	b.n	8000944 <__aeabi_dsub+0x90>
 8000b12:	2201      	movs	r2, #1
 8000b14:	4051      	eors	r1, r2
 8000b16:	428e      	cmp	r6, r1
 8000b18:	d1d0      	bne.n	8000abc <__aeabi_dsub+0x208>
 8000b1a:	4653      	mov	r3, sl
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dsub+0x26e>
 8000b20:	e0be      	b.n	8000ca0 <__aeabi_dsub+0x3ec>
 8000b22:	2f00      	cmp	r7, #0
 8000b24:	d000      	beq.n	8000b28 <__aeabi_dsub+0x274>
 8000b26:	e138      	b.n	8000d9a <__aeabi_dsub+0x4e6>
 8000b28:	46ca      	mov	sl, r9
 8000b2a:	0022      	movs	r2, r4
 8000b2c:	4302      	orrs	r2, r0
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_dsub+0x27e>
 8000b30:	e1e2      	b.n	8000ef8 <__aeabi_dsub+0x644>
 8000b32:	4653      	mov	r3, sl
 8000b34:	1e59      	subs	r1, r3, #1
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dsub+0x288>
 8000b3a:	e20d      	b.n	8000f58 <__aeabi_dsub+0x6a4>
 8000b3c:	4a32      	ldr	r2, [pc, #200]	@ (8000c08 <__aeabi_dsub+0x354>)
 8000b3e:	4592      	cmp	sl, r2
 8000b40:	d100      	bne.n	8000b44 <__aeabi_dsub+0x290>
 8000b42:	e1d2      	b.n	8000eea <__aeabi_dsub+0x636>
 8000b44:	2701      	movs	r7, #1
 8000b46:	2938      	cmp	r1, #56	@ 0x38
 8000b48:	dc13      	bgt.n	8000b72 <__aeabi_dsub+0x2be>
 8000b4a:	291f      	cmp	r1, #31
 8000b4c:	dd00      	ble.n	8000b50 <__aeabi_dsub+0x29c>
 8000b4e:	e1ee      	b.n	8000f2e <__aeabi_dsub+0x67a>
 8000b50:	2220      	movs	r2, #32
 8000b52:	9b02      	ldr	r3, [sp, #8]
 8000b54:	1a52      	subs	r2, r2, r1
 8000b56:	0025      	movs	r5, r4
 8000b58:	0007      	movs	r7, r0
 8000b5a:	469a      	mov	sl, r3
 8000b5c:	40cc      	lsrs	r4, r1
 8000b5e:	4090      	lsls	r0, r2
 8000b60:	4095      	lsls	r5, r2
 8000b62:	40cf      	lsrs	r7, r1
 8000b64:	44a2      	add	sl, r4
 8000b66:	1e42      	subs	r2, r0, #1
 8000b68:	4190      	sbcs	r0, r2
 8000b6a:	4653      	mov	r3, sl
 8000b6c:	432f      	orrs	r7, r5
 8000b6e:	4307      	orrs	r7, r0
 8000b70:	9302      	str	r3, [sp, #8]
 8000b72:	003d      	movs	r5, r7
 8000b74:	4465      	add	r5, ip
 8000b76:	4565      	cmp	r5, ip
 8000b78:	4192      	sbcs	r2, r2
 8000b7a:	9b02      	ldr	r3, [sp, #8]
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	464f      	mov	r7, r9
 8000b80:	18d4      	adds	r4, r2, r3
 8000b82:	e780      	b.n	8000a86 <__aeabi_dsub+0x1d2>
 8000b84:	4a23      	ldr	r2, [pc, #140]	@ (8000c14 <__aeabi_dsub+0x360>)
 8000b86:	1c7d      	adds	r5, r7, #1
 8000b88:	4215      	tst	r5, r2
 8000b8a:	d000      	beq.n	8000b8e <__aeabi_dsub+0x2da>
 8000b8c:	e0aa      	b.n	8000ce4 <__aeabi_dsub+0x430>
 8000b8e:	4662      	mov	r2, ip
 8000b90:	0025      	movs	r5, r4
 8000b92:	9b02      	ldr	r3, [sp, #8]
 8000b94:	4305      	orrs	r5, r0
 8000b96:	431a      	orrs	r2, r3
 8000b98:	2f00      	cmp	r7, #0
 8000b9a:	d000      	beq.n	8000b9e <__aeabi_dsub+0x2ea>
 8000b9c:	e0f5      	b.n	8000d8a <__aeabi_dsub+0x4d6>
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dsub+0x2f0>
 8000ba2:	e16b      	b.n	8000e7c <__aeabi_dsub+0x5c8>
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	d100      	bne.n	8000baa <__aeabi_dsub+0x2f6>
 8000ba8:	e152      	b.n	8000e50 <__aeabi_dsub+0x59c>
 8000baa:	4663      	mov	r3, ip
 8000bac:	1ac5      	subs	r5, r0, r3
 8000bae:	9b02      	ldr	r3, [sp, #8]
 8000bb0:	1ae2      	subs	r2, r4, r3
 8000bb2:	42a8      	cmp	r0, r5
 8000bb4:	419b      	sbcs	r3, r3
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	021a      	lsls	r2, r3, #8
 8000bbc:	d400      	bmi.n	8000bc0 <__aeabi_dsub+0x30c>
 8000bbe:	e1d5      	b.n	8000f6c <__aeabi_dsub+0x6b8>
 8000bc0:	4663      	mov	r3, ip
 8000bc2:	1a1d      	subs	r5, r3, r0
 8000bc4:	45ac      	cmp	ip, r5
 8000bc6:	4192      	sbcs	r2, r2
 8000bc8:	2601      	movs	r6, #1
 8000bca:	9b02      	ldr	r3, [sp, #8]
 8000bcc:	4252      	negs	r2, r2
 8000bce:	1b1c      	subs	r4, r3, r4
 8000bd0:	4688      	mov	r8, r1
 8000bd2:	1aa4      	subs	r4, r4, r2
 8000bd4:	400e      	ands	r6, r1
 8000bd6:	e6f6      	b.n	80009c6 <__aeabi_dsub+0x112>
 8000bd8:	4297      	cmp	r7, r2
 8000bda:	d03f      	beq.n	8000c5c <__aeabi_dsub+0x3a8>
 8000bdc:	4652      	mov	r2, sl
 8000bde:	2501      	movs	r5, #1
 8000be0:	2a38      	cmp	r2, #56	@ 0x38
 8000be2:	dd00      	ble.n	8000be6 <__aeabi_dsub+0x332>
 8000be4:	e74a      	b.n	8000a7c <__aeabi_dsub+0x1c8>
 8000be6:	2280      	movs	r2, #128	@ 0x80
 8000be8:	9b02      	ldr	r3, [sp, #8]
 8000bea:	0412      	lsls	r2, r2, #16
 8000bec:	4313      	orrs	r3, r2
 8000bee:	9302      	str	r3, [sp, #8]
 8000bf0:	e72d      	b.n	8000a4e <__aeabi_dsub+0x19a>
 8000bf2:	003c      	movs	r4, r7
 8000bf4:	2500      	movs	r5, #0
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	e705      	b.n	8000a06 <__aeabi_dsub+0x152>
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	402b      	ands	r3, r5
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d000      	beq.n	8000c04 <__aeabi_dsub+0x350>
 8000c02:	e6e2      	b.n	80009ca <__aeabi_dsub+0x116>
 8000c04:	e06b      	b.n	8000cde <__aeabi_dsub+0x42a>
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	000007ff 	.word	0x000007ff
 8000c0c:	ff7fffff 	.word	0xff7fffff
 8000c10:	fffff801 	.word	0xfffff801
 8000c14:	000007fe 	.word	0x000007fe
 8000c18:	0028      	movs	r0, r5
 8000c1a:	f000 fa85 	bl	8001128 <__clzsi2>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	3318      	adds	r3, #24
 8000c22:	2b1f      	cmp	r3, #31
 8000c24:	dc00      	bgt.n	8000c28 <__aeabi_dsub+0x374>
 8000c26:	e6b4      	b.n	8000992 <__aeabi_dsub+0xde>
 8000c28:	002a      	movs	r2, r5
 8000c2a:	3808      	subs	r0, #8
 8000c2c:	4082      	lsls	r2, r0
 8000c2e:	429f      	cmp	r7, r3
 8000c30:	dd00      	ble.n	8000c34 <__aeabi_dsub+0x380>
 8000c32:	e0b9      	b.n	8000da8 <__aeabi_dsub+0x4f4>
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	1c58      	adds	r0, r3, #1
 8000c38:	281f      	cmp	r0, #31
 8000c3a:	dc00      	bgt.n	8000c3e <__aeabi_dsub+0x38a>
 8000c3c:	e1a0      	b.n	8000f80 <__aeabi_dsub+0x6cc>
 8000c3e:	0015      	movs	r5, r2
 8000c40:	3b1f      	subs	r3, #31
 8000c42:	40dd      	lsrs	r5, r3
 8000c44:	2820      	cmp	r0, #32
 8000c46:	d005      	beq.n	8000c54 <__aeabi_dsub+0x3a0>
 8000c48:	2340      	movs	r3, #64	@ 0x40
 8000c4a:	1a1b      	subs	r3, r3, r0
 8000c4c:	409a      	lsls	r2, r3
 8000c4e:	1e53      	subs	r3, r2, #1
 8000c50:	419a      	sbcs	r2, r3
 8000c52:	4315      	orrs	r5, r2
 8000c54:	2307      	movs	r3, #7
 8000c56:	2700      	movs	r7, #0
 8000c58:	402b      	ands	r3, r5
 8000c5a:	e7d0      	b.n	8000bfe <__aeabi_dsub+0x34a>
 8000c5c:	08c0      	lsrs	r0, r0, #3
 8000c5e:	0762      	lsls	r2, r4, #29
 8000c60:	4302      	orrs	r2, r0
 8000c62:	08e4      	lsrs	r4, r4, #3
 8000c64:	e737      	b.n	8000ad6 <__aeabi_dsub+0x222>
 8000c66:	08ea      	lsrs	r2, r5, #3
 8000c68:	0763      	lsls	r3, r4, #29
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	4bd3      	ldr	r3, [pc, #844]	@ (8000fbc <__aeabi_dsub+0x708>)
 8000c6e:	08e4      	lsrs	r4, r4, #3
 8000c70:	429f      	cmp	r7, r3
 8000c72:	d100      	bne.n	8000c76 <__aeabi_dsub+0x3c2>
 8000c74:	e72f      	b.n	8000ad6 <__aeabi_dsub+0x222>
 8000c76:	0324      	lsls	r4, r4, #12
 8000c78:	0b25      	lsrs	r5, r4, #12
 8000c7a:	057c      	lsls	r4, r7, #21
 8000c7c:	0d64      	lsrs	r4, r4, #21
 8000c7e:	e6c2      	b.n	8000a06 <__aeabi_dsub+0x152>
 8000c80:	46ca      	mov	sl, r9
 8000c82:	0022      	movs	r2, r4
 8000c84:	4302      	orrs	r2, r0
 8000c86:	d158      	bne.n	8000d3a <__aeabi_dsub+0x486>
 8000c88:	4663      	mov	r3, ip
 8000c8a:	000e      	movs	r6, r1
 8000c8c:	9c02      	ldr	r4, [sp, #8]
 8000c8e:	9303      	str	r3, [sp, #12]
 8000c90:	9b03      	ldr	r3, [sp, #12]
 8000c92:	4657      	mov	r7, sl
 8000c94:	08da      	lsrs	r2, r3, #3
 8000c96:	e7e7      	b.n	8000c68 <__aeabi_dsub+0x3b4>
 8000c98:	4cc9      	ldr	r4, [pc, #804]	@ (8000fc0 <__aeabi_dsub+0x70c>)
 8000c9a:	1aff      	subs	r7, r7, r3
 8000c9c:	4014      	ands	r4, r2
 8000c9e:	e692      	b.n	80009c6 <__aeabi_dsub+0x112>
 8000ca0:	4dc8      	ldr	r5, [pc, #800]	@ (8000fc4 <__aeabi_dsub+0x710>)
 8000ca2:	1c7a      	adds	r2, r7, #1
 8000ca4:	422a      	tst	r2, r5
 8000ca6:	d000      	beq.n	8000caa <__aeabi_dsub+0x3f6>
 8000ca8:	e084      	b.n	8000db4 <__aeabi_dsub+0x500>
 8000caa:	0022      	movs	r2, r4
 8000cac:	4302      	orrs	r2, r0
 8000cae:	2f00      	cmp	r7, #0
 8000cb0:	d000      	beq.n	8000cb4 <__aeabi_dsub+0x400>
 8000cb2:	e0ef      	b.n	8000e94 <__aeabi_dsub+0x5e0>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	d100      	bne.n	8000cba <__aeabi_dsub+0x406>
 8000cb8:	e0e5      	b.n	8000e86 <__aeabi_dsub+0x5d2>
 8000cba:	4662      	mov	r2, ip
 8000cbc:	9902      	ldr	r1, [sp, #8]
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_dsub+0x410>
 8000cc2:	e0c5      	b.n	8000e50 <__aeabi_dsub+0x59c>
 8000cc4:	4663      	mov	r3, ip
 8000cc6:	18c5      	adds	r5, r0, r3
 8000cc8:	468c      	mov	ip, r1
 8000cca:	4285      	cmp	r5, r0
 8000ccc:	4180      	sbcs	r0, r0
 8000cce:	4464      	add	r4, ip
 8000cd0:	4240      	negs	r0, r0
 8000cd2:	1824      	adds	r4, r4, r0
 8000cd4:	0223      	lsls	r3, r4, #8
 8000cd6:	d502      	bpl.n	8000cde <__aeabi_dsub+0x42a>
 8000cd8:	4bb9      	ldr	r3, [pc, #740]	@ (8000fc0 <__aeabi_dsub+0x70c>)
 8000cda:	3701      	adds	r7, #1
 8000cdc:	401c      	ands	r4, r3
 8000cde:	46ba      	mov	sl, r7
 8000ce0:	9503      	str	r5, [sp, #12]
 8000ce2:	e7d5      	b.n	8000c90 <__aeabi_dsub+0x3dc>
 8000ce4:	4662      	mov	r2, ip
 8000ce6:	1a85      	subs	r5, r0, r2
 8000ce8:	42a8      	cmp	r0, r5
 8000cea:	4192      	sbcs	r2, r2
 8000cec:	4252      	negs	r2, r2
 8000cee:	4691      	mov	r9, r2
 8000cf0:	9b02      	ldr	r3, [sp, #8]
 8000cf2:	1ae3      	subs	r3, r4, r3
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	1ad2      	subs	r2, r2, r3
 8000cfa:	0013      	movs	r3, r2
 8000cfc:	4691      	mov	r9, r2
 8000cfe:	021a      	lsls	r2, r3, #8
 8000d00:	d46c      	bmi.n	8000ddc <__aeabi_dsub+0x528>
 8000d02:	464a      	mov	r2, r9
 8000d04:	464c      	mov	r4, r9
 8000d06:	432a      	orrs	r2, r5
 8000d08:	d000      	beq.n	8000d0c <__aeabi_dsub+0x458>
 8000d0a:	e63a      	b.n	8000982 <__aeabi_dsub+0xce>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	2400      	movs	r4, #0
 8000d10:	2500      	movs	r5, #0
 8000d12:	e678      	b.n	8000a06 <__aeabi_dsub+0x152>
 8000d14:	9902      	ldr	r1, [sp, #8]
 8000d16:	4653      	mov	r3, sl
 8000d18:	000d      	movs	r5, r1
 8000d1a:	3a20      	subs	r2, #32
 8000d1c:	40d5      	lsrs	r5, r2
 8000d1e:	2b20      	cmp	r3, #32
 8000d20:	d006      	beq.n	8000d30 <__aeabi_dsub+0x47c>
 8000d22:	2240      	movs	r2, #64	@ 0x40
 8000d24:	1ad2      	subs	r2, r2, r3
 8000d26:	000b      	movs	r3, r1
 8000d28:	4093      	lsls	r3, r2
 8000d2a:	4662      	mov	r2, ip
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	4693      	mov	fp, r2
 8000d30:	465b      	mov	r3, fp
 8000d32:	1e5a      	subs	r2, r3, #1
 8000d34:	4193      	sbcs	r3, r2
 8000d36:	431d      	orrs	r5, r3
 8000d38:	e619      	b.n	800096e <__aeabi_dsub+0xba>
 8000d3a:	4653      	mov	r3, sl
 8000d3c:	1e5a      	subs	r2, r3, #1
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d100      	bne.n	8000d44 <__aeabi_dsub+0x490>
 8000d42:	e0c6      	b.n	8000ed2 <__aeabi_dsub+0x61e>
 8000d44:	4e9d      	ldr	r6, [pc, #628]	@ (8000fbc <__aeabi_dsub+0x708>)
 8000d46:	45b2      	cmp	sl, r6
 8000d48:	d100      	bne.n	8000d4c <__aeabi_dsub+0x498>
 8000d4a:	e6bd      	b.n	8000ac8 <__aeabi_dsub+0x214>
 8000d4c:	4688      	mov	r8, r1
 8000d4e:	000e      	movs	r6, r1
 8000d50:	2501      	movs	r5, #1
 8000d52:	2a38      	cmp	r2, #56	@ 0x38
 8000d54:	dc10      	bgt.n	8000d78 <__aeabi_dsub+0x4c4>
 8000d56:	2a1f      	cmp	r2, #31
 8000d58:	dc7f      	bgt.n	8000e5a <__aeabi_dsub+0x5a6>
 8000d5a:	2120      	movs	r1, #32
 8000d5c:	0025      	movs	r5, r4
 8000d5e:	1a89      	subs	r1, r1, r2
 8000d60:	0007      	movs	r7, r0
 8000d62:	4088      	lsls	r0, r1
 8000d64:	408d      	lsls	r5, r1
 8000d66:	40d7      	lsrs	r7, r2
 8000d68:	40d4      	lsrs	r4, r2
 8000d6a:	1e41      	subs	r1, r0, #1
 8000d6c:	4188      	sbcs	r0, r1
 8000d6e:	9b02      	ldr	r3, [sp, #8]
 8000d70:	433d      	orrs	r5, r7
 8000d72:	1b1b      	subs	r3, r3, r4
 8000d74:	4305      	orrs	r5, r0
 8000d76:	9302      	str	r3, [sp, #8]
 8000d78:	4662      	mov	r2, ip
 8000d7a:	1b55      	subs	r5, r2, r5
 8000d7c:	45ac      	cmp	ip, r5
 8000d7e:	4192      	sbcs	r2, r2
 8000d80:	9b02      	ldr	r3, [sp, #8]
 8000d82:	4252      	negs	r2, r2
 8000d84:	464f      	mov	r7, r9
 8000d86:	1a9c      	subs	r4, r3, r2
 8000d88:	e5f6      	b.n	8000978 <__aeabi_dsub+0xc4>
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d000      	beq.n	8000d90 <__aeabi_dsub+0x4dc>
 8000d8e:	e0b7      	b.n	8000f00 <__aeabi_dsub+0x64c>
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	d100      	bne.n	8000d96 <__aeabi_dsub+0x4e2>
 8000d94:	e0f0      	b.n	8000f78 <__aeabi_dsub+0x6c4>
 8000d96:	2601      	movs	r6, #1
 8000d98:	400e      	ands	r6, r1
 8000d9a:	4663      	mov	r3, ip
 8000d9c:	9802      	ldr	r0, [sp, #8]
 8000d9e:	08d9      	lsrs	r1, r3, #3
 8000da0:	0742      	lsls	r2, r0, #29
 8000da2:	430a      	orrs	r2, r1
 8000da4:	08c4      	lsrs	r4, r0, #3
 8000da6:	e696      	b.n	8000ad6 <__aeabi_dsub+0x222>
 8000da8:	4c85      	ldr	r4, [pc, #532]	@ (8000fc0 <__aeabi_dsub+0x70c>)
 8000daa:	1aff      	subs	r7, r7, r3
 8000dac:	4014      	ands	r4, r2
 8000dae:	0762      	lsls	r2, r4, #29
 8000db0:	08e4      	lsrs	r4, r4, #3
 8000db2:	e760      	b.n	8000c76 <__aeabi_dsub+0x3c2>
 8000db4:	4981      	ldr	r1, [pc, #516]	@ (8000fbc <__aeabi_dsub+0x708>)
 8000db6:	428a      	cmp	r2, r1
 8000db8:	d100      	bne.n	8000dbc <__aeabi_dsub+0x508>
 8000dba:	e0c9      	b.n	8000f50 <__aeabi_dsub+0x69c>
 8000dbc:	4663      	mov	r3, ip
 8000dbe:	18c1      	adds	r1, r0, r3
 8000dc0:	4281      	cmp	r1, r0
 8000dc2:	4180      	sbcs	r0, r0
 8000dc4:	9b02      	ldr	r3, [sp, #8]
 8000dc6:	4240      	negs	r0, r0
 8000dc8:	18e3      	adds	r3, r4, r3
 8000dca:	181b      	adds	r3, r3, r0
 8000dcc:	07dd      	lsls	r5, r3, #31
 8000dce:	085c      	lsrs	r4, r3, #1
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	0849      	lsrs	r1, r1, #1
 8000dd4:	430d      	orrs	r5, r1
 8000dd6:	0017      	movs	r7, r2
 8000dd8:	402b      	ands	r3, r5
 8000dda:	e710      	b.n	8000bfe <__aeabi_dsub+0x34a>
 8000ddc:	4663      	mov	r3, ip
 8000dde:	1a1d      	subs	r5, r3, r0
 8000de0:	45ac      	cmp	ip, r5
 8000de2:	4192      	sbcs	r2, r2
 8000de4:	2601      	movs	r6, #1
 8000de6:	9b02      	ldr	r3, [sp, #8]
 8000de8:	4252      	negs	r2, r2
 8000dea:	1b1c      	subs	r4, r3, r4
 8000dec:	4688      	mov	r8, r1
 8000dee:	1aa4      	subs	r4, r4, r2
 8000df0:	400e      	ands	r6, r1
 8000df2:	e5c6      	b.n	8000982 <__aeabi_dsub+0xce>
 8000df4:	4663      	mov	r3, ip
 8000df6:	18c5      	adds	r5, r0, r3
 8000df8:	9b02      	ldr	r3, [sp, #8]
 8000dfa:	4285      	cmp	r5, r0
 8000dfc:	4180      	sbcs	r0, r0
 8000dfe:	469c      	mov	ip, r3
 8000e00:	4240      	negs	r0, r0
 8000e02:	4464      	add	r4, ip
 8000e04:	1824      	adds	r4, r4, r0
 8000e06:	2701      	movs	r7, #1
 8000e08:	0223      	lsls	r3, r4, #8
 8000e0a:	d400      	bmi.n	8000e0e <__aeabi_dsub+0x55a>
 8000e0c:	e6f5      	b.n	8000bfa <__aeabi_dsub+0x346>
 8000e0e:	2702      	movs	r7, #2
 8000e10:	e641      	b.n	8000a96 <__aeabi_dsub+0x1e2>
 8000e12:	4663      	mov	r3, ip
 8000e14:	1ac5      	subs	r5, r0, r3
 8000e16:	42a8      	cmp	r0, r5
 8000e18:	4180      	sbcs	r0, r0
 8000e1a:	9b02      	ldr	r3, [sp, #8]
 8000e1c:	4240      	negs	r0, r0
 8000e1e:	1ae4      	subs	r4, r4, r3
 8000e20:	2701      	movs	r7, #1
 8000e22:	1a24      	subs	r4, r4, r0
 8000e24:	e5a8      	b.n	8000978 <__aeabi_dsub+0xc4>
 8000e26:	9d02      	ldr	r5, [sp, #8]
 8000e28:	4652      	mov	r2, sl
 8000e2a:	002b      	movs	r3, r5
 8000e2c:	3a20      	subs	r2, #32
 8000e2e:	40d3      	lsrs	r3, r2
 8000e30:	0019      	movs	r1, r3
 8000e32:	4653      	mov	r3, sl
 8000e34:	2b20      	cmp	r3, #32
 8000e36:	d006      	beq.n	8000e46 <__aeabi_dsub+0x592>
 8000e38:	2240      	movs	r2, #64	@ 0x40
 8000e3a:	1ad2      	subs	r2, r2, r3
 8000e3c:	002b      	movs	r3, r5
 8000e3e:	4093      	lsls	r3, r2
 8000e40:	4662      	mov	r2, ip
 8000e42:	431a      	orrs	r2, r3
 8000e44:	4693      	mov	fp, r2
 8000e46:	465d      	mov	r5, fp
 8000e48:	1e6b      	subs	r3, r5, #1
 8000e4a:	419d      	sbcs	r5, r3
 8000e4c:	430d      	orrs	r5, r1
 8000e4e:	e615      	b.n	8000a7c <__aeabi_dsub+0x1c8>
 8000e50:	0762      	lsls	r2, r4, #29
 8000e52:	08c0      	lsrs	r0, r0, #3
 8000e54:	4302      	orrs	r2, r0
 8000e56:	08e4      	lsrs	r4, r4, #3
 8000e58:	e70d      	b.n	8000c76 <__aeabi_dsub+0x3c2>
 8000e5a:	0011      	movs	r1, r2
 8000e5c:	0027      	movs	r7, r4
 8000e5e:	3920      	subs	r1, #32
 8000e60:	40cf      	lsrs	r7, r1
 8000e62:	2a20      	cmp	r2, #32
 8000e64:	d005      	beq.n	8000e72 <__aeabi_dsub+0x5be>
 8000e66:	2140      	movs	r1, #64	@ 0x40
 8000e68:	1a8a      	subs	r2, r1, r2
 8000e6a:	4094      	lsls	r4, r2
 8000e6c:	0025      	movs	r5, r4
 8000e6e:	4305      	orrs	r5, r0
 8000e70:	9503      	str	r5, [sp, #12]
 8000e72:	9d03      	ldr	r5, [sp, #12]
 8000e74:	1e6a      	subs	r2, r5, #1
 8000e76:	4195      	sbcs	r5, r2
 8000e78:	433d      	orrs	r5, r7
 8000e7a:	e77d      	b.n	8000d78 <__aeabi_dsub+0x4c4>
 8000e7c:	2a00      	cmp	r2, #0
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_dsub+0x5ce>
 8000e80:	e744      	b.n	8000d0c <__aeabi_dsub+0x458>
 8000e82:	2601      	movs	r6, #1
 8000e84:	400e      	ands	r6, r1
 8000e86:	4663      	mov	r3, ip
 8000e88:	08d9      	lsrs	r1, r3, #3
 8000e8a:	9b02      	ldr	r3, [sp, #8]
 8000e8c:	075a      	lsls	r2, r3, #29
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	08dc      	lsrs	r4, r3, #3
 8000e92:	e6f0      	b.n	8000c76 <__aeabi_dsub+0x3c2>
 8000e94:	2a00      	cmp	r2, #0
 8000e96:	d028      	beq.n	8000eea <__aeabi_dsub+0x636>
 8000e98:	4662      	mov	r2, ip
 8000e9a:	9f02      	ldr	r7, [sp, #8]
 8000e9c:	08c0      	lsrs	r0, r0, #3
 8000e9e:	433a      	orrs	r2, r7
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_dsub+0x5f0>
 8000ea2:	e6dc      	b.n	8000c5e <__aeabi_dsub+0x3aa>
 8000ea4:	0762      	lsls	r2, r4, #29
 8000ea6:	4310      	orrs	r0, r2
 8000ea8:	2280      	movs	r2, #128	@ 0x80
 8000eaa:	08e4      	lsrs	r4, r4, #3
 8000eac:	0312      	lsls	r2, r2, #12
 8000eae:	4214      	tst	r4, r2
 8000eb0:	d009      	beq.n	8000ec6 <__aeabi_dsub+0x612>
 8000eb2:	08fd      	lsrs	r5, r7, #3
 8000eb4:	4215      	tst	r5, r2
 8000eb6:	d106      	bne.n	8000ec6 <__aeabi_dsub+0x612>
 8000eb8:	4663      	mov	r3, ip
 8000eba:	2601      	movs	r6, #1
 8000ebc:	002c      	movs	r4, r5
 8000ebe:	08d8      	lsrs	r0, r3, #3
 8000ec0:	077b      	lsls	r3, r7, #29
 8000ec2:	4318      	orrs	r0, r3
 8000ec4:	400e      	ands	r6, r1
 8000ec6:	0f42      	lsrs	r2, r0, #29
 8000ec8:	00c0      	lsls	r0, r0, #3
 8000eca:	08c0      	lsrs	r0, r0, #3
 8000ecc:	0752      	lsls	r2, r2, #29
 8000ece:	4302      	orrs	r2, r0
 8000ed0:	e601      	b.n	8000ad6 <__aeabi_dsub+0x222>
 8000ed2:	4663      	mov	r3, ip
 8000ed4:	1a1d      	subs	r5, r3, r0
 8000ed6:	45ac      	cmp	ip, r5
 8000ed8:	4192      	sbcs	r2, r2
 8000eda:	9b02      	ldr	r3, [sp, #8]
 8000edc:	4252      	negs	r2, r2
 8000ede:	1b1c      	subs	r4, r3, r4
 8000ee0:	000e      	movs	r6, r1
 8000ee2:	4688      	mov	r8, r1
 8000ee4:	2701      	movs	r7, #1
 8000ee6:	1aa4      	subs	r4, r4, r2
 8000ee8:	e546      	b.n	8000978 <__aeabi_dsub+0xc4>
 8000eea:	4663      	mov	r3, ip
 8000eec:	08d9      	lsrs	r1, r3, #3
 8000eee:	9b02      	ldr	r3, [sp, #8]
 8000ef0:	075a      	lsls	r2, r3, #29
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	08dc      	lsrs	r4, r3, #3
 8000ef6:	e5ee      	b.n	8000ad6 <__aeabi_dsub+0x222>
 8000ef8:	4663      	mov	r3, ip
 8000efa:	9c02      	ldr	r4, [sp, #8]
 8000efc:	9303      	str	r3, [sp, #12]
 8000efe:	e6c7      	b.n	8000c90 <__aeabi_dsub+0x3dc>
 8000f00:	08c0      	lsrs	r0, r0, #3
 8000f02:	2a00      	cmp	r2, #0
 8000f04:	d100      	bne.n	8000f08 <__aeabi_dsub+0x654>
 8000f06:	e6aa      	b.n	8000c5e <__aeabi_dsub+0x3aa>
 8000f08:	0762      	lsls	r2, r4, #29
 8000f0a:	4310      	orrs	r0, r2
 8000f0c:	2280      	movs	r2, #128	@ 0x80
 8000f0e:	08e4      	lsrs	r4, r4, #3
 8000f10:	0312      	lsls	r2, r2, #12
 8000f12:	4214      	tst	r4, r2
 8000f14:	d0d7      	beq.n	8000ec6 <__aeabi_dsub+0x612>
 8000f16:	9f02      	ldr	r7, [sp, #8]
 8000f18:	08fd      	lsrs	r5, r7, #3
 8000f1a:	4215      	tst	r5, r2
 8000f1c:	d1d3      	bne.n	8000ec6 <__aeabi_dsub+0x612>
 8000f1e:	4663      	mov	r3, ip
 8000f20:	2601      	movs	r6, #1
 8000f22:	08d8      	lsrs	r0, r3, #3
 8000f24:	077b      	lsls	r3, r7, #29
 8000f26:	002c      	movs	r4, r5
 8000f28:	4318      	orrs	r0, r3
 8000f2a:	400e      	ands	r6, r1
 8000f2c:	e7cb      	b.n	8000ec6 <__aeabi_dsub+0x612>
 8000f2e:	000a      	movs	r2, r1
 8000f30:	0027      	movs	r7, r4
 8000f32:	3a20      	subs	r2, #32
 8000f34:	40d7      	lsrs	r7, r2
 8000f36:	2920      	cmp	r1, #32
 8000f38:	d005      	beq.n	8000f46 <__aeabi_dsub+0x692>
 8000f3a:	2240      	movs	r2, #64	@ 0x40
 8000f3c:	1a52      	subs	r2, r2, r1
 8000f3e:	4094      	lsls	r4, r2
 8000f40:	0025      	movs	r5, r4
 8000f42:	4305      	orrs	r5, r0
 8000f44:	9503      	str	r5, [sp, #12]
 8000f46:	9d03      	ldr	r5, [sp, #12]
 8000f48:	1e6a      	subs	r2, r5, #1
 8000f4a:	4195      	sbcs	r5, r2
 8000f4c:	432f      	orrs	r7, r5
 8000f4e:	e610      	b.n	8000b72 <__aeabi_dsub+0x2be>
 8000f50:	0014      	movs	r4, r2
 8000f52:	2500      	movs	r5, #0
 8000f54:	2200      	movs	r2, #0
 8000f56:	e556      	b.n	8000a06 <__aeabi_dsub+0x152>
 8000f58:	9b02      	ldr	r3, [sp, #8]
 8000f5a:	4460      	add	r0, ip
 8000f5c:	4699      	mov	r9, r3
 8000f5e:	4560      	cmp	r0, ip
 8000f60:	4192      	sbcs	r2, r2
 8000f62:	444c      	add	r4, r9
 8000f64:	4252      	negs	r2, r2
 8000f66:	0005      	movs	r5, r0
 8000f68:	18a4      	adds	r4, r4, r2
 8000f6a:	e74c      	b.n	8000e06 <__aeabi_dsub+0x552>
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	001c      	movs	r4, r3
 8000f70:	432a      	orrs	r2, r5
 8000f72:	d000      	beq.n	8000f76 <__aeabi_dsub+0x6c2>
 8000f74:	e6b3      	b.n	8000cde <__aeabi_dsub+0x42a>
 8000f76:	e6c9      	b.n	8000d0c <__aeabi_dsub+0x458>
 8000f78:	2480      	movs	r4, #128	@ 0x80
 8000f7a:	2600      	movs	r6, #0
 8000f7c:	0324      	lsls	r4, r4, #12
 8000f7e:	e5ae      	b.n	8000ade <__aeabi_dsub+0x22a>
 8000f80:	2120      	movs	r1, #32
 8000f82:	2500      	movs	r5, #0
 8000f84:	1a09      	subs	r1, r1, r0
 8000f86:	e517      	b.n	80009b8 <__aeabi_dsub+0x104>
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2500      	movs	r5, #0
 8000f8c:	4c0b      	ldr	r4, [pc, #44]	@ (8000fbc <__aeabi_dsub+0x708>)
 8000f8e:	e53a      	b.n	8000a06 <__aeabi_dsub+0x152>
 8000f90:	2d00      	cmp	r5, #0
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dsub+0x6e2>
 8000f94:	e5f6      	b.n	8000b84 <__aeabi_dsub+0x2d0>
 8000f96:	464b      	mov	r3, r9
 8000f98:	1bda      	subs	r2, r3, r7
 8000f9a:	4692      	mov	sl, r2
 8000f9c:	2f00      	cmp	r7, #0
 8000f9e:	d100      	bne.n	8000fa2 <__aeabi_dsub+0x6ee>
 8000fa0:	e66f      	b.n	8000c82 <__aeabi_dsub+0x3ce>
 8000fa2:	2a38      	cmp	r2, #56	@ 0x38
 8000fa4:	dc05      	bgt.n	8000fb2 <__aeabi_dsub+0x6fe>
 8000fa6:	2680      	movs	r6, #128	@ 0x80
 8000fa8:	0436      	lsls	r6, r6, #16
 8000faa:	4334      	orrs	r4, r6
 8000fac:	4688      	mov	r8, r1
 8000fae:	000e      	movs	r6, r1
 8000fb0:	e6d1      	b.n	8000d56 <__aeabi_dsub+0x4a2>
 8000fb2:	4688      	mov	r8, r1
 8000fb4:	000e      	movs	r6, r1
 8000fb6:	2501      	movs	r5, #1
 8000fb8:	e6de      	b.n	8000d78 <__aeabi_dsub+0x4c4>
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	000007ff 	.word	0x000007ff
 8000fc0:	ff7fffff 	.word	0xff7fffff
 8000fc4:	000007fe 	.word	0x000007fe
 8000fc8:	2d00      	cmp	r5, #0
 8000fca:	d100      	bne.n	8000fce <__aeabi_dsub+0x71a>
 8000fcc:	e668      	b.n	8000ca0 <__aeabi_dsub+0x3ec>
 8000fce:	464b      	mov	r3, r9
 8000fd0:	1bd9      	subs	r1, r3, r7
 8000fd2:	2f00      	cmp	r7, #0
 8000fd4:	d101      	bne.n	8000fda <__aeabi_dsub+0x726>
 8000fd6:	468a      	mov	sl, r1
 8000fd8:	e5a7      	b.n	8000b2a <__aeabi_dsub+0x276>
 8000fda:	2701      	movs	r7, #1
 8000fdc:	2938      	cmp	r1, #56	@ 0x38
 8000fde:	dd00      	ble.n	8000fe2 <__aeabi_dsub+0x72e>
 8000fe0:	e5c7      	b.n	8000b72 <__aeabi_dsub+0x2be>
 8000fe2:	2280      	movs	r2, #128	@ 0x80
 8000fe4:	0412      	lsls	r2, r2, #16
 8000fe6:	4314      	orrs	r4, r2
 8000fe8:	e5af      	b.n	8000b4a <__aeabi_dsub+0x296>
 8000fea:	46c0      	nop			@ (mov r8, r8)

08000fec <__aeabi_d2iz>:
 8000fec:	000b      	movs	r3, r1
 8000fee:	0002      	movs	r2, r0
 8000ff0:	b570      	push	{r4, r5, r6, lr}
 8000ff2:	4d16      	ldr	r5, [pc, #88]	@ (800104c <__aeabi_d2iz+0x60>)
 8000ff4:	030c      	lsls	r4, r1, #12
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	0049      	lsls	r1, r1, #1
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	9200      	str	r2, [sp, #0]
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	0b24      	lsrs	r4, r4, #12
 8001002:	0d49      	lsrs	r1, r1, #21
 8001004:	0fde      	lsrs	r6, r3, #31
 8001006:	42a9      	cmp	r1, r5
 8001008:	dd04      	ble.n	8001014 <__aeabi_d2iz+0x28>
 800100a:	4811      	ldr	r0, [pc, #68]	@ (8001050 <__aeabi_d2iz+0x64>)
 800100c:	4281      	cmp	r1, r0
 800100e:	dd03      	ble.n	8001018 <__aeabi_d2iz+0x2c>
 8001010:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <__aeabi_d2iz+0x68>)
 8001012:	18f0      	adds	r0, r6, r3
 8001014:	b002      	add	sp, #8
 8001016:	bd70      	pop	{r4, r5, r6, pc}
 8001018:	2080      	movs	r0, #128	@ 0x80
 800101a:	0340      	lsls	r0, r0, #13
 800101c:	4320      	orrs	r0, r4
 800101e:	4c0e      	ldr	r4, [pc, #56]	@ (8001058 <__aeabi_d2iz+0x6c>)
 8001020:	1a64      	subs	r4, r4, r1
 8001022:	2c1f      	cmp	r4, #31
 8001024:	dd08      	ble.n	8001038 <__aeabi_d2iz+0x4c>
 8001026:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <__aeabi_d2iz+0x70>)
 8001028:	1a5b      	subs	r3, r3, r1
 800102a:	40d8      	lsrs	r0, r3
 800102c:	0003      	movs	r3, r0
 800102e:	4258      	negs	r0, r3
 8001030:	2e00      	cmp	r6, #0
 8001032:	d1ef      	bne.n	8001014 <__aeabi_d2iz+0x28>
 8001034:	0018      	movs	r0, r3
 8001036:	e7ed      	b.n	8001014 <__aeabi_d2iz+0x28>
 8001038:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <__aeabi_d2iz+0x74>)
 800103a:	9a00      	ldr	r2, [sp, #0]
 800103c:	469c      	mov	ip, r3
 800103e:	0003      	movs	r3, r0
 8001040:	4461      	add	r1, ip
 8001042:	408b      	lsls	r3, r1
 8001044:	40e2      	lsrs	r2, r4
 8001046:	4313      	orrs	r3, r2
 8001048:	e7f1      	b.n	800102e <__aeabi_d2iz+0x42>
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	000003fe 	.word	0x000003fe
 8001050:	0000041d 	.word	0x0000041d
 8001054:	7fffffff 	.word	0x7fffffff
 8001058:	00000433 	.word	0x00000433
 800105c:	00000413 	.word	0x00000413
 8001060:	fffffbed 	.word	0xfffffbed

08001064 <__aeabi_ui2d>:
 8001064:	b510      	push	{r4, lr}
 8001066:	1e04      	subs	r4, r0, #0
 8001068:	d010      	beq.n	800108c <__aeabi_ui2d+0x28>
 800106a:	f000 f85d 	bl	8001128 <__clzsi2>
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <__aeabi_ui2d+0x44>)
 8001070:	1a1b      	subs	r3, r3, r0
 8001072:	055b      	lsls	r3, r3, #21
 8001074:	0d5b      	lsrs	r3, r3, #21
 8001076:	280a      	cmp	r0, #10
 8001078:	dc0f      	bgt.n	800109a <__aeabi_ui2d+0x36>
 800107a:	220b      	movs	r2, #11
 800107c:	0021      	movs	r1, r4
 800107e:	1a12      	subs	r2, r2, r0
 8001080:	40d1      	lsrs	r1, r2
 8001082:	3015      	adds	r0, #21
 8001084:	030a      	lsls	r2, r1, #12
 8001086:	4084      	lsls	r4, r0
 8001088:	0b12      	lsrs	r2, r2, #12
 800108a:	e001      	b.n	8001090 <__aeabi_ui2d+0x2c>
 800108c:	2300      	movs	r3, #0
 800108e:	2200      	movs	r2, #0
 8001090:	051b      	lsls	r3, r3, #20
 8001092:	4313      	orrs	r3, r2
 8001094:	0020      	movs	r0, r4
 8001096:	0019      	movs	r1, r3
 8001098:	bd10      	pop	{r4, pc}
 800109a:	0022      	movs	r2, r4
 800109c:	380b      	subs	r0, #11
 800109e:	4082      	lsls	r2, r0
 80010a0:	0312      	lsls	r2, r2, #12
 80010a2:	2400      	movs	r4, #0
 80010a4:	0b12      	lsrs	r2, r2, #12
 80010a6:	e7f3      	b.n	8001090 <__aeabi_ui2d+0x2c>
 80010a8:	0000041e 	.word	0x0000041e

080010ac <__aeabi_cdrcmple>:
 80010ac:	4684      	mov	ip, r0
 80010ae:	0010      	movs	r0, r2
 80010b0:	4662      	mov	r2, ip
 80010b2:	468c      	mov	ip, r1
 80010b4:	0019      	movs	r1, r3
 80010b6:	4663      	mov	r3, ip
 80010b8:	e000      	b.n	80010bc <__aeabi_cdcmpeq>
 80010ba:	46c0      	nop			@ (mov r8, r8)

080010bc <__aeabi_cdcmpeq>:
 80010bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80010be:	f000 f909 	bl	80012d4 <__ledf2>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	d401      	bmi.n	80010ca <__aeabi_cdcmpeq+0xe>
 80010c6:	2100      	movs	r1, #0
 80010c8:	42c8      	cmn	r0, r1
 80010ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080010cc <__aeabi_dcmpeq>:
 80010cc:	b510      	push	{r4, lr}
 80010ce:	f000 f849 	bl	8001164 <__eqdf2>
 80010d2:	4240      	negs	r0, r0
 80010d4:	3001      	adds	r0, #1
 80010d6:	bd10      	pop	{r4, pc}

080010d8 <__aeabi_dcmplt>:
 80010d8:	b510      	push	{r4, lr}
 80010da:	f000 f8fb 	bl	80012d4 <__ledf2>
 80010de:	2800      	cmp	r0, #0
 80010e0:	db01      	blt.n	80010e6 <__aeabi_dcmplt+0xe>
 80010e2:	2000      	movs	r0, #0
 80010e4:	bd10      	pop	{r4, pc}
 80010e6:	2001      	movs	r0, #1
 80010e8:	bd10      	pop	{r4, pc}
 80010ea:	46c0      	nop			@ (mov r8, r8)

080010ec <__aeabi_dcmple>:
 80010ec:	b510      	push	{r4, lr}
 80010ee:	f000 f8f1 	bl	80012d4 <__ledf2>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	dd01      	ble.n	80010fa <__aeabi_dcmple+0xe>
 80010f6:	2000      	movs	r0, #0
 80010f8:	bd10      	pop	{r4, pc}
 80010fa:	2001      	movs	r0, #1
 80010fc:	bd10      	pop	{r4, pc}
 80010fe:	46c0      	nop			@ (mov r8, r8)

08001100 <__aeabi_dcmpgt>:
 8001100:	b510      	push	{r4, lr}
 8001102:	f000 f873 	bl	80011ec <__gedf2>
 8001106:	2800      	cmp	r0, #0
 8001108:	dc01      	bgt.n	800110e <__aeabi_dcmpgt+0xe>
 800110a:	2000      	movs	r0, #0
 800110c:	bd10      	pop	{r4, pc}
 800110e:	2001      	movs	r0, #1
 8001110:	bd10      	pop	{r4, pc}
 8001112:	46c0      	nop			@ (mov r8, r8)

08001114 <__aeabi_dcmpge>:
 8001114:	b510      	push	{r4, lr}
 8001116:	f000 f869 	bl	80011ec <__gedf2>
 800111a:	2800      	cmp	r0, #0
 800111c:	da01      	bge.n	8001122 <__aeabi_dcmpge+0xe>
 800111e:	2000      	movs	r0, #0
 8001120:	bd10      	pop	{r4, pc}
 8001122:	2001      	movs	r0, #1
 8001124:	bd10      	pop	{r4, pc}
 8001126:	46c0      	nop			@ (mov r8, r8)

08001128 <__clzsi2>:
 8001128:	211c      	movs	r1, #28
 800112a:	2301      	movs	r3, #1
 800112c:	041b      	lsls	r3, r3, #16
 800112e:	4298      	cmp	r0, r3
 8001130:	d301      	bcc.n	8001136 <__clzsi2+0xe>
 8001132:	0c00      	lsrs	r0, r0, #16
 8001134:	3910      	subs	r1, #16
 8001136:	0a1b      	lsrs	r3, r3, #8
 8001138:	4298      	cmp	r0, r3
 800113a:	d301      	bcc.n	8001140 <__clzsi2+0x18>
 800113c:	0a00      	lsrs	r0, r0, #8
 800113e:	3908      	subs	r1, #8
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	4298      	cmp	r0, r3
 8001144:	d301      	bcc.n	800114a <__clzsi2+0x22>
 8001146:	0900      	lsrs	r0, r0, #4
 8001148:	3904      	subs	r1, #4
 800114a:	a202      	add	r2, pc, #8	@ (adr r2, 8001154 <__clzsi2+0x2c>)
 800114c:	5c10      	ldrb	r0, [r2, r0]
 800114e:	1840      	adds	r0, r0, r1
 8001150:	4770      	bx	lr
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	02020304 	.word	0x02020304
 8001158:	01010101 	.word	0x01010101
	...

08001164 <__eqdf2>:
 8001164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001166:	4657      	mov	r7, sl
 8001168:	46de      	mov	lr, fp
 800116a:	464e      	mov	r6, r9
 800116c:	4645      	mov	r5, r8
 800116e:	b5e0      	push	{r5, r6, r7, lr}
 8001170:	000d      	movs	r5, r1
 8001172:	0004      	movs	r4, r0
 8001174:	0fe8      	lsrs	r0, r5, #31
 8001176:	4683      	mov	fp, r0
 8001178:	0309      	lsls	r1, r1, #12
 800117a:	0fd8      	lsrs	r0, r3, #31
 800117c:	0b09      	lsrs	r1, r1, #12
 800117e:	4682      	mov	sl, r0
 8001180:	4819      	ldr	r0, [pc, #100]	@ (80011e8 <__eqdf2+0x84>)
 8001182:	468c      	mov	ip, r1
 8001184:	031f      	lsls	r7, r3, #12
 8001186:	0069      	lsls	r1, r5, #1
 8001188:	005e      	lsls	r6, r3, #1
 800118a:	0d49      	lsrs	r1, r1, #21
 800118c:	0b3f      	lsrs	r7, r7, #12
 800118e:	0d76      	lsrs	r6, r6, #21
 8001190:	4281      	cmp	r1, r0
 8001192:	d018      	beq.n	80011c6 <__eqdf2+0x62>
 8001194:	4286      	cmp	r6, r0
 8001196:	d00f      	beq.n	80011b8 <__eqdf2+0x54>
 8001198:	2001      	movs	r0, #1
 800119a:	42b1      	cmp	r1, r6
 800119c:	d10d      	bne.n	80011ba <__eqdf2+0x56>
 800119e:	45bc      	cmp	ip, r7
 80011a0:	d10b      	bne.n	80011ba <__eqdf2+0x56>
 80011a2:	4294      	cmp	r4, r2
 80011a4:	d109      	bne.n	80011ba <__eqdf2+0x56>
 80011a6:	45d3      	cmp	fp, sl
 80011a8:	d01c      	beq.n	80011e4 <__eqdf2+0x80>
 80011aa:	2900      	cmp	r1, #0
 80011ac:	d105      	bne.n	80011ba <__eqdf2+0x56>
 80011ae:	4660      	mov	r0, ip
 80011b0:	4320      	orrs	r0, r4
 80011b2:	1e43      	subs	r3, r0, #1
 80011b4:	4198      	sbcs	r0, r3
 80011b6:	e000      	b.n	80011ba <__eqdf2+0x56>
 80011b8:	2001      	movs	r0, #1
 80011ba:	bcf0      	pop	{r4, r5, r6, r7}
 80011bc:	46bb      	mov	fp, r7
 80011be:	46b2      	mov	sl, r6
 80011c0:	46a9      	mov	r9, r5
 80011c2:	46a0      	mov	r8, r4
 80011c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c6:	2001      	movs	r0, #1
 80011c8:	428e      	cmp	r6, r1
 80011ca:	d1f6      	bne.n	80011ba <__eqdf2+0x56>
 80011cc:	4661      	mov	r1, ip
 80011ce:	4339      	orrs	r1, r7
 80011d0:	000f      	movs	r7, r1
 80011d2:	4317      	orrs	r7, r2
 80011d4:	4327      	orrs	r7, r4
 80011d6:	d1f0      	bne.n	80011ba <__eqdf2+0x56>
 80011d8:	465b      	mov	r3, fp
 80011da:	4652      	mov	r2, sl
 80011dc:	1a98      	subs	r0, r3, r2
 80011de:	1e43      	subs	r3, r0, #1
 80011e0:	4198      	sbcs	r0, r3
 80011e2:	e7ea      	b.n	80011ba <__eqdf2+0x56>
 80011e4:	2000      	movs	r0, #0
 80011e6:	e7e8      	b.n	80011ba <__eqdf2+0x56>
 80011e8:	000007ff 	.word	0x000007ff

080011ec <__gedf2>:
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	4657      	mov	r7, sl
 80011f0:	464e      	mov	r6, r9
 80011f2:	4645      	mov	r5, r8
 80011f4:	46de      	mov	lr, fp
 80011f6:	b5e0      	push	{r5, r6, r7, lr}
 80011f8:	000d      	movs	r5, r1
 80011fa:	030f      	lsls	r7, r1, #12
 80011fc:	0b39      	lsrs	r1, r7, #12
 80011fe:	b083      	sub	sp, #12
 8001200:	0004      	movs	r4, r0
 8001202:	4680      	mov	r8, r0
 8001204:	9101      	str	r1, [sp, #4]
 8001206:	0058      	lsls	r0, r3, #1
 8001208:	0fe9      	lsrs	r1, r5, #31
 800120a:	4f31      	ldr	r7, [pc, #196]	@ (80012d0 <__gedf2+0xe4>)
 800120c:	0d40      	lsrs	r0, r0, #21
 800120e:	468c      	mov	ip, r1
 8001210:	006e      	lsls	r6, r5, #1
 8001212:	0319      	lsls	r1, r3, #12
 8001214:	4682      	mov	sl, r0
 8001216:	4691      	mov	r9, r2
 8001218:	0d76      	lsrs	r6, r6, #21
 800121a:	0b09      	lsrs	r1, r1, #12
 800121c:	0fd8      	lsrs	r0, r3, #31
 800121e:	42be      	cmp	r6, r7
 8001220:	d01f      	beq.n	8001262 <__gedf2+0x76>
 8001222:	45ba      	cmp	sl, r7
 8001224:	d00f      	beq.n	8001246 <__gedf2+0x5a>
 8001226:	2e00      	cmp	r6, #0
 8001228:	d12f      	bne.n	800128a <__gedf2+0x9e>
 800122a:	4655      	mov	r5, sl
 800122c:	9e01      	ldr	r6, [sp, #4]
 800122e:	4334      	orrs	r4, r6
 8001230:	2d00      	cmp	r5, #0
 8001232:	d127      	bne.n	8001284 <__gedf2+0x98>
 8001234:	430a      	orrs	r2, r1
 8001236:	d03a      	beq.n	80012ae <__gedf2+0xc2>
 8001238:	2c00      	cmp	r4, #0
 800123a:	d145      	bne.n	80012c8 <__gedf2+0xdc>
 800123c:	2800      	cmp	r0, #0
 800123e:	d11a      	bne.n	8001276 <__gedf2+0x8a>
 8001240:	2001      	movs	r0, #1
 8001242:	4240      	negs	r0, r0
 8001244:	e017      	b.n	8001276 <__gedf2+0x8a>
 8001246:	4311      	orrs	r1, r2
 8001248:	d13b      	bne.n	80012c2 <__gedf2+0xd6>
 800124a:	2e00      	cmp	r6, #0
 800124c:	d102      	bne.n	8001254 <__gedf2+0x68>
 800124e:	9f01      	ldr	r7, [sp, #4]
 8001250:	4327      	orrs	r7, r4
 8001252:	d0f3      	beq.n	800123c <__gedf2+0x50>
 8001254:	4584      	cmp	ip, r0
 8001256:	d109      	bne.n	800126c <__gedf2+0x80>
 8001258:	4663      	mov	r3, ip
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f0      	beq.n	8001240 <__gedf2+0x54>
 800125e:	4660      	mov	r0, ip
 8001260:	e009      	b.n	8001276 <__gedf2+0x8a>
 8001262:	9f01      	ldr	r7, [sp, #4]
 8001264:	4327      	orrs	r7, r4
 8001266:	d12c      	bne.n	80012c2 <__gedf2+0xd6>
 8001268:	45b2      	cmp	sl, r6
 800126a:	d024      	beq.n	80012b6 <__gedf2+0xca>
 800126c:	4663      	mov	r3, ip
 800126e:	2002      	movs	r0, #2
 8001270:	3b01      	subs	r3, #1
 8001272:	4018      	ands	r0, r3
 8001274:	3801      	subs	r0, #1
 8001276:	b003      	add	sp, #12
 8001278:	bcf0      	pop	{r4, r5, r6, r7}
 800127a:	46bb      	mov	fp, r7
 800127c:	46b2      	mov	sl, r6
 800127e:	46a9      	mov	r9, r5
 8001280:	46a0      	mov	r8, r4
 8001282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001284:	2c00      	cmp	r4, #0
 8001286:	d0d9      	beq.n	800123c <__gedf2+0x50>
 8001288:	e7e4      	b.n	8001254 <__gedf2+0x68>
 800128a:	4654      	mov	r4, sl
 800128c:	2c00      	cmp	r4, #0
 800128e:	d0ed      	beq.n	800126c <__gedf2+0x80>
 8001290:	4584      	cmp	ip, r0
 8001292:	d1eb      	bne.n	800126c <__gedf2+0x80>
 8001294:	4556      	cmp	r6, sl
 8001296:	dce9      	bgt.n	800126c <__gedf2+0x80>
 8001298:	dbde      	blt.n	8001258 <__gedf2+0x6c>
 800129a:	9b01      	ldr	r3, [sp, #4]
 800129c:	428b      	cmp	r3, r1
 800129e:	d8e5      	bhi.n	800126c <__gedf2+0x80>
 80012a0:	d1da      	bne.n	8001258 <__gedf2+0x6c>
 80012a2:	45c8      	cmp	r8, r9
 80012a4:	d8e2      	bhi.n	800126c <__gedf2+0x80>
 80012a6:	2000      	movs	r0, #0
 80012a8:	45c8      	cmp	r8, r9
 80012aa:	d2e4      	bcs.n	8001276 <__gedf2+0x8a>
 80012ac:	e7d4      	b.n	8001258 <__gedf2+0x6c>
 80012ae:	2000      	movs	r0, #0
 80012b0:	2c00      	cmp	r4, #0
 80012b2:	d0e0      	beq.n	8001276 <__gedf2+0x8a>
 80012b4:	e7da      	b.n	800126c <__gedf2+0x80>
 80012b6:	4311      	orrs	r1, r2
 80012b8:	d103      	bne.n	80012c2 <__gedf2+0xd6>
 80012ba:	4584      	cmp	ip, r0
 80012bc:	d1d6      	bne.n	800126c <__gedf2+0x80>
 80012be:	2000      	movs	r0, #0
 80012c0:	e7d9      	b.n	8001276 <__gedf2+0x8a>
 80012c2:	2002      	movs	r0, #2
 80012c4:	4240      	negs	r0, r0
 80012c6:	e7d6      	b.n	8001276 <__gedf2+0x8a>
 80012c8:	4584      	cmp	ip, r0
 80012ca:	d0e6      	beq.n	800129a <__gedf2+0xae>
 80012cc:	e7ce      	b.n	800126c <__gedf2+0x80>
 80012ce:	46c0      	nop			@ (mov r8, r8)
 80012d0:	000007ff 	.word	0x000007ff

080012d4 <__ledf2>:
 80012d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d6:	4657      	mov	r7, sl
 80012d8:	464e      	mov	r6, r9
 80012da:	4645      	mov	r5, r8
 80012dc:	46de      	mov	lr, fp
 80012de:	b5e0      	push	{r5, r6, r7, lr}
 80012e0:	000d      	movs	r5, r1
 80012e2:	030f      	lsls	r7, r1, #12
 80012e4:	0004      	movs	r4, r0
 80012e6:	4680      	mov	r8, r0
 80012e8:	0fe8      	lsrs	r0, r5, #31
 80012ea:	0b39      	lsrs	r1, r7, #12
 80012ec:	4684      	mov	ip, r0
 80012ee:	b083      	sub	sp, #12
 80012f0:	0058      	lsls	r0, r3, #1
 80012f2:	4f30      	ldr	r7, [pc, #192]	@ (80013b4 <__ledf2+0xe0>)
 80012f4:	0d40      	lsrs	r0, r0, #21
 80012f6:	9101      	str	r1, [sp, #4]
 80012f8:	031e      	lsls	r6, r3, #12
 80012fa:	0069      	lsls	r1, r5, #1
 80012fc:	4682      	mov	sl, r0
 80012fe:	4691      	mov	r9, r2
 8001300:	0d49      	lsrs	r1, r1, #21
 8001302:	0b36      	lsrs	r6, r6, #12
 8001304:	0fd8      	lsrs	r0, r3, #31
 8001306:	42b9      	cmp	r1, r7
 8001308:	d020      	beq.n	800134c <__ledf2+0x78>
 800130a:	45ba      	cmp	sl, r7
 800130c:	d00f      	beq.n	800132e <__ledf2+0x5a>
 800130e:	2900      	cmp	r1, #0
 8001310:	d12b      	bne.n	800136a <__ledf2+0x96>
 8001312:	9901      	ldr	r1, [sp, #4]
 8001314:	430c      	orrs	r4, r1
 8001316:	4651      	mov	r1, sl
 8001318:	2900      	cmp	r1, #0
 800131a:	d137      	bne.n	800138c <__ledf2+0xb8>
 800131c:	4332      	orrs	r2, r6
 800131e:	d038      	beq.n	8001392 <__ledf2+0xbe>
 8001320:	2c00      	cmp	r4, #0
 8001322:	d144      	bne.n	80013ae <__ledf2+0xda>
 8001324:	2800      	cmp	r0, #0
 8001326:	d119      	bne.n	800135c <__ledf2+0x88>
 8001328:	2001      	movs	r0, #1
 800132a:	4240      	negs	r0, r0
 800132c:	e016      	b.n	800135c <__ledf2+0x88>
 800132e:	4316      	orrs	r6, r2
 8001330:	d113      	bne.n	800135a <__ledf2+0x86>
 8001332:	2900      	cmp	r1, #0
 8001334:	d102      	bne.n	800133c <__ledf2+0x68>
 8001336:	9f01      	ldr	r7, [sp, #4]
 8001338:	4327      	orrs	r7, r4
 800133a:	d0f3      	beq.n	8001324 <__ledf2+0x50>
 800133c:	4584      	cmp	ip, r0
 800133e:	d020      	beq.n	8001382 <__ledf2+0xae>
 8001340:	4663      	mov	r3, ip
 8001342:	2002      	movs	r0, #2
 8001344:	3b01      	subs	r3, #1
 8001346:	4018      	ands	r0, r3
 8001348:	3801      	subs	r0, #1
 800134a:	e007      	b.n	800135c <__ledf2+0x88>
 800134c:	9f01      	ldr	r7, [sp, #4]
 800134e:	4327      	orrs	r7, r4
 8001350:	d103      	bne.n	800135a <__ledf2+0x86>
 8001352:	458a      	cmp	sl, r1
 8001354:	d1f4      	bne.n	8001340 <__ledf2+0x6c>
 8001356:	4316      	orrs	r6, r2
 8001358:	d01f      	beq.n	800139a <__ledf2+0xc6>
 800135a:	2002      	movs	r0, #2
 800135c:	b003      	add	sp, #12
 800135e:	bcf0      	pop	{r4, r5, r6, r7}
 8001360:	46bb      	mov	fp, r7
 8001362:	46b2      	mov	sl, r6
 8001364:	46a9      	mov	r9, r5
 8001366:	46a0      	mov	r8, r4
 8001368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800136a:	4654      	mov	r4, sl
 800136c:	2c00      	cmp	r4, #0
 800136e:	d0e7      	beq.n	8001340 <__ledf2+0x6c>
 8001370:	4584      	cmp	ip, r0
 8001372:	d1e5      	bne.n	8001340 <__ledf2+0x6c>
 8001374:	4551      	cmp	r1, sl
 8001376:	dce3      	bgt.n	8001340 <__ledf2+0x6c>
 8001378:	db03      	blt.n	8001382 <__ledf2+0xae>
 800137a:	9b01      	ldr	r3, [sp, #4]
 800137c:	42b3      	cmp	r3, r6
 800137e:	d8df      	bhi.n	8001340 <__ledf2+0x6c>
 8001380:	d00f      	beq.n	80013a2 <__ledf2+0xce>
 8001382:	4663      	mov	r3, ip
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0cf      	beq.n	8001328 <__ledf2+0x54>
 8001388:	4660      	mov	r0, ip
 800138a:	e7e7      	b.n	800135c <__ledf2+0x88>
 800138c:	2c00      	cmp	r4, #0
 800138e:	d0c9      	beq.n	8001324 <__ledf2+0x50>
 8001390:	e7d4      	b.n	800133c <__ledf2+0x68>
 8001392:	2000      	movs	r0, #0
 8001394:	2c00      	cmp	r4, #0
 8001396:	d0e1      	beq.n	800135c <__ledf2+0x88>
 8001398:	e7d2      	b.n	8001340 <__ledf2+0x6c>
 800139a:	4584      	cmp	ip, r0
 800139c:	d1d0      	bne.n	8001340 <__ledf2+0x6c>
 800139e:	2000      	movs	r0, #0
 80013a0:	e7dc      	b.n	800135c <__ledf2+0x88>
 80013a2:	45c8      	cmp	r8, r9
 80013a4:	d8cc      	bhi.n	8001340 <__ledf2+0x6c>
 80013a6:	2000      	movs	r0, #0
 80013a8:	45c8      	cmp	r8, r9
 80013aa:	d2d7      	bcs.n	800135c <__ledf2+0x88>
 80013ac:	e7e9      	b.n	8001382 <__ledf2+0xae>
 80013ae:	4584      	cmp	ip, r0
 80013b0:	d0e3      	beq.n	800137a <__ledf2+0xa6>
 80013b2:	e7c5      	b.n	8001340 <__ledf2+0x6c>
 80013b4:	000007ff 	.word	0x000007ff

080013b8 <ReadADCValue>:
extern TIM_HandleTypeDef htim17;

extern char* uartBuffer;

// Function to read the ADC value
void ReadADCValue(uint32_t *potValue) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc);
 80013c0:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <ReadADCValue+0x34>)
 80013c2:	0018      	movs	r0, r3
 80013c4:	f001 fff6 	bl	80033b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80013c8:	2301      	movs	r3, #1
 80013ca:	425a      	negs	r2, r3
 80013cc:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <ReadADCValue+0x34>)
 80013ce:	0011      	movs	r1, r2
 80013d0:	0018      	movs	r0, r3
 80013d2:	f002 f843 	bl	800345c <HAL_ADC_PollForConversion>
	*potValue = HAL_ADC_GetValue(&hadc);
 80013d6:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <ReadADCValue+0x34>)
 80013d8:	0018      	movs	r0, r3
 80013da:	f002 f8d7 	bl	800358c <HAL_ADC_GetValue>
 80013de:	0002      	movs	r2, r0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	601a      	str	r2, [r3, #0]
}
 80013e4:	46c0      	nop			@ (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b002      	add	sp, #8
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000078 	.word	0x20000078

080013f0 <SetLevelLEDs>:

// Function to control the level LEDs based on the potentiometer value
void SetLevelLEDs(uint32_t potValue) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	if (potValue < 50) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b31      	cmp	r3, #49	@ 0x31
 80013fc:	d821      	bhi.n	8001442 <SetLevelLEDs+0x52>
		HAL_GPIO_WritePin(LED_LEVEL1_GPIO_Port, LED_LEVEL1_Pin, GPIO_PIN_SET);
 80013fe:	2390      	movs	r3, #144	@ 0x90
 8001400:	05db      	lsls	r3, r3, #23
 8001402:	2201      	movs	r2, #1
 8001404:	2108      	movs	r1, #8
 8001406:	0018      	movs	r0, r3
 8001408:	f002 fc87 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL2_GPIO_Port, LED_LEVEL2_Pin, GPIO_PIN_RESET);
 800140c:	4b5d      	ldr	r3, [pc, #372]	@ (8001584 <SetLevelLEDs+0x194>)
 800140e:	2200      	movs	r2, #0
 8001410:	2110      	movs	r1, #16
 8001412:	0018      	movs	r0, r3
 8001414:	f002 fc81 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL3_GPIO_Port, LED_LEVEL3_Pin, GPIO_PIN_RESET);
 8001418:	4b5a      	ldr	r3, [pc, #360]	@ (8001584 <SetLevelLEDs+0x194>)
 800141a:	2200      	movs	r2, #0
 800141c:	2120      	movs	r1, #32
 800141e:	0018      	movs	r0, r3
 8001420:	f002 fc7b 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL4_GPIO_Port, LED_LEVEL4_Pin, GPIO_PIN_RESET);
 8001424:	2390      	movs	r3, #144	@ 0x90
 8001426:	05db      	lsls	r3, r3, #23
 8001428:	2200      	movs	r2, #0
 800142a:	2110      	movs	r1, #16
 800142c:	0018      	movs	r0, r3
 800142e:	f002 fc74 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL5_GPIO_Port, LED_LEVEL5_Pin, GPIO_PIN_RESET);
 8001432:	2390      	movs	r3, #144	@ 0x90
 8001434:	05db      	lsls	r3, r3, #23
 8001436:	2200      	movs	r2, #0
 8001438:	2120      	movs	r1, #32
 800143a:	0018      	movs	r0, r3
 800143c:	f002 fc6d 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL2_GPIO_Port, LED_LEVEL2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LED_LEVEL3_GPIO_Port, LED_LEVEL3_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LED_LEVEL4_GPIO_Port, LED_LEVEL4_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LED_LEVEL5_GPIO_Port, LED_LEVEL5_Pin, GPIO_PIN_SET);
	}
}
 8001440:	e09c      	b.n	800157c <SetLevelLEDs+0x18c>
	else if (potValue >= 50 && potValue < 100) {
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b31      	cmp	r3, #49	@ 0x31
 8001446:	d924      	bls.n	8001492 <SetLevelLEDs+0xa2>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b63      	cmp	r3, #99	@ 0x63
 800144c:	d821      	bhi.n	8001492 <SetLevelLEDs+0xa2>
		HAL_GPIO_WritePin(LED_LEVEL1_GPIO_Port, LED_LEVEL1_Pin, GPIO_PIN_SET);
 800144e:	2390      	movs	r3, #144	@ 0x90
 8001450:	05db      	lsls	r3, r3, #23
 8001452:	2201      	movs	r2, #1
 8001454:	2108      	movs	r1, #8
 8001456:	0018      	movs	r0, r3
 8001458:	f002 fc5f 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL2_GPIO_Port, LED_LEVEL2_Pin, GPIO_PIN_SET);
 800145c:	4b49      	ldr	r3, [pc, #292]	@ (8001584 <SetLevelLEDs+0x194>)
 800145e:	2201      	movs	r2, #1
 8001460:	2110      	movs	r1, #16
 8001462:	0018      	movs	r0, r3
 8001464:	f002 fc59 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL3_GPIO_Port, LED_LEVEL3_Pin, GPIO_PIN_RESET);
 8001468:	4b46      	ldr	r3, [pc, #280]	@ (8001584 <SetLevelLEDs+0x194>)
 800146a:	2200      	movs	r2, #0
 800146c:	2120      	movs	r1, #32
 800146e:	0018      	movs	r0, r3
 8001470:	f002 fc53 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL4_GPIO_Port, LED_LEVEL4_Pin, GPIO_PIN_RESET);
 8001474:	2390      	movs	r3, #144	@ 0x90
 8001476:	05db      	lsls	r3, r3, #23
 8001478:	2200      	movs	r2, #0
 800147a:	2110      	movs	r1, #16
 800147c:	0018      	movs	r0, r3
 800147e:	f002 fc4c 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL5_GPIO_Port, LED_LEVEL5_Pin, GPIO_PIN_RESET);
 8001482:	2390      	movs	r3, #144	@ 0x90
 8001484:	05db      	lsls	r3, r3, #23
 8001486:	2200      	movs	r2, #0
 8001488:	2120      	movs	r1, #32
 800148a:	0018      	movs	r0, r3
 800148c:	f002 fc45 	bl	8003d1a <HAL_GPIO_WritePin>
 8001490:	e074      	b.n	800157c <SetLevelLEDs+0x18c>
	else if (potValue >= 100 && potValue < 150) {
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b63      	cmp	r3, #99	@ 0x63
 8001496:	d924      	bls.n	80014e2 <SetLevelLEDs+0xf2>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b95      	cmp	r3, #149	@ 0x95
 800149c:	d821      	bhi.n	80014e2 <SetLevelLEDs+0xf2>
		HAL_GPIO_WritePin(LED_LEVEL1_GPIO_Port, LED_LEVEL1_Pin, GPIO_PIN_SET);
 800149e:	2390      	movs	r3, #144	@ 0x90
 80014a0:	05db      	lsls	r3, r3, #23
 80014a2:	2201      	movs	r2, #1
 80014a4:	2108      	movs	r1, #8
 80014a6:	0018      	movs	r0, r3
 80014a8:	f002 fc37 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL2_GPIO_Port, LED_LEVEL2_Pin, GPIO_PIN_SET);
 80014ac:	4b35      	ldr	r3, [pc, #212]	@ (8001584 <SetLevelLEDs+0x194>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	2110      	movs	r1, #16
 80014b2:	0018      	movs	r0, r3
 80014b4:	f002 fc31 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL3_GPIO_Port, LED_LEVEL3_Pin, GPIO_PIN_SET);
 80014b8:	4b32      	ldr	r3, [pc, #200]	@ (8001584 <SetLevelLEDs+0x194>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	2120      	movs	r1, #32
 80014be:	0018      	movs	r0, r3
 80014c0:	f002 fc2b 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL4_GPIO_Port, LED_LEVEL4_Pin, GPIO_PIN_RESET);
 80014c4:	2390      	movs	r3, #144	@ 0x90
 80014c6:	05db      	lsls	r3, r3, #23
 80014c8:	2200      	movs	r2, #0
 80014ca:	2110      	movs	r1, #16
 80014cc:	0018      	movs	r0, r3
 80014ce:	f002 fc24 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL5_GPIO_Port, LED_LEVEL5_Pin, GPIO_PIN_RESET);
 80014d2:	2390      	movs	r3, #144	@ 0x90
 80014d4:	05db      	lsls	r3, r3, #23
 80014d6:	2200      	movs	r2, #0
 80014d8:	2120      	movs	r1, #32
 80014da:	0018      	movs	r0, r3
 80014dc:	f002 fc1d 	bl	8003d1a <HAL_GPIO_WritePin>
 80014e0:	e04c      	b.n	800157c <SetLevelLEDs+0x18c>
	else if (potValue >= 150 && potValue < 200) {
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b95      	cmp	r3, #149	@ 0x95
 80014e6:	d924      	bls.n	8001532 <SetLevelLEDs+0x142>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80014ec:	d821      	bhi.n	8001532 <SetLevelLEDs+0x142>
		HAL_GPIO_WritePin(LED_LEVEL1_GPIO_Port, LED_LEVEL1_Pin, GPIO_PIN_SET);
 80014ee:	2390      	movs	r3, #144	@ 0x90
 80014f0:	05db      	lsls	r3, r3, #23
 80014f2:	2201      	movs	r2, #1
 80014f4:	2108      	movs	r1, #8
 80014f6:	0018      	movs	r0, r3
 80014f8:	f002 fc0f 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL2_GPIO_Port, LED_LEVEL2_Pin, GPIO_PIN_SET);
 80014fc:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <SetLevelLEDs+0x194>)
 80014fe:	2201      	movs	r2, #1
 8001500:	2110      	movs	r1, #16
 8001502:	0018      	movs	r0, r3
 8001504:	f002 fc09 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL3_GPIO_Port, LED_LEVEL3_Pin, GPIO_PIN_SET);
 8001508:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <SetLevelLEDs+0x194>)
 800150a:	2201      	movs	r2, #1
 800150c:	2120      	movs	r1, #32
 800150e:	0018      	movs	r0, r3
 8001510:	f002 fc03 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL4_GPIO_Port, LED_LEVEL4_Pin, GPIO_PIN_SET);
 8001514:	2390      	movs	r3, #144	@ 0x90
 8001516:	05db      	lsls	r3, r3, #23
 8001518:	2201      	movs	r2, #1
 800151a:	2110      	movs	r1, #16
 800151c:	0018      	movs	r0, r3
 800151e:	f002 fbfc 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL5_GPIO_Port, LED_LEVEL5_Pin, GPIO_PIN_RESET);
 8001522:	2390      	movs	r3, #144	@ 0x90
 8001524:	05db      	lsls	r3, r3, #23
 8001526:	2200      	movs	r2, #0
 8001528:	2120      	movs	r1, #32
 800152a:	0018      	movs	r0, r3
 800152c:	f002 fbf5 	bl	8003d1a <HAL_GPIO_WritePin>
 8001530:	e024      	b.n	800157c <SetLevelLEDs+0x18c>
	else if (potValue >= 200) {
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2bc7      	cmp	r3, #199	@ 0xc7
 8001536:	d921      	bls.n	800157c <SetLevelLEDs+0x18c>
		HAL_GPIO_WritePin(LED_LEVEL1_GPIO_Port, LED_LEVEL1_Pin, GPIO_PIN_SET);
 8001538:	2390      	movs	r3, #144	@ 0x90
 800153a:	05db      	lsls	r3, r3, #23
 800153c:	2201      	movs	r2, #1
 800153e:	2108      	movs	r1, #8
 8001540:	0018      	movs	r0, r3
 8001542:	f002 fbea 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL2_GPIO_Port, LED_LEVEL2_Pin, GPIO_PIN_SET);
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <SetLevelLEDs+0x194>)
 8001548:	2201      	movs	r2, #1
 800154a:	2110      	movs	r1, #16
 800154c:	0018      	movs	r0, r3
 800154e:	f002 fbe4 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL3_GPIO_Port, LED_LEVEL3_Pin, GPIO_PIN_SET);
 8001552:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <SetLevelLEDs+0x194>)
 8001554:	2201      	movs	r2, #1
 8001556:	2120      	movs	r1, #32
 8001558:	0018      	movs	r0, r3
 800155a:	f002 fbde 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL4_GPIO_Port, LED_LEVEL4_Pin, GPIO_PIN_SET);
 800155e:	2390      	movs	r3, #144	@ 0x90
 8001560:	05db      	lsls	r3, r3, #23
 8001562:	2201      	movs	r2, #1
 8001564:	2110      	movs	r1, #16
 8001566:	0018      	movs	r0, r3
 8001568:	f002 fbd7 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LEVEL5_GPIO_Port, LED_LEVEL5_Pin, GPIO_PIN_SET);
 800156c:	2390      	movs	r3, #144	@ 0x90
 800156e:	05db      	lsls	r3, r3, #23
 8001570:	2201      	movs	r2, #1
 8001572:	2120      	movs	r1, #32
 8001574:	0018      	movs	r0, r3
 8001576:	f002 fbd0 	bl	8003d1a <HAL_GPIO_WritePin>
}
 800157a:	e7ff      	b.n	800157c <SetLevelLEDs+0x18c>
 800157c:	46c0      	nop			@ (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b002      	add	sp, #8
 8001582:	bd80      	pop	{r7, pc}
 8001584:	48001400 	.word	0x48001400

08001588 <SetMotorSpeedAndDirection_DC>:

void SetMotorSpeedAndDirection_DC(uint8_t potValuePercent, GPIO_PinState motorDirection, uint8_t motorNumber){
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	0004      	movs	r4, r0
 8001590:	0008      	movs	r0, r1
 8001592:	0011      	movs	r1, r2
 8001594:	1dfb      	adds	r3, r7, #7
 8001596:	1c22      	adds	r2, r4, #0
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	1dbb      	adds	r3, r7, #6
 800159c:	1c02      	adds	r2, r0, #0
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	1d7b      	adds	r3, r7, #5
 80015a2:	1c0a      	adds	r2, r1, #0
 80015a4:	701a      	strb	r2, [r3, #0]
	if(motorDirection == GPIO_PIN_SET){
 80015a6:	1dbb      	adds	r3, r7, #6
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d14c      	bne.n	8001648 <SetMotorSpeedAndDirection_DC+0xc0>
		//forward
		switch (motorNumber) {
 80015ae:	1d7b      	adds	r3, r7, #5
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d019      	beq.n	80015ea <SetMotorSpeedAndDirection_DC+0x62>
 80015b6:	dc22      	bgt.n	80015fe <SetMotorSpeedAndDirection_DC+0x76>
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d002      	beq.n	80015c2 <SetMotorSpeedAndDirection_DC+0x3a>
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d00a      	beq.n	80015d6 <SetMotorSpeedAndDirection_DC+0x4e>
 80015c0:	e01d      	b.n	80015fe <SetMotorSpeedAndDirection_DC+0x76>
		case 1:
			htim3.Instance->CCR1 = 0; // Channel 1
 80015c2:	4b49      	ldr	r3, [pc, #292]	@ (80016e8 <SetMotorSpeedAndDirection_DC+0x160>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2200      	movs	r2, #0
 80015c8:	635a      	str	r2, [r3, #52]	@ 0x34
			htim3.Instance->CCR2 = potValuePercent; // Channel 2
 80015ca:	4b47      	ldr	r3, [pc, #284]	@ (80016e8 <SetMotorSpeedAndDirection_DC+0x160>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	1dfa      	adds	r2, r7, #7
 80015d0:	7812      	ldrb	r2, [r2, #0]
 80015d2:	639a      	str	r2, [r3, #56]	@ 0x38

			break;
 80015d4:	e02a      	b.n	800162c <SetMotorSpeedAndDirection_DC+0xa4>
		case 2:
			htim3.Instance->CCR3 = 0; // Channel 3
 80015d6:	4b44      	ldr	r3, [pc, #272]	@ (80016e8 <SetMotorSpeedAndDirection_DC+0x160>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2200      	movs	r2, #0
 80015dc:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim3.Instance->CCR4 = potValuePercent; // Channel 4
 80015de:	4b42      	ldr	r3, [pc, #264]	@ (80016e8 <SetMotorSpeedAndDirection_DC+0x160>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	1dfa      	adds	r2, r7, #7
 80015e4:	7812      	ldrb	r2, [r2, #0]
 80015e6:	641a      	str	r2, [r3, #64]	@ 0x40

			break;
 80015e8:	e020      	b.n	800162c <SetMotorSpeedAndDirection_DC+0xa4>
		case 3:
			htim15.Instance->CCR1 = 0; // Channel 1
 80015ea:	4b40      	ldr	r3, [pc, #256]	@ (80016ec <SetMotorSpeedAndDirection_DC+0x164>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2200      	movs	r2, #0
 80015f0:	635a      	str	r2, [r3, #52]	@ 0x34
			htim15.Instance->CCR2 = potValuePercent; // Channel 2
 80015f2:	4b3e      	ldr	r3, [pc, #248]	@ (80016ec <SetMotorSpeedAndDirection_DC+0x164>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1dfa      	adds	r2, r7, #7
 80015f8:	7812      	ldrb	r2, [r2, #0]
 80015fa:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80015fc:	e016      	b.n	800162c <SetMotorSpeedAndDirection_DC+0xa4>
		default:
			sprintf(uartBuffer, "incorrect motor ID\r\n");
 80015fe:	4b3c      	ldr	r3, [pc, #240]	@ (80016f0 <SetMotorSpeedAndDirection_DC+0x168>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a3c      	ldr	r2, [pc, #240]	@ (80016f4 <SetMotorSpeedAndDirection_DC+0x16c>)
 8001604:	0011      	movs	r1, r2
 8001606:	0018      	movs	r0, r3
 8001608:	f004 fca4 	bl	8005f54 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 800160c:	4b38      	ldr	r3, [pc, #224]	@ (80016f0 <SetMotorSpeedAndDirection_DC+0x168>)
 800160e:	681c      	ldr	r4, [r3, #0]
 8001610:	4b37      	ldr	r3, [pc, #220]	@ (80016f0 <SetMotorSpeedAndDirection_DC+0x168>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	0018      	movs	r0, r3
 8001616:	f7fe fd77 	bl	8000108 <strlen>
 800161a:	0003      	movs	r3, r0
 800161c:	b29a      	uxth	r2, r3
 800161e:	2301      	movs	r3, #1
 8001620:	425b      	negs	r3, r3
 8001622:	4835      	ldr	r0, [pc, #212]	@ (80016f8 <SetMotorSpeedAndDirection_DC+0x170>)
 8001624:	0021      	movs	r1, r4
 8001626:	f004 f885 	bl	8005734 <HAL_UART_Transmit>
			break;
 800162a:	46c0      	nop			@ (mov r8, r8)
		}

		// Update LEDs
		HAL_GPIO_WritePin(LED_LINKS_GPIO_Port, LED_LINKS_Pin, GPIO_PIN_SET);   // Turn on "left" LED
 800162c:	2390      	movs	r3, #144	@ 0x90
 800162e:	05db      	lsls	r3, r3, #23
 8001630:	2201      	movs	r2, #1
 8001632:	2180      	movs	r1, #128	@ 0x80
 8001634:	0018      	movs	r0, r3
 8001636:	f002 fb70 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RECHTS_GPIO_Port, LED_RECHTS_Pin, GPIO_PIN_RESET); // Turn off "right" LED
 800163a:	4b30      	ldr	r3, [pc, #192]	@ (80016fc <SetMotorSpeedAndDirection_DC+0x174>)
 800163c:	2200      	movs	r2, #0
 800163e:	2110      	movs	r1, #16
 8001640:	0018      	movs	r0, r3
 8001642:	f002 fb6a 	bl	8003d1a <HAL_GPIO_WritePin>

		// Update LEDs
		HAL_GPIO_WritePin(LED_LINKS_GPIO_Port, LED_LINKS_Pin, GPIO_PIN_RESET);  // Turn off "left" LED
		HAL_GPIO_WritePin(LED_RECHTS_GPIO_Port, LED_RECHTS_Pin, GPIO_PIN_SET);  // Turn on "right" LED
	}
}
 8001646:	e04b      	b.n	80016e0 <SetMotorSpeedAndDirection_DC+0x158>
		switch (motorNumber) {
 8001648:	1d7b      	adds	r3, r7, #5
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b03      	cmp	r3, #3
 800164e:	d019      	beq.n	8001684 <SetMotorSpeedAndDirection_DC+0xfc>
 8001650:	dc22      	bgt.n	8001698 <SetMotorSpeedAndDirection_DC+0x110>
 8001652:	2b01      	cmp	r3, #1
 8001654:	d002      	beq.n	800165c <SetMotorSpeedAndDirection_DC+0xd4>
 8001656:	2b02      	cmp	r3, #2
 8001658:	d00a      	beq.n	8001670 <SetMotorSpeedAndDirection_DC+0xe8>
 800165a:	e01d      	b.n	8001698 <SetMotorSpeedAndDirection_DC+0x110>
			htim3.Instance->CCR1 = potValuePercent; // Channel 1
 800165c:	4b22      	ldr	r3, [pc, #136]	@ (80016e8 <SetMotorSpeedAndDirection_DC+0x160>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	1dfa      	adds	r2, r7, #7
 8001662:	7812      	ldrb	r2, [r2, #0]
 8001664:	635a      	str	r2, [r3, #52]	@ 0x34
			htim3.Instance->CCR2 = 0; // Channel 2
 8001666:	4b20      	ldr	r3, [pc, #128]	@ (80016e8 <SetMotorSpeedAndDirection_DC+0x160>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2200      	movs	r2, #0
 800166c:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 800166e:	e02a      	b.n	80016c6 <SetMotorSpeedAndDirection_DC+0x13e>
			htim3.Instance->CCR3 = potValuePercent; // Channel 3
 8001670:	4b1d      	ldr	r3, [pc, #116]	@ (80016e8 <SetMotorSpeedAndDirection_DC+0x160>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	1dfa      	adds	r2, r7, #7
 8001676:	7812      	ldrb	r2, [r2, #0]
 8001678:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim3.Instance->CCR4 = 0; // Channel 4
 800167a:	4b1b      	ldr	r3, [pc, #108]	@ (80016e8 <SetMotorSpeedAndDirection_DC+0x160>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2200      	movs	r2, #0
 8001680:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8001682:	e020      	b.n	80016c6 <SetMotorSpeedAndDirection_DC+0x13e>
			htim15.Instance->CCR1 = potValuePercent; // Channel 1
 8001684:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <SetMotorSpeedAndDirection_DC+0x164>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	1dfa      	adds	r2, r7, #7
 800168a:	7812      	ldrb	r2, [r2, #0]
 800168c:	635a      	str	r2, [r3, #52]	@ 0x34
			htim15.Instance->CCR2 = 0; // Channel 2
 800168e:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <SetMotorSpeedAndDirection_DC+0x164>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2200      	movs	r2, #0
 8001694:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8001696:	e016      	b.n	80016c6 <SetMotorSpeedAndDirection_DC+0x13e>
			sprintf(uartBuffer, "incorrect motor ID\r\n");
 8001698:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <SetMotorSpeedAndDirection_DC+0x168>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a15      	ldr	r2, [pc, #84]	@ (80016f4 <SetMotorSpeedAndDirection_DC+0x16c>)
 800169e:	0011      	movs	r1, r2
 80016a0:	0018      	movs	r0, r3
 80016a2:	f004 fc57 	bl	8005f54 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80016a6:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <SetMotorSpeedAndDirection_DC+0x168>)
 80016a8:	681c      	ldr	r4, [r3, #0]
 80016aa:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <SetMotorSpeedAndDirection_DC+0x168>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7fe fd2a 	bl	8000108 <strlen>
 80016b4:	0003      	movs	r3, r0
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	2301      	movs	r3, #1
 80016ba:	425b      	negs	r3, r3
 80016bc:	480e      	ldr	r0, [pc, #56]	@ (80016f8 <SetMotorSpeedAndDirection_DC+0x170>)
 80016be:	0021      	movs	r1, r4
 80016c0:	f004 f838 	bl	8005734 <HAL_UART_Transmit>
			break;
 80016c4:	46c0      	nop			@ (mov r8, r8)
		HAL_GPIO_WritePin(LED_LINKS_GPIO_Port, LED_LINKS_Pin, GPIO_PIN_RESET);  // Turn off "left" LED
 80016c6:	2390      	movs	r3, #144	@ 0x90
 80016c8:	05db      	lsls	r3, r3, #23
 80016ca:	2200      	movs	r2, #0
 80016cc:	2180      	movs	r1, #128	@ 0x80
 80016ce:	0018      	movs	r0, r3
 80016d0:	f002 fb23 	bl	8003d1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RECHTS_GPIO_Port, LED_RECHTS_Pin, GPIO_PIN_SET);  // Turn on "right" LED
 80016d4:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <SetMotorSpeedAndDirection_DC+0x174>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	2110      	movs	r1, #16
 80016da:	0018      	movs	r0, r3
 80016dc:	f002 fb1d 	bl	8003d1a <HAL_GPIO_WritePin>
}
 80016e0:	46c0      	nop			@ (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b003      	add	sp, #12
 80016e6:	bd90      	pop	{r4, r7, pc}
 80016e8:	2000010c 	.word	0x2000010c
 80016ec:	2000019c 	.word	0x2000019c
 80016f0:	2000030c 	.word	0x2000030c
 80016f4:	080068a8 	.word	0x080068a8
 80016f8:	20000274 	.word	0x20000274
 80016fc:	48000800 	.word	0x48000800

08001700 <SetMotorSpeedAndDirection_3Phase>:

void SetMotorSpeedAndDirection_3Phase(uint8_t potValuePercent, GPIO_PinState motorDirection){
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	0002      	movs	r2, r0
 8001708:	1dfb      	adds	r3, r7, #7
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	1dbb      	adds	r3, r7, #6
 800170e:	1c0a      	adds	r2, r1, #0
 8001710:	701a      	strb	r2, [r3, #0]
	if(motorDirection == GPIO_PIN_SET){
 8001712:	1dbb      	adds	r3, r7, #6
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d11b      	bne.n	8001752 <SetMotorSpeedAndDirection_3Phase+0x52>
		//forwards
		htim3.Instance->CCR3 = potValuePercent;
 800171a:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <SetMotorSpeedAndDirection_3Phase+0x90>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	1dfa      	adds	r2, r7, #7
 8001720:	7812      	ldrb	r2, [r2, #0]
 8001722:	63da      	str	r2, [r3, #60]	@ 0x3c
		htim3.Instance->CCR4 = 0;
 8001724:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <SetMotorSpeedAndDirection_3Phase+0x90>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2200      	movs	r2, #0
 800172a:	641a      	str	r2, [r3, #64]	@ 0x40

		htim16.Instance->CCR1 = potValuePercent;
 800172c:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <SetMotorSpeedAndDirection_3Phase+0x94>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	1dfa      	adds	r2, r7, #7
 8001732:	7812      	ldrb	r2, [r2, #0]
 8001734:	635a      	str	r2, [r3, #52]	@ 0x34
		htim17.Instance->CCR1 = 0;
 8001736:	4b18      	ldr	r3, [pc, #96]	@ (8001798 <SetMotorSpeedAndDirection_3Phase+0x98>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	635a      	str	r2, [r3, #52]	@ 0x34

		htim15.Instance->CCR1 = potValuePercent;
 800173e:	4b17      	ldr	r3, [pc, #92]	@ (800179c <SetMotorSpeedAndDirection_3Phase+0x9c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	1dfa      	adds	r2, r7, #7
 8001744:	7812      	ldrb	r2, [r2, #0]
 8001746:	635a      	str	r2, [r3, #52]	@ 0x34
		htim15.Instance->CCR2 = 0;
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <SetMotorSpeedAndDirection_3Phase+0x9c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2200      	movs	r2, #0
 800174e:	639a      	str	r2, [r3, #56]	@ 0x38
		htim17.Instance->CCR1 = potValuePercent;

		htim15.Instance->CCR1 = 0;
		htim15.Instance->CCR2 = potValuePercent;
	}
}
 8001750:	e01a      	b.n	8001788 <SetMotorSpeedAndDirection_3Phase+0x88>
		htim3.Instance->CCR3 = 0;
 8001752:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <SetMotorSpeedAndDirection_3Phase+0x90>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2200      	movs	r2, #0
 8001758:	63da      	str	r2, [r3, #60]	@ 0x3c
		htim3.Instance->CCR4 = potValuePercent;
 800175a:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <SetMotorSpeedAndDirection_3Phase+0x90>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	1dfa      	adds	r2, r7, #7
 8001760:	7812      	ldrb	r2, [r2, #0]
 8001762:	641a      	str	r2, [r3, #64]	@ 0x40
		htim16.Instance->CCR1 = 0;
 8001764:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <SetMotorSpeedAndDirection_3Phase+0x94>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2200      	movs	r2, #0
 800176a:	635a      	str	r2, [r3, #52]	@ 0x34
		htim17.Instance->CCR1 = potValuePercent;
 800176c:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <SetMotorSpeedAndDirection_3Phase+0x98>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	1dfa      	adds	r2, r7, #7
 8001772:	7812      	ldrb	r2, [r2, #0]
 8001774:	635a      	str	r2, [r3, #52]	@ 0x34
		htim15.Instance->CCR1 = 0;
 8001776:	4b09      	ldr	r3, [pc, #36]	@ (800179c <SetMotorSpeedAndDirection_3Phase+0x9c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2200      	movs	r2, #0
 800177c:	635a      	str	r2, [r3, #52]	@ 0x34
		htim15.Instance->CCR2 = potValuePercent;
 800177e:	4b07      	ldr	r3, [pc, #28]	@ (800179c <SetMotorSpeedAndDirection_3Phase+0x9c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	1dfa      	adds	r2, r7, #7
 8001784:	7812      	ldrb	r2, [r2, #0]
 8001786:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001788:	46c0      	nop			@ (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	b002      	add	sp, #8
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2000010c 	.word	0x2000010c
 8001794:	200001e4 	.word	0x200001e4
 8001798:	2000022c 	.word	0x2000022c
 800179c:	2000019c 	.word	0x2000019c

080017a0 <printLogoNMBS>:
#include <stdio.h>
#include "string.h"

extern UART_HandleTypeDef huart1;

void printLogoNMBS(void){
 80017a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a2:	4cfe      	ldr	r4, [pc, #1016]	@ (8001b9c <printLogoNMBS+0x3fc>)
 80017a4:	44a5      	add	sp, r4
 80017a6:	af00      	add	r7, sp, #0
	char logoNMBS[36][120] = {
 80017a8:	4bfd      	ldr	r3, [pc, #1012]	@ (8001ba0 <printLogoNMBS+0x400>)
 80017aa:	4efe      	ldr	r6, [pc, #1016]	@ (8001ba4 <printLogoNMBS+0x404>)
 80017ac:	199b      	adds	r3, r3, r6
 80017ae:	19db      	adds	r3, r3, r7
 80017b0:	0018      	movs	r0, r3
 80017b2:	2387      	movs	r3, #135	@ 0x87
 80017b4:	015b      	lsls	r3, r3, #5
 80017b6:	001a      	movs	r2, r3
 80017b8:	2100      	movs	r1, #0
 80017ba:	f004 fbeb 	bl	8005f94 <memset>
 80017be:	4bf8      	ldr	r3, [pc, #992]	@ (8001ba0 <printLogoNMBS+0x400>)
 80017c0:	199b      	adds	r3, r3, r6
 80017c2:	19dc      	adds	r4, r3, r7
 80017c4:	4bf8      	ldr	r3, [pc, #992]	@ (8001ba8 <printLogoNMBS+0x408>)
 80017c6:	0020      	movs	r0, r4
 80017c8:	0019      	movs	r1, r3
 80017ca:	235e      	movs	r3, #94	@ 0x5e
 80017cc:	001a      	movs	r2, r3
 80017ce:	f004 fc15 	bl	8005ffc <memcpy>
 80017d2:	235e      	movs	r3, #94	@ 0x5e
 80017d4:	18e3      	adds	r3, r4, r3
 80017d6:	221a      	movs	r2, #26
 80017d8:	2100      	movs	r1, #0
 80017da:	0018      	movs	r0, r3
 80017dc:	f004 fbda 	bl	8005f94 <memset>
 80017e0:	4bef      	ldr	r3, [pc, #956]	@ (8001ba0 <printLogoNMBS+0x400>)
 80017e2:	199b      	adds	r3, r3, r6
 80017e4:	19dc      	adds	r4, r3, r7
 80017e6:	4af1      	ldr	r2, [pc, #964]	@ (8001bac <printLogoNMBS+0x40c>)
 80017e8:	0023      	movs	r3, r4
 80017ea:	3378      	adds	r3, #120	@ 0x78
 80017ec:	0011      	movs	r1, r2
 80017ee:	2265      	movs	r2, #101	@ 0x65
 80017f0:	0018      	movs	r0, r3
 80017f2:	f004 fc03 	bl	8005ffc <memcpy>
 80017f6:	23dd      	movs	r3, #221	@ 0xdd
 80017f8:	18e3      	adds	r3, r4, r3
 80017fa:	2213      	movs	r2, #19
 80017fc:	2100      	movs	r1, #0
 80017fe:	0018      	movs	r0, r3
 8001800:	f004 fbc8 	bl	8005f94 <memset>
 8001804:	4be6      	ldr	r3, [pc, #920]	@ (8001ba0 <printLogoNMBS+0x400>)
 8001806:	199b      	adds	r3, r3, r6
 8001808:	19dc      	adds	r4, r3, r7
 800180a:	25f0      	movs	r5, #240	@ 0xf0
 800180c:	4ae8      	ldr	r2, [pc, #928]	@ (8001bb0 <printLogoNMBS+0x410>)
 800180e:	1963      	adds	r3, r4, r5
 8001810:	0011      	movs	r1, r2
 8001812:	2265      	movs	r2, #101	@ 0x65
 8001814:	0018      	movs	r0, r3
 8001816:	f004 fbf1 	bl	8005ffc <memcpy>
 800181a:	2265      	movs	r2, #101	@ 0x65
 800181c:	1963      	adds	r3, r4, r5
 800181e:	189b      	adds	r3, r3, r2
 8001820:	0018      	movs	r0, r3
 8001822:	2313      	movs	r3, #19
 8001824:	001a      	movs	r2, r3
 8001826:	2100      	movs	r1, #0
 8001828:	f004 fbb4 	bl	8005f94 <memset>
 800182c:	4bdc      	ldr	r3, [pc, #880]	@ (8001ba0 <printLogoNMBS+0x400>)
 800182e:	199b      	adds	r3, r3, r6
 8001830:	19dd      	adds	r5, r3, r7
 8001832:	23b4      	movs	r3, #180	@ 0xb4
 8001834:	005c      	lsls	r4, r3, #1
 8001836:	4adf      	ldr	r2, [pc, #892]	@ (8001bb4 <printLogoNMBS+0x414>)
 8001838:	192b      	adds	r3, r5, r4
 800183a:	0011      	movs	r1, r2
 800183c:	2265      	movs	r2, #101	@ 0x65
 800183e:	0018      	movs	r0, r3
 8001840:	f004 fbdc 	bl	8005ffc <memcpy>
 8001844:	2265      	movs	r2, #101	@ 0x65
 8001846:	192b      	adds	r3, r5, r4
 8001848:	189b      	adds	r3, r3, r2
 800184a:	0018      	movs	r0, r3
 800184c:	2313      	movs	r3, #19
 800184e:	001a      	movs	r2, r3
 8001850:	2100      	movs	r1, #0
 8001852:	f004 fb9f 	bl	8005f94 <memset>
 8001856:	4bd2      	ldr	r3, [pc, #840]	@ (8001ba0 <printLogoNMBS+0x400>)
 8001858:	199b      	adds	r3, r3, r6
 800185a:	19dd      	adds	r5, r3, r7
 800185c:	23f0      	movs	r3, #240	@ 0xf0
 800185e:	005c      	lsls	r4, r3, #1
 8001860:	4ad5      	ldr	r2, [pc, #852]	@ (8001bb8 <printLogoNMBS+0x418>)
 8001862:	192b      	adds	r3, r5, r4
 8001864:	0011      	movs	r1, r2
 8001866:	2265      	movs	r2, #101	@ 0x65
 8001868:	0018      	movs	r0, r3
 800186a:	f004 fbc7 	bl	8005ffc <memcpy>
 800186e:	2265      	movs	r2, #101	@ 0x65
 8001870:	192b      	adds	r3, r5, r4
 8001872:	189b      	adds	r3, r3, r2
 8001874:	0018      	movs	r0, r3
 8001876:	2313      	movs	r3, #19
 8001878:	001a      	movs	r2, r3
 800187a:	2100      	movs	r1, #0
 800187c:	f004 fb8a 	bl	8005f94 <memset>
 8001880:	4bc7      	ldr	r3, [pc, #796]	@ (8001ba0 <printLogoNMBS+0x400>)
 8001882:	199b      	adds	r3, r3, r6
 8001884:	19dd      	adds	r5, r3, r7
 8001886:	2396      	movs	r3, #150	@ 0x96
 8001888:	009c      	lsls	r4, r3, #2
 800188a:	4acc      	ldr	r2, [pc, #816]	@ (8001bbc <printLogoNMBS+0x41c>)
 800188c:	192b      	adds	r3, r5, r4
 800188e:	0011      	movs	r1, r2
 8001890:	2264      	movs	r2, #100	@ 0x64
 8001892:	0018      	movs	r0, r3
 8001894:	f004 fbb2 	bl	8005ffc <memcpy>
 8001898:	2264      	movs	r2, #100	@ 0x64
 800189a:	192b      	adds	r3, r5, r4
 800189c:	189b      	adds	r3, r3, r2
 800189e:	0018      	movs	r0, r3
 80018a0:	2314      	movs	r3, #20
 80018a2:	001a      	movs	r2, r3
 80018a4:	2100      	movs	r1, #0
 80018a6:	f004 fb75 	bl	8005f94 <memset>
 80018aa:	4bbd      	ldr	r3, [pc, #756]	@ (8001ba0 <printLogoNMBS+0x400>)
 80018ac:	199b      	adds	r3, r3, r6
 80018ae:	19dd      	adds	r5, r3, r7
 80018b0:	23b4      	movs	r3, #180	@ 0xb4
 80018b2:	009c      	lsls	r4, r3, #2
 80018b4:	4ac2      	ldr	r2, [pc, #776]	@ (8001bc0 <printLogoNMBS+0x420>)
 80018b6:	192b      	adds	r3, r5, r4
 80018b8:	0011      	movs	r1, r2
 80018ba:	2264      	movs	r2, #100	@ 0x64
 80018bc:	0018      	movs	r0, r3
 80018be:	f004 fb9d 	bl	8005ffc <memcpy>
 80018c2:	2264      	movs	r2, #100	@ 0x64
 80018c4:	192b      	adds	r3, r5, r4
 80018c6:	189b      	adds	r3, r3, r2
 80018c8:	0018      	movs	r0, r3
 80018ca:	2314      	movs	r3, #20
 80018cc:	001a      	movs	r2, r3
 80018ce:	2100      	movs	r1, #0
 80018d0:	f004 fb60 	bl	8005f94 <memset>
 80018d4:	4bb2      	ldr	r3, [pc, #712]	@ (8001ba0 <printLogoNMBS+0x400>)
 80018d6:	199b      	adds	r3, r3, r6
 80018d8:	19dd      	adds	r5, r3, r7
 80018da:	23d2      	movs	r3, #210	@ 0xd2
 80018dc:	009c      	lsls	r4, r3, #2
 80018de:	4ab9      	ldr	r2, [pc, #740]	@ (8001bc4 <printLogoNMBS+0x424>)
 80018e0:	192b      	adds	r3, r5, r4
 80018e2:	0011      	movs	r1, r2
 80018e4:	2264      	movs	r2, #100	@ 0x64
 80018e6:	0018      	movs	r0, r3
 80018e8:	f004 fb88 	bl	8005ffc <memcpy>
 80018ec:	2264      	movs	r2, #100	@ 0x64
 80018ee:	192b      	adds	r3, r5, r4
 80018f0:	189b      	adds	r3, r3, r2
 80018f2:	0018      	movs	r0, r3
 80018f4:	2314      	movs	r3, #20
 80018f6:	001a      	movs	r2, r3
 80018f8:	2100      	movs	r1, #0
 80018fa:	f004 fb4b 	bl	8005f94 <memset>
 80018fe:	4ba8      	ldr	r3, [pc, #672]	@ (8001ba0 <printLogoNMBS+0x400>)
 8001900:	199b      	adds	r3, r3, r6
 8001902:	19dd      	adds	r5, r3, r7
 8001904:	23f0      	movs	r3, #240	@ 0xf0
 8001906:	009c      	lsls	r4, r3, #2
 8001908:	4aaf      	ldr	r2, [pc, #700]	@ (8001bc8 <printLogoNMBS+0x428>)
 800190a:	192b      	adds	r3, r5, r4
 800190c:	0011      	movs	r1, r2
 800190e:	2264      	movs	r2, #100	@ 0x64
 8001910:	0018      	movs	r0, r3
 8001912:	f004 fb73 	bl	8005ffc <memcpy>
 8001916:	2264      	movs	r2, #100	@ 0x64
 8001918:	192b      	adds	r3, r5, r4
 800191a:	189b      	adds	r3, r3, r2
 800191c:	0018      	movs	r0, r3
 800191e:	2314      	movs	r3, #20
 8001920:	001a      	movs	r2, r3
 8001922:	2100      	movs	r1, #0
 8001924:	f004 fb36 	bl	8005f94 <memset>
 8001928:	4b9d      	ldr	r3, [pc, #628]	@ (8001ba0 <printLogoNMBS+0x400>)
 800192a:	199b      	adds	r3, r3, r6
 800192c:	19dd      	adds	r5, r3, r7
 800192e:	2387      	movs	r3, #135	@ 0x87
 8001930:	00dc      	lsls	r4, r3, #3
 8001932:	4aa6      	ldr	r2, [pc, #664]	@ (8001bcc <printLogoNMBS+0x42c>)
 8001934:	192b      	adds	r3, r5, r4
 8001936:	0011      	movs	r1, r2
 8001938:	2264      	movs	r2, #100	@ 0x64
 800193a:	0018      	movs	r0, r3
 800193c:	f004 fb5e 	bl	8005ffc <memcpy>
 8001940:	2264      	movs	r2, #100	@ 0x64
 8001942:	192b      	adds	r3, r5, r4
 8001944:	189b      	adds	r3, r3, r2
 8001946:	0018      	movs	r0, r3
 8001948:	2314      	movs	r3, #20
 800194a:	001a      	movs	r2, r3
 800194c:	2100      	movs	r1, #0
 800194e:	f004 fb21 	bl	8005f94 <memset>
 8001952:	4b93      	ldr	r3, [pc, #588]	@ (8001ba0 <printLogoNMBS+0x400>)
 8001954:	199b      	adds	r3, r3, r6
 8001956:	19dd      	adds	r5, r3, r7
 8001958:	2396      	movs	r3, #150	@ 0x96
 800195a:	00dc      	lsls	r4, r3, #3
 800195c:	4a9c      	ldr	r2, [pc, #624]	@ (8001bd0 <printLogoNMBS+0x430>)
 800195e:	192b      	adds	r3, r5, r4
 8001960:	0011      	movs	r1, r2
 8001962:	2264      	movs	r2, #100	@ 0x64
 8001964:	0018      	movs	r0, r3
 8001966:	f004 fb49 	bl	8005ffc <memcpy>
 800196a:	2264      	movs	r2, #100	@ 0x64
 800196c:	192b      	adds	r3, r5, r4
 800196e:	189b      	adds	r3, r3, r2
 8001970:	0018      	movs	r0, r3
 8001972:	2314      	movs	r3, #20
 8001974:	001a      	movs	r2, r3
 8001976:	2100      	movs	r1, #0
 8001978:	f004 fb0c 	bl	8005f94 <memset>
 800197c:	4b88      	ldr	r3, [pc, #544]	@ (8001ba0 <printLogoNMBS+0x400>)
 800197e:	199b      	adds	r3, r3, r6
 8001980:	19dd      	adds	r5, r3, r7
 8001982:	23a5      	movs	r3, #165	@ 0xa5
 8001984:	00dc      	lsls	r4, r3, #3
 8001986:	4a93      	ldr	r2, [pc, #588]	@ (8001bd4 <printLogoNMBS+0x434>)
 8001988:	192b      	adds	r3, r5, r4
 800198a:	0011      	movs	r1, r2
 800198c:	2264      	movs	r2, #100	@ 0x64
 800198e:	0018      	movs	r0, r3
 8001990:	f004 fb34 	bl	8005ffc <memcpy>
 8001994:	2264      	movs	r2, #100	@ 0x64
 8001996:	192b      	adds	r3, r5, r4
 8001998:	189b      	adds	r3, r3, r2
 800199a:	0018      	movs	r0, r3
 800199c:	2314      	movs	r3, #20
 800199e:	001a      	movs	r2, r3
 80019a0:	2100      	movs	r1, #0
 80019a2:	f004 faf7 	bl	8005f94 <memset>
 80019a6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ba0 <printLogoNMBS+0x400>)
 80019a8:	199b      	adds	r3, r3, r6
 80019aa:	19dd      	adds	r5, r3, r7
 80019ac:	23b4      	movs	r3, #180	@ 0xb4
 80019ae:	00dc      	lsls	r4, r3, #3
 80019b0:	4a89      	ldr	r2, [pc, #548]	@ (8001bd8 <printLogoNMBS+0x438>)
 80019b2:	192b      	adds	r3, r5, r4
 80019b4:	0011      	movs	r1, r2
 80019b6:	2264      	movs	r2, #100	@ 0x64
 80019b8:	0018      	movs	r0, r3
 80019ba:	f004 fb1f 	bl	8005ffc <memcpy>
 80019be:	2264      	movs	r2, #100	@ 0x64
 80019c0:	192b      	adds	r3, r5, r4
 80019c2:	189b      	adds	r3, r3, r2
 80019c4:	0018      	movs	r0, r3
 80019c6:	2314      	movs	r3, #20
 80019c8:	001a      	movs	r2, r3
 80019ca:	2100      	movs	r1, #0
 80019cc:	f004 fae2 	bl	8005f94 <memset>
 80019d0:	4b73      	ldr	r3, [pc, #460]	@ (8001ba0 <printLogoNMBS+0x400>)
 80019d2:	199b      	adds	r3, r3, r6
 80019d4:	19dd      	adds	r5, r3, r7
 80019d6:	23c3      	movs	r3, #195	@ 0xc3
 80019d8:	00dc      	lsls	r4, r3, #3
 80019da:	4a80      	ldr	r2, [pc, #512]	@ (8001bdc <printLogoNMBS+0x43c>)
 80019dc:	192b      	adds	r3, r5, r4
 80019de:	0011      	movs	r1, r2
 80019e0:	2265      	movs	r2, #101	@ 0x65
 80019e2:	0018      	movs	r0, r3
 80019e4:	f004 fb0a 	bl	8005ffc <memcpy>
 80019e8:	2265      	movs	r2, #101	@ 0x65
 80019ea:	192b      	adds	r3, r5, r4
 80019ec:	189b      	adds	r3, r3, r2
 80019ee:	0018      	movs	r0, r3
 80019f0:	2313      	movs	r3, #19
 80019f2:	001a      	movs	r2, r3
 80019f4:	2100      	movs	r1, #0
 80019f6:	f004 facd 	bl	8005f94 <memset>
 80019fa:	4b69      	ldr	r3, [pc, #420]	@ (8001ba0 <printLogoNMBS+0x400>)
 80019fc:	199b      	adds	r3, r3, r6
 80019fe:	19dd      	adds	r5, r3, r7
 8001a00:	23d2      	movs	r3, #210	@ 0xd2
 8001a02:	00dc      	lsls	r4, r3, #3
 8001a04:	4a76      	ldr	r2, [pc, #472]	@ (8001be0 <printLogoNMBS+0x440>)
 8001a06:	192b      	adds	r3, r5, r4
 8001a08:	0011      	movs	r1, r2
 8001a0a:	2265      	movs	r2, #101	@ 0x65
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f004 faf5 	bl	8005ffc <memcpy>
 8001a12:	2265      	movs	r2, #101	@ 0x65
 8001a14:	192b      	adds	r3, r5, r4
 8001a16:	189b      	adds	r3, r3, r2
 8001a18:	0018      	movs	r0, r3
 8001a1a:	2313      	movs	r3, #19
 8001a1c:	001a      	movs	r2, r3
 8001a1e:	2100      	movs	r1, #0
 8001a20:	f004 fab8 	bl	8005f94 <memset>
 8001a24:	4b5e      	ldr	r3, [pc, #376]	@ (8001ba0 <printLogoNMBS+0x400>)
 8001a26:	199b      	adds	r3, r3, r6
 8001a28:	19dd      	adds	r5, r3, r7
 8001a2a:	23e1      	movs	r3, #225	@ 0xe1
 8001a2c:	00dc      	lsls	r4, r3, #3
 8001a2e:	4a6d      	ldr	r2, [pc, #436]	@ (8001be4 <printLogoNMBS+0x444>)
 8001a30:	192b      	adds	r3, r5, r4
 8001a32:	0011      	movs	r1, r2
 8001a34:	2265      	movs	r2, #101	@ 0x65
 8001a36:	0018      	movs	r0, r3
 8001a38:	f004 fae0 	bl	8005ffc <memcpy>
 8001a3c:	2265      	movs	r2, #101	@ 0x65
 8001a3e:	192b      	adds	r3, r5, r4
 8001a40:	189b      	adds	r3, r3, r2
 8001a42:	0018      	movs	r0, r3
 8001a44:	2313      	movs	r3, #19
 8001a46:	001a      	movs	r2, r3
 8001a48:	2100      	movs	r1, #0
 8001a4a:	f004 faa3 	bl	8005f94 <memset>
 8001a4e:	4b54      	ldr	r3, [pc, #336]	@ (8001ba0 <printLogoNMBS+0x400>)
 8001a50:	199b      	adds	r3, r3, r6
 8001a52:	19dd      	adds	r5, r3, r7
 8001a54:	23f0      	movs	r3, #240	@ 0xf0
 8001a56:	00dc      	lsls	r4, r3, #3
 8001a58:	4a63      	ldr	r2, [pc, #396]	@ (8001be8 <printLogoNMBS+0x448>)
 8001a5a:	192b      	adds	r3, r5, r4
 8001a5c:	0011      	movs	r1, r2
 8001a5e:	2265      	movs	r2, #101	@ 0x65
 8001a60:	0018      	movs	r0, r3
 8001a62:	f004 facb 	bl	8005ffc <memcpy>
 8001a66:	2265      	movs	r2, #101	@ 0x65
 8001a68:	192b      	adds	r3, r5, r4
 8001a6a:	189b      	adds	r3, r3, r2
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	2313      	movs	r3, #19
 8001a70:	001a      	movs	r2, r3
 8001a72:	2100      	movs	r1, #0
 8001a74:	f004 fa8e 	bl	8005f94 <memset>
 8001a78:	4b49      	ldr	r3, [pc, #292]	@ (8001ba0 <printLogoNMBS+0x400>)
 8001a7a:	199b      	adds	r3, r3, r6
 8001a7c:	19dd      	adds	r5, r3, r7
 8001a7e:	23ff      	movs	r3, #255	@ 0xff
 8001a80:	00dc      	lsls	r4, r3, #3
 8001a82:	4a5a      	ldr	r2, [pc, #360]	@ (8001bec <printLogoNMBS+0x44c>)
 8001a84:	192b      	adds	r3, r5, r4
 8001a86:	0011      	movs	r1, r2
 8001a88:	2265      	movs	r2, #101	@ 0x65
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f004 fab6 	bl	8005ffc <memcpy>
 8001a90:	2265      	movs	r2, #101	@ 0x65
 8001a92:	192b      	adds	r3, r5, r4
 8001a94:	189b      	adds	r3, r3, r2
 8001a96:	0018      	movs	r0, r3
 8001a98:	2313      	movs	r3, #19
 8001a9a:	001a      	movs	r2, r3
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	f004 fa79 	bl	8005f94 <memset>
 8001aa2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ba0 <printLogoNMBS+0x400>)
 8001aa4:	199b      	adds	r3, r3, r6
 8001aa6:	19dd      	adds	r5, r3, r7
 8001aa8:	2387      	movs	r3, #135	@ 0x87
 8001aaa:	011c      	lsls	r4, r3, #4
 8001aac:	4a50      	ldr	r2, [pc, #320]	@ (8001bf0 <printLogoNMBS+0x450>)
 8001aae:	192b      	adds	r3, r5, r4
 8001ab0:	0011      	movs	r1, r2
 8001ab2:	2265      	movs	r2, #101	@ 0x65
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f004 faa1 	bl	8005ffc <memcpy>
 8001aba:	2265      	movs	r2, #101	@ 0x65
 8001abc:	192b      	adds	r3, r5, r4
 8001abe:	189b      	adds	r3, r3, r2
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	2313      	movs	r3, #19
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	f004 fa64 	bl	8005f94 <memset>
 8001acc:	4b34      	ldr	r3, [pc, #208]	@ (8001ba0 <printLogoNMBS+0x400>)
 8001ace:	199b      	adds	r3, r3, r6
 8001ad0:	19dc      	adds	r4, r3, r7
 8001ad2:	4d48      	ldr	r5, [pc, #288]	@ (8001bf4 <printLogoNMBS+0x454>)
 8001ad4:	4a48      	ldr	r2, [pc, #288]	@ (8001bf8 <printLogoNMBS+0x458>)
 8001ad6:	1963      	adds	r3, r4, r5
 8001ad8:	0011      	movs	r1, r2
 8001ada:	2265      	movs	r2, #101	@ 0x65
 8001adc:	0018      	movs	r0, r3
 8001ade:	f004 fa8d 	bl	8005ffc <memcpy>
 8001ae2:	2265      	movs	r2, #101	@ 0x65
 8001ae4:	1963      	adds	r3, r4, r5
 8001ae6:	189b      	adds	r3, r3, r2
 8001ae8:	0018      	movs	r0, r3
 8001aea:	2313      	movs	r3, #19
 8001aec:	001a      	movs	r2, r3
 8001aee:	2100      	movs	r1, #0
 8001af0:	f004 fa50 	bl	8005f94 <memset>
 8001af4:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba0 <printLogoNMBS+0x400>)
 8001af6:	199b      	adds	r3, r3, r6
 8001af8:	19dd      	adds	r5, r3, r7
 8001afa:	2396      	movs	r3, #150	@ 0x96
 8001afc:	011c      	lsls	r4, r3, #4
 8001afe:	4a3f      	ldr	r2, [pc, #252]	@ (8001bfc <printLogoNMBS+0x45c>)
 8001b00:	192b      	adds	r3, r5, r4
 8001b02:	0011      	movs	r1, r2
 8001b04:	2265      	movs	r2, #101	@ 0x65
 8001b06:	0018      	movs	r0, r3
 8001b08:	f004 fa78 	bl	8005ffc <memcpy>
 8001b0c:	2265      	movs	r2, #101	@ 0x65
 8001b0e:	192b      	adds	r3, r5, r4
 8001b10:	189b      	adds	r3, r3, r2
 8001b12:	0018      	movs	r0, r3
 8001b14:	2313      	movs	r3, #19
 8001b16:	001a      	movs	r2, r3
 8001b18:	2100      	movs	r1, #0
 8001b1a:	f004 fa3b 	bl	8005f94 <memset>
 8001b1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ba0 <printLogoNMBS+0x400>)
 8001b20:	199b      	adds	r3, r3, r6
 8001b22:	19dc      	adds	r4, r3, r7
 8001b24:	4d36      	ldr	r5, [pc, #216]	@ (8001c00 <printLogoNMBS+0x460>)
 8001b26:	4a37      	ldr	r2, [pc, #220]	@ (8001c04 <printLogoNMBS+0x464>)
 8001b28:	1963      	adds	r3, r4, r5
 8001b2a:	0011      	movs	r1, r2
 8001b2c:	2265      	movs	r2, #101	@ 0x65
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f004 fa64 	bl	8005ffc <memcpy>
 8001b34:	2265      	movs	r2, #101	@ 0x65
 8001b36:	1963      	adds	r3, r4, r5
 8001b38:	189b      	adds	r3, r3, r2
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	2313      	movs	r3, #19
 8001b3e:	001a      	movs	r2, r3
 8001b40:	2100      	movs	r1, #0
 8001b42:	f004 fa27 	bl	8005f94 <memset>
 8001b46:	4b16      	ldr	r3, [pc, #88]	@ (8001ba0 <printLogoNMBS+0x400>)
 8001b48:	199b      	adds	r3, r3, r6
 8001b4a:	19dd      	adds	r5, r3, r7
 8001b4c:	23a5      	movs	r3, #165	@ 0xa5
 8001b4e:	011c      	lsls	r4, r3, #4
 8001b50:	4a2d      	ldr	r2, [pc, #180]	@ (8001c08 <printLogoNMBS+0x468>)
 8001b52:	192b      	adds	r3, r5, r4
 8001b54:	0011      	movs	r1, r2
 8001b56:	2265      	movs	r2, #101	@ 0x65
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f004 fa4f 	bl	8005ffc <memcpy>
 8001b5e:	2265      	movs	r2, #101	@ 0x65
 8001b60:	192b      	adds	r3, r5, r4
 8001b62:	189b      	adds	r3, r3, r2
 8001b64:	0018      	movs	r0, r3
 8001b66:	2313      	movs	r3, #19
 8001b68:	001a      	movs	r2, r3
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	f004 fa12 	bl	8005f94 <memset>
 8001b70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <printLogoNMBS+0x400>)
 8001b72:	199b      	adds	r3, r3, r6
 8001b74:	19dc      	adds	r4, r3, r7
 8001b76:	4d25      	ldr	r5, [pc, #148]	@ (8001c0c <printLogoNMBS+0x46c>)
 8001b78:	4a25      	ldr	r2, [pc, #148]	@ (8001c10 <printLogoNMBS+0x470>)
 8001b7a:	1963      	adds	r3, r4, r5
 8001b7c:	0011      	movs	r1, r2
 8001b7e:	2265      	movs	r2, #101	@ 0x65
 8001b80:	0018      	movs	r0, r3
 8001b82:	f004 fa3b 	bl	8005ffc <memcpy>
 8001b86:	2265      	movs	r2, #101	@ 0x65
 8001b88:	1963      	adds	r3, r4, r5
 8001b8a:	189b      	adds	r3, r3, r2
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	2313      	movs	r3, #19
 8001b90:	001a      	movs	r2, r3
 8001b92:	2100      	movs	r1, #0
 8001b94:	f004 f9fe 	bl	8005f94 <memset>
 8001b98:	e03c      	b.n	8001c14 <printLogoNMBS+0x474>
 8001b9a:	46c0      	nop			@ (mov r8, r8)
 8001b9c:	ffffef14 	.word	0xffffef14
 8001ba0:	ffffef1c 	.word	0xffffef1c
 8001ba4:	000010e8 	.word	0x000010e8
 8001ba8:	080068c4 	.word	0x080068c4
 8001bac:	0800693c 	.word	0x0800693c
 8001bb0:	080069b4 	.word	0x080069b4
 8001bb4:	08006a2c 	.word	0x08006a2c
 8001bb8:	08006aa4 	.word	0x08006aa4
 8001bbc:	08006b1c 	.word	0x08006b1c
 8001bc0:	08006b94 	.word	0x08006b94
 8001bc4:	08006c0c 	.word	0x08006c0c
 8001bc8:	08006c84 	.word	0x08006c84
 8001bcc:	08006cfc 	.word	0x08006cfc
 8001bd0:	08006d74 	.word	0x08006d74
 8001bd4:	08006dec 	.word	0x08006dec
 8001bd8:	08006e64 	.word	0x08006e64
 8001bdc:	08006edc 	.word	0x08006edc
 8001be0:	08006f54 	.word	0x08006f54
 8001be4:	08006fcc 	.word	0x08006fcc
 8001be8:	08007044 	.word	0x08007044
 8001bec:	080070bc 	.word	0x080070bc
 8001bf0:	08007134 	.word	0x08007134
 8001bf4:	000008e8 	.word	0x000008e8
 8001bf8:	080071ac 	.word	0x080071ac
 8001bfc:	08007224 	.word	0x08007224
 8001c00:	000009d8 	.word	0x000009d8
 8001c04:	0800729c 	.word	0x0800729c
 8001c08:	08007314 	.word	0x08007314
 8001c0c:	00000ac8 	.word	0x00000ac8
 8001c10:	0800738c 	.word	0x0800738c
 8001c14:	4b82      	ldr	r3, [pc, #520]	@ (8001e20 <printLogoNMBS+0x680>)
 8001c16:	199b      	adds	r3, r3, r6
 8001c18:	19dd      	adds	r5, r3, r7
 8001c1a:	23b4      	movs	r3, #180	@ 0xb4
 8001c1c:	011c      	lsls	r4, r3, #4
 8001c1e:	4a81      	ldr	r2, [pc, #516]	@ (8001e24 <printLogoNMBS+0x684>)
 8001c20:	192b      	adds	r3, r5, r4
 8001c22:	0011      	movs	r1, r2
 8001c24:	2265      	movs	r2, #101	@ 0x65
 8001c26:	0018      	movs	r0, r3
 8001c28:	f004 f9e8 	bl	8005ffc <memcpy>
 8001c2c:	2265      	movs	r2, #101	@ 0x65
 8001c2e:	192b      	adds	r3, r5, r4
 8001c30:	189b      	adds	r3, r3, r2
 8001c32:	0018      	movs	r0, r3
 8001c34:	2313      	movs	r3, #19
 8001c36:	001a      	movs	r2, r3
 8001c38:	2100      	movs	r1, #0
 8001c3a:	f004 f9ab 	bl	8005f94 <memset>
 8001c3e:	4b78      	ldr	r3, [pc, #480]	@ (8001e20 <printLogoNMBS+0x680>)
 8001c40:	199b      	adds	r3, r3, r6
 8001c42:	19dc      	adds	r4, r3, r7
 8001c44:	4d78      	ldr	r5, [pc, #480]	@ (8001e28 <printLogoNMBS+0x688>)
 8001c46:	4a79      	ldr	r2, [pc, #484]	@ (8001e2c <printLogoNMBS+0x68c>)
 8001c48:	1963      	adds	r3, r4, r5
 8001c4a:	0011      	movs	r1, r2
 8001c4c:	2265      	movs	r2, #101	@ 0x65
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f004 f9d4 	bl	8005ffc <memcpy>
 8001c54:	2265      	movs	r2, #101	@ 0x65
 8001c56:	1963      	adds	r3, r4, r5
 8001c58:	189b      	adds	r3, r3, r2
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	2313      	movs	r3, #19
 8001c5e:	001a      	movs	r2, r3
 8001c60:	2100      	movs	r1, #0
 8001c62:	f004 f997 	bl	8005f94 <memset>
 8001c66:	4b6e      	ldr	r3, [pc, #440]	@ (8001e20 <printLogoNMBS+0x680>)
 8001c68:	199b      	adds	r3, r3, r6
 8001c6a:	19dd      	adds	r5, r3, r7
 8001c6c:	23c3      	movs	r3, #195	@ 0xc3
 8001c6e:	011c      	lsls	r4, r3, #4
 8001c70:	4a6f      	ldr	r2, [pc, #444]	@ (8001e30 <printLogoNMBS+0x690>)
 8001c72:	192b      	adds	r3, r5, r4
 8001c74:	0011      	movs	r1, r2
 8001c76:	2265      	movs	r2, #101	@ 0x65
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f004 f9bf 	bl	8005ffc <memcpy>
 8001c7e:	2265      	movs	r2, #101	@ 0x65
 8001c80:	192b      	adds	r3, r5, r4
 8001c82:	189b      	adds	r3, r3, r2
 8001c84:	0018      	movs	r0, r3
 8001c86:	2313      	movs	r3, #19
 8001c88:	001a      	movs	r2, r3
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	f004 f982 	bl	8005f94 <memset>
 8001c90:	4b63      	ldr	r3, [pc, #396]	@ (8001e20 <printLogoNMBS+0x680>)
 8001c92:	199b      	adds	r3, r3, r6
 8001c94:	19dc      	adds	r4, r3, r7
 8001c96:	4d67      	ldr	r5, [pc, #412]	@ (8001e34 <printLogoNMBS+0x694>)
 8001c98:	4a67      	ldr	r2, [pc, #412]	@ (8001e38 <printLogoNMBS+0x698>)
 8001c9a:	1963      	adds	r3, r4, r5
 8001c9c:	0011      	movs	r1, r2
 8001c9e:	2265      	movs	r2, #101	@ 0x65
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f004 f9ab 	bl	8005ffc <memcpy>
 8001ca6:	2265      	movs	r2, #101	@ 0x65
 8001ca8:	1963      	adds	r3, r4, r5
 8001caa:	189b      	adds	r3, r3, r2
 8001cac:	0018      	movs	r0, r3
 8001cae:	2313      	movs	r3, #19
 8001cb0:	001a      	movs	r2, r3
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	f004 f96e 	bl	8005f94 <memset>
 8001cb8:	4b59      	ldr	r3, [pc, #356]	@ (8001e20 <printLogoNMBS+0x680>)
 8001cba:	199b      	adds	r3, r3, r6
 8001cbc:	19dd      	adds	r5, r3, r7
 8001cbe:	23d2      	movs	r3, #210	@ 0xd2
 8001cc0:	011c      	lsls	r4, r3, #4
 8001cc2:	4a5e      	ldr	r2, [pc, #376]	@ (8001e3c <printLogoNMBS+0x69c>)
 8001cc4:	192b      	adds	r3, r5, r4
 8001cc6:	0011      	movs	r1, r2
 8001cc8:	2264      	movs	r2, #100	@ 0x64
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f004 f996 	bl	8005ffc <memcpy>
 8001cd0:	2264      	movs	r2, #100	@ 0x64
 8001cd2:	192b      	adds	r3, r5, r4
 8001cd4:	189b      	adds	r3, r3, r2
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	2314      	movs	r3, #20
 8001cda:	001a      	movs	r2, r3
 8001cdc:	2100      	movs	r1, #0
 8001cde:	f004 f959 	bl	8005f94 <memset>
 8001ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8001e20 <printLogoNMBS+0x680>)
 8001ce4:	199b      	adds	r3, r3, r6
 8001ce6:	19dc      	adds	r4, r3, r7
 8001ce8:	4d55      	ldr	r5, [pc, #340]	@ (8001e40 <printLogoNMBS+0x6a0>)
 8001cea:	4a56      	ldr	r2, [pc, #344]	@ (8001e44 <printLogoNMBS+0x6a4>)
 8001cec:	1963      	adds	r3, r4, r5
 8001cee:	0011      	movs	r1, r2
 8001cf0:	2265      	movs	r2, #101	@ 0x65
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f004 f982 	bl	8005ffc <memcpy>
 8001cf8:	2265      	movs	r2, #101	@ 0x65
 8001cfa:	1963      	adds	r3, r4, r5
 8001cfc:	189b      	adds	r3, r3, r2
 8001cfe:	0018      	movs	r0, r3
 8001d00:	2313      	movs	r3, #19
 8001d02:	001a      	movs	r2, r3
 8001d04:	2100      	movs	r1, #0
 8001d06:	f004 f945 	bl	8005f94 <memset>
 8001d0a:	4b45      	ldr	r3, [pc, #276]	@ (8001e20 <printLogoNMBS+0x680>)
 8001d0c:	199b      	adds	r3, r3, r6
 8001d0e:	19dd      	adds	r5, r3, r7
 8001d10:	23e1      	movs	r3, #225	@ 0xe1
 8001d12:	011c      	lsls	r4, r3, #4
 8001d14:	4a4c      	ldr	r2, [pc, #304]	@ (8001e48 <printLogoNMBS+0x6a8>)
 8001d16:	192b      	adds	r3, r5, r4
 8001d18:	0011      	movs	r1, r2
 8001d1a:	2265      	movs	r2, #101	@ 0x65
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f004 f96d 	bl	8005ffc <memcpy>
 8001d22:	2265      	movs	r2, #101	@ 0x65
 8001d24:	192b      	adds	r3, r5, r4
 8001d26:	189b      	adds	r3, r3, r2
 8001d28:	0018      	movs	r0, r3
 8001d2a:	2313      	movs	r3, #19
 8001d2c:	001a      	movs	r2, r3
 8001d2e:	2100      	movs	r1, #0
 8001d30:	f004 f930 	bl	8005f94 <memset>
 8001d34:	4b3a      	ldr	r3, [pc, #232]	@ (8001e20 <printLogoNMBS+0x680>)
 8001d36:	199b      	adds	r3, r3, r6
 8001d38:	19dc      	adds	r4, r3, r7
 8001d3a:	4d44      	ldr	r5, [pc, #272]	@ (8001e4c <printLogoNMBS+0x6ac>)
 8001d3c:	4a44      	ldr	r2, [pc, #272]	@ (8001e50 <printLogoNMBS+0x6b0>)
 8001d3e:	1963      	adds	r3, r4, r5
 8001d40:	0011      	movs	r1, r2
 8001d42:	2265      	movs	r2, #101	@ 0x65
 8001d44:	0018      	movs	r0, r3
 8001d46:	f004 f959 	bl	8005ffc <memcpy>
 8001d4a:	2265      	movs	r2, #101	@ 0x65
 8001d4c:	1963      	adds	r3, r4, r5
 8001d4e:	189b      	adds	r3, r3, r2
 8001d50:	0018      	movs	r0, r3
 8001d52:	2313      	movs	r3, #19
 8001d54:	001a      	movs	r2, r3
 8001d56:	2100      	movs	r1, #0
 8001d58:	f004 f91c 	bl	8005f94 <memset>
 8001d5c:	4b30      	ldr	r3, [pc, #192]	@ (8001e20 <printLogoNMBS+0x680>)
 8001d5e:	199b      	adds	r3, r3, r6
 8001d60:	19dd      	adds	r5, r3, r7
 8001d62:	23f0      	movs	r3, #240	@ 0xf0
 8001d64:	011c      	lsls	r4, r3, #4
 8001d66:	4a3b      	ldr	r2, [pc, #236]	@ (8001e54 <printLogoNMBS+0x6b4>)
 8001d68:	192b      	adds	r3, r5, r4
 8001d6a:	0011      	movs	r1, r2
 8001d6c:	2265      	movs	r2, #101	@ 0x65
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f004 f944 	bl	8005ffc <memcpy>
 8001d74:	2265      	movs	r2, #101	@ 0x65
 8001d76:	192b      	adds	r3, r5, r4
 8001d78:	189b      	adds	r3, r3, r2
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	2313      	movs	r3, #19
 8001d7e:	001a      	movs	r2, r3
 8001d80:	2100      	movs	r1, #0
 8001d82:	f004 f907 	bl	8005f94 <memset>
 8001d86:	4b26      	ldr	r3, [pc, #152]	@ (8001e20 <printLogoNMBS+0x680>)
 8001d88:	199b      	adds	r3, r3, r6
 8001d8a:	19dc      	adds	r4, r3, r7
 8001d8c:	4d32      	ldr	r5, [pc, #200]	@ (8001e58 <printLogoNMBS+0x6b8>)
 8001d8e:	4a33      	ldr	r2, [pc, #204]	@ (8001e5c <printLogoNMBS+0x6bc>)
 8001d90:	1963      	adds	r3, r4, r5
 8001d92:	0011      	movs	r1, r2
 8001d94:	2262      	movs	r2, #98	@ 0x62
 8001d96:	0018      	movs	r0, r3
 8001d98:	f004 f930 	bl	8005ffc <memcpy>
 8001d9c:	2262      	movs	r2, #98	@ 0x62
 8001d9e:	1963      	adds	r3, r4, r5
 8001da0:	189b      	adds	r3, r3, r2
 8001da2:	0018      	movs	r0, r3
 8001da4:	2316      	movs	r3, #22
 8001da6:	001a      	movs	r2, r3
 8001da8:	2100      	movs	r1, #0
 8001daa:	f004 f8f3 	bl	8005f94 <memset>
			"                           :=+#************##*++====++*###***********#+=:                           ",
			"                                  .=****************************=.                           \033[0m"
	};

	//send to user
	for (int i = 0; i < 36; i++) {
 8001dae:	2300      	movs	r3, #0
 8001db0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e60 <printLogoNMBS+0x6c0>)
 8001db2:	18ba      	adds	r2, r7, r2
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e027      	b.n	8001e08 <printLogoNMBS+0x668>
		HAL_UART_Transmit(&huart1, (uint8_t*)logoNMBS[i], strlen(logoNMBS[i]), HAL_MAX_DELAY);
 8001db8:	1d39      	adds	r1, r7, #4
 8001dba:	4d29      	ldr	r5, [pc, #164]	@ (8001e60 <printLogoNMBS+0x6c0>)
 8001dbc:	197b      	adds	r3, r7, r5
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	0013      	movs	r3, r2
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	18cc      	adds	r4, r1, r3
 8001dca:	1d39      	adds	r1, r7, #4
 8001dcc:	197b      	adds	r3, r7, r5
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	0013      	movs	r3, r2
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	18cb      	adds	r3, r1, r3
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f7fe f994 	bl	8000108 <strlen>
 8001de0:	0003      	movs	r3, r0
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	2301      	movs	r3, #1
 8001de6:	425b      	negs	r3, r3
 8001de8:	481e      	ldr	r0, [pc, #120]	@ (8001e64 <printLogoNMBS+0x6c4>)
 8001dea:	0021      	movs	r1, r4
 8001dec:	f003 fca2 	bl	8005734 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // New line after each row
 8001df0:	2301      	movs	r3, #1
 8001df2:	425b      	negs	r3, r3
 8001df4:	491c      	ldr	r1, [pc, #112]	@ (8001e68 <printLogoNMBS+0x6c8>)
 8001df6:	481b      	ldr	r0, [pc, #108]	@ (8001e64 <printLogoNMBS+0x6c4>)
 8001df8:	2202      	movs	r2, #2
 8001dfa:	f003 fc9b 	bl	8005734 <HAL_UART_Transmit>
	for (int i = 0; i < 36; i++) {
 8001dfe:	197b      	adds	r3, r7, r5
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	197a      	adds	r2, r7, r5
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <printLogoNMBS+0x6c0>)
 8001e0a:	18fb      	adds	r3, r7, r3
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b23      	cmp	r3, #35	@ 0x23
 8001e10:	ddd2      	ble.n	8001db8 <printLogoNMBS+0x618>
	}
}
 8001e12:	46c0      	nop			@ (mov r8, r8)
 8001e14:	46c0      	nop			@ (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	4b14      	ldr	r3, [pc, #80]	@ (8001e6c <printLogoNMBS+0x6cc>)
 8001e1a:	449d      	add	sp, r3
 8001e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e1e:	46c0      	nop			@ (mov r8, r8)
 8001e20:	ffffef1c 	.word	0xffffef1c
 8001e24:	08007404 	.word	0x08007404
 8001e28:	00000bb8 	.word	0x00000bb8
 8001e2c:	0800747c 	.word	0x0800747c
 8001e30:	080074f4 	.word	0x080074f4
 8001e34:	00000ca8 	.word	0x00000ca8
 8001e38:	0800756c 	.word	0x0800756c
 8001e3c:	080075e4 	.word	0x080075e4
 8001e40:	00000d98 	.word	0x00000d98
 8001e44:	0800765c 	.word	0x0800765c
 8001e48:	080076d4 	.word	0x080076d4
 8001e4c:	00000e88 	.word	0x00000e88
 8001e50:	0800774c 	.word	0x0800774c
 8001e54:	080077c4 	.word	0x080077c4
 8001e58:	00000f78 	.word	0x00000f78
 8001e5c:	0800783c 	.word	0x0800783c
 8001e60:	000010e4 	.word	0x000010e4
 8001e64:	20000274 	.word	0x20000274
 8001e68:	080068c0 	.word	0x080068c0
 8001e6c:	000010ec 	.word	0x000010ec

08001e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e76:	f001 f8f9 	bl	800306c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e7a:	f000 f98d 	bl	8002198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e7e:	f000 fd0d 	bl	800289c <MX_GPIO_Init>
  MX_ADC_Init();
 8001e82:	f000 f9f3 	bl	800226c <MX_ADC_Init>
  MX_I2C1_Init();
 8001e86:	f000 fa4d 	bl	8002324 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001e8a:	f000 fcd7 	bl	800283c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001e8e:	f000 fa89 	bl	80023a4 <MX_TIM3_Init>
  MX_TIM15_Init();
 8001e92:	f000 fb2b 	bl	80024ec <MX_TIM15_Init>
  MX_TIM14_Init();
 8001e96:	f000 fb03 	bl	80024a0 <MX_TIM14_Init>
  MX_TIM16_Init();
 8001e9a:	f000 fbc7 	bl	800262c <MX_TIM16_Init>
  MX_TIM17_Init();
 8001e9e:	f000 fc49 	bl	8002734 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

	//double check this when you have the PCB's
	htim14.Init.Prescaler = 47;
 8001ea2:	4ba8      	ldr	r3, [pc, #672]	@ (8002144 <main+0x2d4>)
 8001ea4:	222f      	movs	r2, #47	@ 0x2f
 8001ea6:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea8:	4ba6      	ldr	r3, [pc, #664]	@ (8002144 <main+0x2d4>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 0xFFFF;  // Maximum period to avoid overflow for long delays
 8001eae:	4ba5      	ldr	r3, [pc, #660]	@ (8002144 <main+0x2d4>)
 8001eb0:	4aa5      	ldr	r2, [pc, #660]	@ (8002148 <main+0x2d8>)
 8001eb2:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim14);
 8001eb4:	4ba3      	ldr	r3, [pc, #652]	@ (8002144 <main+0x2d4>)
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f002 fdb6 	bl	8004a28 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start(&htim14);  // Start Timer 6
 8001ebc:	4ba1      	ldr	r3, [pc, #644]	@ (8002144 <main+0x2d4>)
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f002 fe02 	bl	8004ac8 <HAL_TIM_Base_Start>

	//print NMBS logo
	printLogoNMBS();
 8001ec4:	f7ff fc6c 	bl	80017a0 <printLogoNMBS>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//START STOP
		startStop = HAL_GPIO_ReadPin(START_STOP_GPIO_Port, START_STOP_Pin);
 8001ec8:	2380      	movs	r3, #128	@ 0x80
 8001eca:	01db      	lsls	r3, r3, #7
 8001ecc:	4a9f      	ldr	r2, [pc, #636]	@ (800214c <main+0x2dc>)
 8001ece:	0019      	movs	r1, r3
 8001ed0:	0010      	movs	r0, r2
 8001ed2:	f001 ff05 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	001a      	movs	r2, r3
 8001eda:	4b9d      	ldr	r3, [pc, #628]	@ (8002150 <main+0x2e0>)
 8001edc:	701a      	strb	r2, [r3, #0]

		ReadADCValue(&potValue);
 8001ede:	4b9d      	ldr	r3, [pc, #628]	@ (8002154 <main+0x2e4>)
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7ff fa69 	bl	80013b8 <ReadADCValue>
		uint8_t potValuePercent = (uint8_t)(potValue / 2.56);
 8001ee6:	4b9b      	ldr	r3, [pc, #620]	@ (8002154 <main+0x2e4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	0018      	movs	r0, r3
 8001eec:	f7ff f8ba 	bl	8001064 <__aeabi_ui2d>
 8001ef0:	4a99      	ldr	r2, [pc, #612]	@ (8002158 <main+0x2e8>)
 8001ef2:	4b9a      	ldr	r3, [pc, #616]	@ (800215c <main+0x2ec>)
 8001ef4:	f7fe f9c4 	bl	8000280 <__aeabi_ddiv>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	000b      	movs	r3, r1
 8001efc:	1dfc      	adds	r4, r7, #7
 8001efe:	0010      	movs	r0, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	f7fe f99f 	bl	8000244 <__aeabi_d2uiz>
 8001f06:	0003      	movs	r3, r0
 8001f08:	7023      	strb	r3, [r4, #0]

		motorDirection = HAL_GPIO_ReadPin(MOTOR_LR_GPIO_Port, MOTOR_LR_Pin);
 8001f0a:	2380      	movs	r3, #128	@ 0x80
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	4a8f      	ldr	r2, [pc, #572]	@ (800214c <main+0x2dc>)
 8001f10:	0019      	movs	r1, r3
 8001f12:	0010      	movs	r0, r2
 8001f14:	f001 fee4 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	001a      	movs	r2, r3
 8001f1c:	4b90      	ldr	r3, [pc, #576]	@ (8002160 <main+0x2f0>)
 8001f1e:	701a      	strb	r2, [r3, #0]

		motorSelect1 = HAL_GPIO_ReadPin(MOTOR_SELECT1_GPIO_Port, MOTOR_SELECT1_Pin);
 8001f20:	4b90      	ldr	r3, [pc, #576]	@ (8002164 <main+0x2f4>)
 8001f22:	2101      	movs	r1, #1
 8001f24:	0018      	movs	r0, r3
 8001f26:	f001 fedb 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	001a      	movs	r2, r3
 8001f2e:	4b8e      	ldr	r3, [pc, #568]	@ (8002168 <main+0x2f8>)
 8001f30:	701a      	strb	r2, [r3, #0]
		motorSelect2 = HAL_GPIO_ReadPin(MOTOR_SELECT2_GPIO_Port, MOTOR_SELECT2_Pin);
 8001f32:	4b8c      	ldr	r3, [pc, #560]	@ (8002164 <main+0x2f4>)
 8001f34:	2102      	movs	r1, #2
 8001f36:	0018      	movs	r0, r3
 8001f38:	f001 fed2 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	001a      	movs	r2, r3
 8001f40:	4b8a      	ldr	r3, [pc, #552]	@ (800216c <main+0x2fc>)
 8001f42:	701a      	strb	r2, [r3, #0]

		SetLevelLEDs((uint8_t)potValue);
 8001f44:	4b83      	ldr	r3, [pc, #524]	@ (8002154 <main+0x2e4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f7ff fa50 	bl	80013f0 <SetLevelLEDs>

		//start / stop
		if(startStop != startStopPrev){
 8001f50:	4b7f      	ldr	r3, [pc, #508]	@ (8002150 <main+0x2e0>)
 8001f52:	781a      	ldrb	r2, [r3, #0]
 8001f54:	4b86      	ldr	r3, [pc, #536]	@ (8002170 <main+0x300>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d100      	bne.n	8001f5e <main+0xee>
 8001f5c:	e07b      	b.n	8002056 <main+0x1e6>
			//Starting
			if(startStop){
 8001f5e:	4b7c      	ldr	r3, [pc, #496]	@ (8002150 <main+0x2e0>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d04f      	beq.n	8002006 <main+0x196>
				if(motorSelect2){
 8001f66:	4b81      	ldr	r3, [pc, #516]	@ (800216c <main+0x2fc>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d01e      	beq.n	8001fac <main+0x13c>
					//DC
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001f6e:	4b81      	ldr	r3, [pc, #516]	@ (8002174 <main+0x304>)
 8001f70:	2100      	movs	r1, #0
 8001f72:	0018      	movs	r0, r3
 8001f74:	f002 fe3c 	bl	8004bf0 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001f78:	4b7e      	ldr	r3, [pc, #504]	@ (8002174 <main+0x304>)
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f002 fe37 	bl	8004bf0 <HAL_TIM_PWM_Start>

					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001f82:	4b7c      	ldr	r3, [pc, #496]	@ (8002174 <main+0x304>)
 8001f84:	2108      	movs	r1, #8
 8001f86:	0018      	movs	r0, r3
 8001f88:	f002 fe32 	bl	8004bf0 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001f8c:	4b79      	ldr	r3, [pc, #484]	@ (8002174 <main+0x304>)
 8001f8e:	210c      	movs	r1, #12
 8001f90:	0018      	movs	r0, r3
 8001f92:	f002 fe2d 	bl	8004bf0 <HAL_TIM_PWM_Start>

					HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001f96:	4b78      	ldr	r3, [pc, #480]	@ (8002178 <main+0x308>)
 8001f98:	2100      	movs	r1, #0
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f002 fe28 	bl	8004bf0 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8001fa0:	4b75      	ldr	r3, [pc, #468]	@ (8002178 <main+0x308>)
 8001fa2:	2104      	movs	r1, #4
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f002 fe23 	bl	8004bf0 <HAL_TIM_PWM_Start>
 8001faa:	e054      	b.n	8002056 <main+0x1e6>
				}
				else if(motorSelect1){
 8001fac:	4b6e      	ldr	r3, [pc, #440]	@ (8002168 <main+0x2f8>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d050      	beq.n	8002056 <main+0x1e6>
					//ASYNC
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001fb4:	4b6f      	ldr	r3, [pc, #444]	@ (8002174 <main+0x304>)
 8001fb6:	2108      	movs	r1, #8
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f002 fe19 	bl	8004bf0 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001fbe:	4b6d      	ldr	r3, [pc, #436]	@ (8002174 <main+0x304>)
 8001fc0:	210c      	movs	r1, #12
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f002 fe14 	bl	8004bf0 <HAL_TIM_PWM_Start>

					usDelay(333);
 8001fc8:	234e      	movs	r3, #78	@ 0x4e
 8001fca:	33ff      	adds	r3, #255	@ 0xff
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f000 fd47 	bl	8002a60 <usDelay>
					//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
					//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
					//FIX for 3 phase use TIM16 and TIM17
					HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001fd2:	4b6a      	ldr	r3, [pc, #424]	@ (800217c <main+0x30c>)
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f002 fe0a 	bl	8004bf0 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001fdc:	4b68      	ldr	r3, [pc, #416]	@ (8002180 <main+0x310>)
 8001fde:	2100      	movs	r1, #0
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f002 fe05 	bl	8004bf0 <HAL_TIM_PWM_Start>

					usDelay(333);
 8001fe6:	234e      	movs	r3, #78	@ 0x4e
 8001fe8:	33ff      	adds	r3, #255	@ 0xff
 8001fea:	0018      	movs	r0, r3
 8001fec:	f000 fd38 	bl	8002a60 <usDelay>
					HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001ff0:	4b61      	ldr	r3, [pc, #388]	@ (8002178 <main+0x308>)
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f002 fdfb 	bl	8004bf0 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8001ffa:	4b5f      	ldr	r3, [pc, #380]	@ (8002178 <main+0x308>)
 8001ffc:	2104      	movs	r1, #4
 8001ffe:	0018      	movs	r0, r3
 8002000:	f002 fdf6 	bl	8004bf0 <HAL_TIM_PWM_Start>
 8002004:	e027      	b.n	8002056 <main+0x1e6>

				}
			}
			else{
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002006:	4b5b      	ldr	r3, [pc, #364]	@ (8002174 <main+0x304>)
 8002008:	2100      	movs	r1, #0
 800200a:	0018      	movs	r0, r3
 800200c:	f002 fea2 	bl	8004d54 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8002010:	4b58      	ldr	r3, [pc, #352]	@ (8002174 <main+0x304>)
 8002012:	2104      	movs	r1, #4
 8002014:	0018      	movs	r0, r3
 8002016:	f002 fe9d 	bl	8004d54 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 800201a:	4b56      	ldr	r3, [pc, #344]	@ (8002174 <main+0x304>)
 800201c:	2108      	movs	r1, #8
 800201e:	0018      	movs	r0, r3
 8002020:	f002 fe98 	bl	8004d54 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8002024:	4b53      	ldr	r3, [pc, #332]	@ (8002174 <main+0x304>)
 8002026:	210c      	movs	r1, #12
 8002028:	0018      	movs	r0, r3
 800202a:	f002 fe93 	bl	8004d54 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 800202e:	4b52      	ldr	r3, [pc, #328]	@ (8002178 <main+0x308>)
 8002030:	2100      	movs	r1, #0
 8002032:	0018      	movs	r0, r3
 8002034:	f002 fe8e 	bl	8004d54 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8002038:	4b4f      	ldr	r3, [pc, #316]	@ (8002178 <main+0x308>)
 800203a:	2104      	movs	r1, #4
 800203c:	0018      	movs	r0, r3
 800203e:	f002 fe89 	bl	8004d54 <HAL_TIM_PWM_Stop>

				HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8002042:	4b4e      	ldr	r3, [pc, #312]	@ (800217c <main+0x30c>)
 8002044:	2100      	movs	r1, #0
 8002046:	0018      	movs	r0, r3
 8002048:	f002 fe84 	bl	8004d54 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 800204c:	4b4c      	ldr	r3, [pc, #304]	@ (8002180 <main+0x310>)
 800204e:	2100      	movs	r1, #0
 8002050:	0018      	movs	r0, r3
 8002052:	f002 fe7f 	bl	8004d54 <HAL_TIM_PWM_Stop>
			}
		}
		startStopPrev = startStop;
 8002056:	4b3e      	ldr	r3, [pc, #248]	@ (8002150 <main+0x2e0>)
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	4b45      	ldr	r3, [pc, #276]	@ (8002170 <main+0x300>)
 800205c:	701a      	strb	r2, [r3, #0]

		if (startStop != GPIO_PIN_RESET) {
 800205e:	4b3c      	ldr	r3, [pc, #240]	@ (8002150 <main+0x2e0>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d062      	beq.n	800212c <main+0x2bc>
			// If ASYNC motor selected
			if (motorSelect1 == GPIO_PIN_SET && motorSelect2 == GPIO_PIN_RESET) {
 8002066:	4b40      	ldr	r3, [pc, #256]	@ (8002168 <main+0x2f8>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d118      	bne.n	80020a0 <main+0x230>
 800206e:	4b3f      	ldr	r3, [pc, #252]	@ (800216c <main+0x2fc>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d114      	bne.n	80020a0 <main+0x230>
				//set speed and direction
				SetMotorSpeedAndDirection_3Phase(potValuePercent, motorDirection);
 8002076:	4b3a      	ldr	r3, [pc, #232]	@ (8002160 <main+0x2f0>)
 8002078:	781a      	ldrb	r2, [r3, #0]
 800207a:	1dfb      	adds	r3, r7, #7
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	0011      	movs	r1, r2
 8002080:	0018      	movs	r0, r3
 8002082:	f7ff fb3d 	bl	8001700 <SetMotorSpeedAndDirection_3Phase>

				// Update LEDs
				HAL_GPIO_WritePin(LED_MOTOR1_GPIO_Port, LED_MOTOR1_Pin, GPIO_PIN_SET);
 8002086:	4b3f      	ldr	r3, [pc, #252]	@ (8002184 <main+0x314>)
 8002088:	2201      	movs	r2, #1
 800208a:	2101      	movs	r1, #1
 800208c:	0018      	movs	r0, r3
 800208e:	f001 fe44 	bl	8003d1a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_MOTOR2_GPIO_Port, LED_MOTOR2_Pin, GPIO_PIN_RESET);
 8002092:	4b3c      	ldr	r3, [pc, #240]	@ (8002184 <main+0x314>)
 8002094:	2200      	movs	r2, #0
 8002096:	2102      	movs	r1, #2
 8002098:	0018      	movs	r0, r3
 800209a:	f001 fe3e 	bl	8003d1a <HAL_GPIO_WritePin>
 800209e:	e02b      	b.n	80020f8 <main+0x288>
			}
			// If DC motor selected
			else if (motorSelect1 == GPIO_PIN_RESET && motorSelect2 == GPIO_PIN_SET) {
 80020a0:	4b31      	ldr	r3, [pc, #196]	@ (8002168 <main+0x2f8>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d127      	bne.n	80020f8 <main+0x288>
 80020a8:	4b30      	ldr	r3, [pc, #192]	@ (800216c <main+0x2fc>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d123      	bne.n	80020f8 <main+0x288>
				//set speed and direction
				SetMotorSpeedAndDirection_DC(potValuePercent, motorDirection, 1);
 80020b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002160 <main+0x2f0>)
 80020b2:	7819      	ldrb	r1, [r3, #0]
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2201      	movs	r2, #1
 80020ba:	0018      	movs	r0, r3
 80020bc:	f7ff fa64 	bl	8001588 <SetMotorSpeedAndDirection_DC>
				SetMotorSpeedAndDirection_DC(potValuePercent, motorDirection, 2);
 80020c0:	4b27      	ldr	r3, [pc, #156]	@ (8002160 <main+0x2f0>)
 80020c2:	7819      	ldrb	r1, [r3, #0]
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2202      	movs	r2, #2
 80020ca:	0018      	movs	r0, r3
 80020cc:	f7ff fa5c 	bl	8001588 <SetMotorSpeedAndDirection_DC>
				SetMotorSpeedAndDirection_DC(potValuePercent, motorDirection, 3);
 80020d0:	4b23      	ldr	r3, [pc, #140]	@ (8002160 <main+0x2f0>)
 80020d2:	7819      	ldrb	r1, [r3, #0]
 80020d4:	1dfb      	adds	r3, r7, #7
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2203      	movs	r2, #3
 80020da:	0018      	movs	r0, r3
 80020dc:	f7ff fa54 	bl	8001588 <SetMotorSpeedAndDirection_DC>

				// Update LEDs
				HAL_GPIO_WritePin(LED_MOTOR1_GPIO_Port, LED_MOTOR1_Pin, GPIO_PIN_RESET);
 80020e0:	4b28      	ldr	r3, [pc, #160]	@ (8002184 <main+0x314>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	2101      	movs	r1, #1
 80020e6:	0018      	movs	r0, r3
 80020e8:	f001 fe17 	bl	8003d1a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_MOTOR2_GPIO_Port, LED_MOTOR2_Pin, GPIO_PIN_SET);
 80020ec:	4b25      	ldr	r3, [pc, #148]	@ (8002184 <main+0x314>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	2102      	movs	r1, #2
 80020f2:	0018      	movs	r0, r3
 80020f4:	f001 fe11 	bl	8003d1a <HAL_GPIO_WritePin>
			}

			sprintf(uartBuffer, "\r\nMOTOR SELECT 1 = %d\tMOTOR SELECT 2 = %d\tWith speed of %d%% \r\n", motorSelect1, motorSelect2, potValuePercent);
 80020f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002168 <main+0x2f8>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	001a      	movs	r2, r3
 80020fe:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <main+0x2fc>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	001c      	movs	r4, r3
 8002104:	1dfb      	adds	r3, r7, #7
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	491f      	ldr	r1, [pc, #124]	@ (8002188 <main+0x318>)
 800210a:	4820      	ldr	r0, [pc, #128]	@ (800218c <main+0x31c>)
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	0023      	movs	r3, r4
 8002110:	f003 ff20 	bl	8005f54 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8002114:	4b1d      	ldr	r3, [pc, #116]	@ (800218c <main+0x31c>)
 8002116:	0018      	movs	r0, r3
 8002118:	f7fd fff6 	bl	8000108 <strlen>
 800211c:	0003      	movs	r3, r0
 800211e:	b29a      	uxth	r2, r3
 8002120:	2301      	movs	r3, #1
 8002122:	425b      	negs	r3, r3
 8002124:	4919      	ldr	r1, [pc, #100]	@ (800218c <main+0x31c>)
 8002126:	481a      	ldr	r0, [pc, #104]	@ (8002190 <main+0x320>)
 8002128:	f003 fb04 	bl	8005734 <HAL_UART_Transmit>
		}

		//-----------------------------------------------------------------------------------------------------

		//READ ERROR IN
		errorIn = HAL_GPIO_ReadPin(ERROR_IN_GPIO_Port, ERROR_IN_Pin);
 800212c:	2380      	movs	r3, #128	@ 0x80
 800212e:	015b      	lsls	r3, r3, #5
 8002130:	4a14      	ldr	r2, [pc, #80]	@ (8002184 <main+0x314>)
 8002132:	0019      	movs	r1, r3
 8002134:	0010      	movs	r0, r2
 8002136:	f001 fdd3 	bl	8003ce0 <HAL_GPIO_ReadPin>
 800213a:	0003      	movs	r3, r0
 800213c:	001a      	movs	r2, r3
 800213e:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <main+0x324>)
 8002140:	701a      	strb	r2, [r3, #0]
	{
 8002142:	e6c1      	b.n	8001ec8 <main+0x58>
 8002144:	20000154 	.word	0x20000154
 8002148:	0000ffff 	.word	0x0000ffff
 800214c:	48000800 	.word	0x48000800
 8002150:	200002fc 	.word	0x200002fc
 8002154:	20000304 	.word	0x20000304
 8002158:	47ae147b 	.word	0x47ae147b
 800215c:	40047ae1 	.word	0x40047ae1
 8002160:	20000300 	.word	0x20000300
 8002164:	48001400 	.word	0x48001400
 8002168:	200002fe 	.word	0x200002fe
 800216c:	200002ff 	.word	0x200002ff
 8002170:	200002fd 	.word	0x200002fd
 8002174:	2000010c 	.word	0x2000010c
 8002178:	2000019c 	.word	0x2000019c
 800217c:	200001e4 	.word	0x200001e4
 8002180:	2000022c 	.word	0x2000022c
 8002184:	48000400 	.word	0x48000400
 8002188:	08007914 	.word	0x08007914
 800218c:	2000030c 	.word	0x2000030c
 8002190:	20000274 	.word	0x20000274
 8002194:	20000308 	.word	0x20000308

08002198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b095      	sub	sp, #84	@ 0x54
 800219c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800219e:	2420      	movs	r4, #32
 80021a0:	193b      	adds	r3, r7, r4
 80021a2:	0018      	movs	r0, r3
 80021a4:	2330      	movs	r3, #48	@ 0x30
 80021a6:	001a      	movs	r2, r3
 80021a8:	2100      	movs	r1, #0
 80021aa:	f003 fef3 	bl	8005f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021ae:	2310      	movs	r3, #16
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	0018      	movs	r0, r3
 80021b4:	2310      	movs	r3, #16
 80021b6:	001a      	movs	r2, r3
 80021b8:	2100      	movs	r1, #0
 80021ba:	f003 feeb 	bl	8005f94 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021be:	003b      	movs	r3, r7
 80021c0:	0018      	movs	r0, r3
 80021c2:	2310      	movs	r3, #16
 80021c4:	001a      	movs	r2, r3
 80021c6:	2100      	movs	r1, #0
 80021c8:	f003 fee4 	bl	8005f94 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80021cc:	0021      	movs	r1, r4
 80021ce:	187b      	adds	r3, r7, r1
 80021d0:	2212      	movs	r2, #18
 80021d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021d4:	187b      	adds	r3, r7, r1
 80021d6:	2201      	movs	r2, #1
 80021d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80021da:	187b      	adds	r3, r7, r1
 80021dc:	2201      	movs	r2, #1
 80021de:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021e0:	187b      	adds	r3, r7, r1
 80021e2:	2210      	movs	r2, #16
 80021e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80021e6:	187b      	adds	r3, r7, r1
 80021e8:	2210      	movs	r2, #16
 80021ea:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ec:	187b      	adds	r3, r7, r1
 80021ee:	2202      	movs	r2, #2
 80021f0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021f2:	187b      	adds	r3, r7, r1
 80021f4:	2200      	movs	r2, #0
 80021f6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80021f8:	187b      	adds	r3, r7, r1
 80021fa:	22a0      	movs	r2, #160	@ 0xa0
 80021fc:	0392      	lsls	r2, r2, #14
 80021fe:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002200:	187b      	adds	r3, r7, r1
 8002202:	2200      	movs	r2, #0
 8002204:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002206:	187b      	adds	r3, r7, r1
 8002208:	0018      	movs	r0, r3
 800220a:	f001 fee1 	bl	8003fd0 <HAL_RCC_OscConfig>
 800220e:	1e03      	subs	r3, r0, #0
 8002210:	d001      	beq.n	8002216 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002212:	f000 fc3f 	bl	8002a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002216:	2110      	movs	r1, #16
 8002218:	187b      	adds	r3, r7, r1
 800221a:	2207      	movs	r2, #7
 800221c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800221e:	187b      	adds	r3, r7, r1
 8002220:	2202      	movs	r2, #2
 8002222:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002224:	187b      	adds	r3, r7, r1
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800222a:	187b      	adds	r3, r7, r1
 800222c:	2200      	movs	r2, #0
 800222e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002230:	187b      	adds	r3, r7, r1
 8002232:	2101      	movs	r1, #1
 8002234:	0018      	movs	r0, r3
 8002236:	f002 f9e5 	bl	8004604 <HAL_RCC_ClockConfig>
 800223a:	1e03      	subs	r3, r0, #0
 800223c:	d001      	beq.n	8002242 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800223e:	f000 fc29 	bl	8002a94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002242:	003b      	movs	r3, r7
 8002244:	2221      	movs	r2, #33	@ 0x21
 8002246:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002248:	003b      	movs	r3, r7
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800224e:	003b      	movs	r3, r7
 8002250:	2200      	movs	r2, #0
 8002252:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002254:	003b      	movs	r3, r7
 8002256:	0018      	movs	r0, r3
 8002258:	f002 fb18 	bl	800488c <HAL_RCCEx_PeriphCLKConfig>
 800225c:	1e03      	subs	r3, r0, #0
 800225e:	d001      	beq.n	8002264 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002260:	f000 fc18 	bl	8002a94 <Error_Handler>
  }
}
 8002264:	46c0      	nop			@ (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b015      	add	sp, #84	@ 0x54
 800226a:	bd90      	pop	{r4, r7, pc}

0800226c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	0018      	movs	r0, r3
 8002276:	230c      	movs	r3, #12
 8002278:	001a      	movs	r2, r3
 800227a:	2100      	movs	r1, #0
 800227c:	f003 fe8a 	bl	8005f94 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002280:	4b26      	ldr	r3, [pc, #152]	@ (800231c <MX_ADC_Init+0xb0>)
 8002282:	4a27      	ldr	r2, [pc, #156]	@ (8002320 <MX_ADC_Init+0xb4>)
 8002284:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002286:	4b25      	ldr	r3, [pc, #148]	@ (800231c <MX_ADC_Init+0xb0>)
 8002288:	2200      	movs	r2, #0
 800228a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 800228c:	4b23      	ldr	r3, [pc, #140]	@ (800231c <MX_ADC_Init+0xb0>)
 800228e:	2210      	movs	r2, #16
 8002290:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002292:	4b22      	ldr	r3, [pc, #136]	@ (800231c <MX_ADC_Init+0xb0>)
 8002294:	2200      	movs	r2, #0
 8002296:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002298:	4b20      	ldr	r3, [pc, #128]	@ (800231c <MX_ADC_Init+0xb0>)
 800229a:	2201      	movs	r2, #1
 800229c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800229e:	4b1f      	ldr	r3, [pc, #124]	@ (800231c <MX_ADC_Init+0xb0>)
 80022a0:	2204      	movs	r2, #4
 80022a2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80022a4:	4b1d      	ldr	r3, [pc, #116]	@ (800231c <MX_ADC_Init+0xb0>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80022aa:	4b1c      	ldr	r3, [pc, #112]	@ (800231c <MX_ADC_Init+0xb0>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80022b0:	4b1a      	ldr	r3, [pc, #104]	@ (800231c <MX_ADC_Init+0xb0>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80022b6:	4b19      	ldr	r3, [pc, #100]	@ (800231c <MX_ADC_Init+0xb0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022bc:	4b17      	ldr	r3, [pc, #92]	@ (800231c <MX_ADC_Init+0xb0>)
 80022be:	22c2      	movs	r2, #194	@ 0xc2
 80022c0:	32ff      	adds	r2, #255	@ 0xff
 80022c2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022c4:	4b15      	ldr	r3, [pc, #84]	@ (800231c <MX_ADC_Init+0xb0>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80022ca:	4b14      	ldr	r3, [pc, #80]	@ (800231c <MX_ADC_Init+0xb0>)
 80022cc:	2224      	movs	r2, #36	@ 0x24
 80022ce:	2100      	movs	r1, #0
 80022d0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022d2:	4b12      	ldr	r3, [pc, #72]	@ (800231c <MX_ADC_Init+0xb0>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80022d8:	4b10      	ldr	r3, [pc, #64]	@ (800231c <MX_ADC_Init+0xb0>)
 80022da:	0018      	movs	r0, r3
 80022dc:	f000 ff2a 	bl	8003134 <HAL_ADC_Init>
 80022e0:	1e03      	subs	r3, r0, #0
 80022e2:	d001      	beq.n	80022e8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80022e4:	f000 fbd6 	bl	8002a94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	2202      	movs	r2, #2
 80022ec:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80022ee:	1d3b      	adds	r3, r7, #4
 80022f0:	2280      	movs	r2, #128	@ 0x80
 80022f2:	0152      	lsls	r2, r2, #5
 80022f4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	2280      	movs	r2, #128	@ 0x80
 80022fa:	0552      	lsls	r2, r2, #21
 80022fc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80022fe:	1d3a      	adds	r2, r7, #4
 8002300:	4b06      	ldr	r3, [pc, #24]	@ (800231c <MX_ADC_Init+0xb0>)
 8002302:	0011      	movs	r1, r2
 8002304:	0018      	movs	r0, r3
 8002306:	f001 f94d 	bl	80035a4 <HAL_ADC_ConfigChannel>
 800230a:	1e03      	subs	r3, r0, #0
 800230c:	d001      	beq.n	8002312 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800230e:	f000 fbc1 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	b004      	add	sp, #16
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	20000078 	.word	0x20000078
 8002320:	40012400 	.word	0x40012400

08002324 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002328:	4b1b      	ldr	r3, [pc, #108]	@ (8002398 <MX_I2C1_Init+0x74>)
 800232a:	4a1c      	ldr	r2, [pc, #112]	@ (800239c <MX_I2C1_Init+0x78>)
 800232c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800232e:	4b1a      	ldr	r3, [pc, #104]	@ (8002398 <MX_I2C1_Init+0x74>)
 8002330:	4a1b      	ldr	r2, [pc, #108]	@ (80023a0 <MX_I2C1_Init+0x7c>)
 8002332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002334:	4b18      	ldr	r3, [pc, #96]	@ (8002398 <MX_I2C1_Init+0x74>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800233a:	4b17      	ldr	r3, [pc, #92]	@ (8002398 <MX_I2C1_Init+0x74>)
 800233c:	2201      	movs	r2, #1
 800233e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002340:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <MX_I2C1_Init+0x74>)
 8002342:	2200      	movs	r2, #0
 8002344:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002346:	4b14      	ldr	r3, [pc, #80]	@ (8002398 <MX_I2C1_Init+0x74>)
 8002348:	2200      	movs	r2, #0
 800234a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800234c:	4b12      	ldr	r3, [pc, #72]	@ (8002398 <MX_I2C1_Init+0x74>)
 800234e:	2200      	movs	r2, #0
 8002350:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002352:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <MX_I2C1_Init+0x74>)
 8002354:	2200      	movs	r2, #0
 8002356:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002358:	4b0f      	ldr	r3, [pc, #60]	@ (8002398 <MX_I2C1_Init+0x74>)
 800235a:	2200      	movs	r2, #0
 800235c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800235e:	4b0e      	ldr	r3, [pc, #56]	@ (8002398 <MX_I2C1_Init+0x74>)
 8002360:	0018      	movs	r0, r3
 8002362:	f001 fcf7 	bl	8003d54 <HAL_I2C_Init>
 8002366:	1e03      	subs	r3, r0, #0
 8002368:	d001      	beq.n	800236e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800236a:	f000 fb93 	bl	8002a94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800236e:	4b0a      	ldr	r3, [pc, #40]	@ (8002398 <MX_I2C1_Init+0x74>)
 8002370:	2100      	movs	r1, #0
 8002372:	0018      	movs	r0, r3
 8002374:	f001 fd94 	bl	8003ea0 <HAL_I2CEx_ConfigAnalogFilter>
 8002378:	1e03      	subs	r3, r0, #0
 800237a:	d001      	beq.n	8002380 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800237c:	f000 fb8a 	bl	8002a94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002380:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <MX_I2C1_Init+0x74>)
 8002382:	2100      	movs	r1, #0
 8002384:	0018      	movs	r0, r3
 8002386:	f001 fdd7 	bl	8003f38 <HAL_I2CEx_ConfigDigitalFilter>
 800238a:	1e03      	subs	r3, r0, #0
 800238c:	d001      	beq.n	8002392 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800238e:	f000 fb81 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002392:	46c0      	nop			@ (mov r8, r8)
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	200000b8 	.word	0x200000b8
 800239c:	40005400 	.word	0x40005400
 80023a0:	2000090e 	.word	0x2000090e

080023a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	@ 0x28
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023aa:	2320      	movs	r3, #32
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	0018      	movs	r0, r3
 80023b0:	2308      	movs	r3, #8
 80023b2:	001a      	movs	r2, r3
 80023b4:	2100      	movs	r1, #0
 80023b6:	f003 fded 	bl	8005f94 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	0018      	movs	r0, r3
 80023be:	231c      	movs	r3, #28
 80023c0:	001a      	movs	r2, r3
 80023c2:	2100      	movs	r1, #0
 80023c4:	f003 fde6 	bl	8005f94 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023c8:	4b33      	ldr	r3, [pc, #204]	@ (8002498 <MX_TIM3_Init+0xf4>)
 80023ca:	4a34      	ldr	r2, [pc, #208]	@ (800249c <MX_TIM3_Init+0xf8>)
 80023cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 80023ce:	4b32      	ldr	r3, [pc, #200]	@ (8002498 <MX_TIM3_Init+0xf4>)
 80023d0:	22f4      	movs	r2, #244	@ 0xf4
 80023d2:	32ff      	adds	r2, #255	@ 0xff
 80023d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d6:	4b30      	ldr	r3, [pc, #192]	@ (8002498 <MX_TIM3_Init+0xf4>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80023dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002498 <MX_TIM3_Init+0xf4>)
 80023de:	2263      	movs	r2, #99	@ 0x63
 80023e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002498 <MX_TIM3_Init+0xf4>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002498 <MX_TIM3_Init+0xf4>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002498 <MX_TIM3_Init+0xf4>)
 80023f0:	0018      	movs	r0, r3
 80023f2:	f002 fbad 	bl	8004b50 <HAL_TIM_PWM_Init>
 80023f6:	1e03      	subs	r3, r0, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80023fa:	f000 fb4b 	bl	8002a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023fe:	2120      	movs	r1, #32
 8002400:	187b      	adds	r3, r7, r1
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002406:	187b      	adds	r3, r7, r1
 8002408:	2200      	movs	r2, #0
 800240a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800240c:	187a      	adds	r2, r7, r1
 800240e:	4b22      	ldr	r3, [pc, #136]	@ (8002498 <MX_TIM3_Init+0xf4>)
 8002410:	0011      	movs	r1, r2
 8002412:	0018      	movs	r0, r3
 8002414:	f003 f884 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 8002418:	1e03      	subs	r3, r0, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800241c:	f000 fb3a 	bl	8002a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	2260      	movs	r2, #96	@ 0x60
 8002424:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	2200      	movs	r2, #0
 800242a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800242c:	1d3b      	adds	r3, r7, #4
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002438:	1d39      	adds	r1, r7, #4
 800243a:	4b17      	ldr	r3, [pc, #92]	@ (8002498 <MX_TIM3_Init+0xf4>)
 800243c:	2200      	movs	r2, #0
 800243e:	0018      	movs	r0, r3
 8002440:	f002 fd04 	bl	8004e4c <HAL_TIM_PWM_ConfigChannel>
 8002444:	1e03      	subs	r3, r0, #0
 8002446:	d001      	beq.n	800244c <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8002448:	f000 fb24 	bl	8002a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800244c:	1d39      	adds	r1, r7, #4
 800244e:	4b12      	ldr	r3, [pc, #72]	@ (8002498 <MX_TIM3_Init+0xf4>)
 8002450:	2204      	movs	r2, #4
 8002452:	0018      	movs	r0, r3
 8002454:	f002 fcfa 	bl	8004e4c <HAL_TIM_PWM_ConfigChannel>
 8002458:	1e03      	subs	r3, r0, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 800245c:	f000 fb1a 	bl	8002a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002460:	1d39      	adds	r1, r7, #4
 8002462:	4b0d      	ldr	r3, [pc, #52]	@ (8002498 <MX_TIM3_Init+0xf4>)
 8002464:	2208      	movs	r2, #8
 8002466:	0018      	movs	r0, r3
 8002468:	f002 fcf0 	bl	8004e4c <HAL_TIM_PWM_ConfigChannel>
 800246c:	1e03      	subs	r3, r0, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002470:	f000 fb10 	bl	8002a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002474:	1d39      	adds	r1, r7, #4
 8002476:	4b08      	ldr	r3, [pc, #32]	@ (8002498 <MX_TIM3_Init+0xf4>)
 8002478:	220c      	movs	r2, #12
 800247a:	0018      	movs	r0, r3
 800247c:	f002 fce6 	bl	8004e4c <HAL_TIM_PWM_ConfigChannel>
 8002480:	1e03      	subs	r3, r0, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8002484:	f000 fb06 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002488:	4b03      	ldr	r3, [pc, #12]	@ (8002498 <MX_TIM3_Init+0xf4>)
 800248a:	0018      	movs	r0, r3
 800248c:	f000 fc40 	bl	8002d10 <HAL_TIM_MspPostInit>

}
 8002490:	46c0      	nop			@ (mov r8, r8)
 8002492:	46bd      	mov	sp, r7
 8002494:	b00a      	add	sp, #40	@ 0x28
 8002496:	bd80      	pop	{r7, pc}
 8002498:	2000010c 	.word	0x2000010c
 800249c:	40000400 	.word	0x40000400

080024a0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80024a4:	4b0e      	ldr	r3, [pc, #56]	@ (80024e0 <MX_TIM14_Init+0x40>)
 80024a6:	4a0f      	ldr	r2, [pc, #60]	@ (80024e4 <MX_TIM14_Init+0x44>)
 80024a8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1-1;
 80024aa:	4b0d      	ldr	r3, [pc, #52]	@ (80024e0 <MX_TIM14_Init+0x40>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b0:	4b0b      	ldr	r3, [pc, #44]	@ (80024e0 <MX_TIM14_Init+0x40>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0xffff-1;
 80024b6:	4b0a      	ldr	r3, [pc, #40]	@ (80024e0 <MX_TIM14_Init+0x40>)
 80024b8:	4a0b      	ldr	r2, [pc, #44]	@ (80024e8 <MX_TIM14_Init+0x48>)
 80024ba:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024bc:	4b08      	ldr	r3, [pc, #32]	@ (80024e0 <MX_TIM14_Init+0x40>)
 80024be:	2200      	movs	r2, #0
 80024c0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c2:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <MX_TIM14_Init+0x40>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80024c8:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <MX_TIM14_Init+0x40>)
 80024ca:	0018      	movs	r0, r3
 80024cc:	f002 faac 	bl	8004a28 <HAL_TIM_Base_Init>
 80024d0:	1e03      	subs	r3, r0, #0
 80024d2:	d001      	beq.n	80024d8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80024d4:	f000 fade 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80024d8:	46c0      	nop			@ (mov r8, r8)
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	46c0      	nop			@ (mov r8, r8)
 80024e0:	20000154 	.word	0x20000154
 80024e4:	40002000 	.word	0x40002000
 80024e8:	0000fffe 	.word	0x0000fffe

080024ec <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b092      	sub	sp, #72	@ 0x48
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f2:	2340      	movs	r3, #64	@ 0x40
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	0018      	movs	r0, r3
 80024f8:	2308      	movs	r3, #8
 80024fa:	001a      	movs	r2, r3
 80024fc:	2100      	movs	r1, #0
 80024fe:	f003 fd49 	bl	8005f94 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002502:	2324      	movs	r3, #36	@ 0x24
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	0018      	movs	r0, r3
 8002508:	231c      	movs	r3, #28
 800250a:	001a      	movs	r2, r3
 800250c:	2100      	movs	r1, #0
 800250e:	f003 fd41 	bl	8005f94 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002512:	1d3b      	adds	r3, r7, #4
 8002514:	0018      	movs	r0, r3
 8002516:	2320      	movs	r3, #32
 8002518:	001a      	movs	r2, r3
 800251a:	2100      	movs	r1, #0
 800251c:	f003 fd3a 	bl	8005f94 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002520:	4b40      	ldr	r3, [pc, #256]	@ (8002624 <MX_TIM15_Init+0x138>)
 8002522:	4a41      	ldr	r2, [pc, #260]	@ (8002628 <MX_TIM15_Init+0x13c>)
 8002524:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 500-1;
 8002526:	4b3f      	ldr	r3, [pc, #252]	@ (8002624 <MX_TIM15_Init+0x138>)
 8002528:	22f4      	movs	r2, #244	@ 0xf4
 800252a:	32ff      	adds	r2, #255	@ 0xff
 800252c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252e:	4b3d      	ldr	r3, [pc, #244]	@ (8002624 <MX_TIM15_Init+0x138>)
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100-1;
 8002534:	4b3b      	ldr	r3, [pc, #236]	@ (8002624 <MX_TIM15_Init+0x138>)
 8002536:	2263      	movs	r2, #99	@ 0x63
 8002538:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800253a:	4b3a      	ldr	r3, [pc, #232]	@ (8002624 <MX_TIM15_Init+0x138>)
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002540:	4b38      	ldr	r3, [pc, #224]	@ (8002624 <MX_TIM15_Init+0x138>)
 8002542:	2200      	movs	r2, #0
 8002544:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002546:	4b37      	ldr	r3, [pc, #220]	@ (8002624 <MX_TIM15_Init+0x138>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800254c:	4b35      	ldr	r3, [pc, #212]	@ (8002624 <MX_TIM15_Init+0x138>)
 800254e:	0018      	movs	r0, r3
 8002550:	f002 fafe 	bl	8004b50 <HAL_TIM_PWM_Init>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d001      	beq.n	800255c <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8002558:	f000 fa9c 	bl	8002a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255c:	2140      	movs	r1, #64	@ 0x40
 800255e:	187b      	adds	r3, r7, r1
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002564:	187b      	adds	r3, r7, r1
 8002566:	2200      	movs	r2, #0
 8002568:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800256a:	187a      	adds	r2, r7, r1
 800256c:	4b2d      	ldr	r3, [pc, #180]	@ (8002624 <MX_TIM15_Init+0x138>)
 800256e:	0011      	movs	r1, r2
 8002570:	0018      	movs	r0, r3
 8002572:	f002 ffd5 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 8002576:	1e03      	subs	r3, r0, #0
 8002578:	d001      	beq.n	800257e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800257a:	f000 fa8b 	bl	8002a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800257e:	2124      	movs	r1, #36	@ 0x24
 8002580:	187b      	adds	r3, r7, r1
 8002582:	2260      	movs	r2, #96	@ 0x60
 8002584:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002586:	187b      	adds	r3, r7, r1
 8002588:	2200      	movs	r2, #0
 800258a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800258c:	187b      	adds	r3, r7, r1
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002592:	187b      	adds	r3, r7, r1
 8002594:	2200      	movs	r2, #0
 8002596:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002598:	187b      	adds	r3, r7, r1
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800259e:	187b      	adds	r3, r7, r1
 80025a0:	2200      	movs	r2, #0
 80025a2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025a4:	187b      	adds	r3, r7, r1
 80025a6:	2200      	movs	r2, #0
 80025a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025aa:	1879      	adds	r1, r7, r1
 80025ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002624 <MX_TIM15_Init+0x138>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	0018      	movs	r0, r3
 80025b2:	f002 fc4b 	bl	8004e4c <HAL_TIM_PWM_ConfigChannel>
 80025b6:	1e03      	subs	r3, r0, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM15_Init+0xd2>
  {
    Error_Handler();
 80025ba:	f000 fa6b 	bl	8002a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025be:	2324      	movs	r3, #36	@ 0x24
 80025c0:	18f9      	adds	r1, r7, r3
 80025c2:	4b18      	ldr	r3, [pc, #96]	@ (8002624 <MX_TIM15_Init+0x138>)
 80025c4:	2204      	movs	r2, #4
 80025c6:	0018      	movs	r0, r3
 80025c8:	f002 fc40 	bl	8004e4c <HAL_TIM_PWM_ConfigChannel>
 80025cc:	1e03      	subs	r3, r0, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM15_Init+0xe8>
  {
    Error_Handler();
 80025d0:	f000 fa60 	bl	8002a94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025d4:	1d3b      	adds	r3, r7, #4
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	2200      	movs	r2, #0
 80025de:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025e6:	1d3b      	adds	r3, r7, #4
 80025e8:	2200      	movs	r2, #0
 80025ea:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025ec:	1d3b      	adds	r3, r7, #4
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	2280      	movs	r2, #128	@ 0x80
 80025f6:	0192      	lsls	r2, r2, #6
 80025f8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	2200      	movs	r2, #0
 80025fe:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002600:	1d3a      	adds	r2, r7, #4
 8002602:	4b08      	ldr	r3, [pc, #32]	@ (8002624 <MX_TIM15_Init+0x138>)
 8002604:	0011      	movs	r1, r2
 8002606:	0018      	movs	r0, r3
 8002608:	f002 ffe2 	bl	80055d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800260c:	1e03      	subs	r3, r0, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM15_Init+0x128>
  {
    Error_Handler();
 8002610:	f000 fa40 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002614:	4b03      	ldr	r3, [pc, #12]	@ (8002624 <MX_TIM15_Init+0x138>)
 8002616:	0018      	movs	r0, r3
 8002618:	f000 fb7a 	bl	8002d10 <HAL_TIM_MspPostInit>

}
 800261c:	46c0      	nop			@ (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b012      	add	sp, #72	@ 0x48
 8002622:	bd80      	pop	{r7, pc}
 8002624:	2000019c 	.word	0x2000019c
 8002628:	40014000 	.word	0x40014000

0800262c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b090      	sub	sp, #64	@ 0x40
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002632:	2324      	movs	r3, #36	@ 0x24
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	0018      	movs	r0, r3
 8002638:	231c      	movs	r3, #28
 800263a:	001a      	movs	r2, r3
 800263c:	2100      	movs	r1, #0
 800263e:	f003 fca9 	bl	8005f94 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	0018      	movs	r0, r3
 8002646:	2320      	movs	r3, #32
 8002648:	001a      	movs	r2, r3
 800264a:	2100      	movs	r1, #0
 800264c:	f003 fca2 	bl	8005f94 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002650:	4b36      	ldr	r3, [pc, #216]	@ (800272c <MX_TIM16_Init+0x100>)
 8002652:	4a37      	ldr	r2, [pc, #220]	@ (8002730 <MX_TIM16_Init+0x104>)
 8002654:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 500-1;
 8002656:	4b35      	ldr	r3, [pc, #212]	@ (800272c <MX_TIM16_Init+0x100>)
 8002658:	22f4      	movs	r2, #244	@ 0xf4
 800265a:	32ff      	adds	r2, #255	@ 0xff
 800265c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265e:	4b33      	ldr	r3, [pc, #204]	@ (800272c <MX_TIM16_Init+0x100>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100-1;
 8002664:	4b31      	ldr	r3, [pc, #196]	@ (800272c <MX_TIM16_Init+0x100>)
 8002666:	2263      	movs	r2, #99	@ 0x63
 8002668:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266a:	4b30      	ldr	r3, [pc, #192]	@ (800272c <MX_TIM16_Init+0x100>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002670:	4b2e      	ldr	r3, [pc, #184]	@ (800272c <MX_TIM16_Init+0x100>)
 8002672:	2200      	movs	r2, #0
 8002674:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002676:	4b2d      	ldr	r3, [pc, #180]	@ (800272c <MX_TIM16_Init+0x100>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800267c:	4b2b      	ldr	r3, [pc, #172]	@ (800272c <MX_TIM16_Init+0x100>)
 800267e:	0018      	movs	r0, r3
 8002680:	f002 f9d2 	bl	8004a28 <HAL_TIM_Base_Init>
 8002684:	1e03      	subs	r3, r0, #0
 8002686:	d001      	beq.n	800268c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8002688:	f000 fa04 	bl	8002a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800268c:	4b27      	ldr	r3, [pc, #156]	@ (800272c <MX_TIM16_Init+0x100>)
 800268e:	0018      	movs	r0, r3
 8002690:	f002 fa5e 	bl	8004b50 <HAL_TIM_PWM_Init>
 8002694:	1e03      	subs	r3, r0, #0
 8002696:	d001      	beq.n	800269c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8002698:	f000 f9fc 	bl	8002a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800269c:	2124      	movs	r1, #36	@ 0x24
 800269e:	187b      	adds	r3, r7, r1
 80026a0:	2260      	movs	r2, #96	@ 0x60
 80026a2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80026a4:	187b      	adds	r3, r7, r1
 80026a6:	2200      	movs	r2, #0
 80026a8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026aa:	187b      	adds	r3, r7, r1
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026b0:	187b      	adds	r3, r7, r1
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	2200      	movs	r2, #0
 80026c0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026c8:	1879      	adds	r1, r7, r1
 80026ca:	4b18      	ldr	r3, [pc, #96]	@ (800272c <MX_TIM16_Init+0x100>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	0018      	movs	r0, r3
 80026d0:	f002 fbbc 	bl	8004e4c <HAL_TIM_PWM_ConfigChannel>
 80026d4:	1e03      	subs	r3, r0, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 80026d8:	f000 f9dc 	bl	8002a94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	2200      	movs	r2, #0
 80026e6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	2200      	movs	r2, #0
 80026f2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	2200      	movs	r2, #0
 80026f8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	2280      	movs	r2, #128	@ 0x80
 80026fe:	0192      	lsls	r2, r2, #6
 8002700:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002702:	1d3b      	adds	r3, r7, #4
 8002704:	2200      	movs	r2, #0
 8002706:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002708:	1d3a      	adds	r2, r7, #4
 800270a:	4b08      	ldr	r3, [pc, #32]	@ (800272c <MX_TIM16_Init+0x100>)
 800270c:	0011      	movs	r1, r2
 800270e:	0018      	movs	r0, r3
 8002710:	f002 ff5e 	bl	80055d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002714:	1e03      	subs	r3, r0, #0
 8002716:	d001      	beq.n	800271c <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8002718:	f000 f9bc 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800271c:	4b03      	ldr	r3, [pc, #12]	@ (800272c <MX_TIM16_Init+0x100>)
 800271e:	0018      	movs	r0, r3
 8002720:	f000 faf6 	bl	8002d10 <HAL_TIM_MspPostInit>

}
 8002724:	46c0      	nop			@ (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	b010      	add	sp, #64	@ 0x40
 800272a:	bd80      	pop	{r7, pc}
 800272c:	200001e4 	.word	0x200001e4
 8002730:	40014400 	.word	0x40014400

08002734 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b090      	sub	sp, #64	@ 0x40
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800273a:	2324      	movs	r3, #36	@ 0x24
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	0018      	movs	r0, r3
 8002740:	231c      	movs	r3, #28
 8002742:	001a      	movs	r2, r3
 8002744:	2100      	movs	r1, #0
 8002746:	f003 fc25 	bl	8005f94 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	0018      	movs	r0, r3
 800274e:	2320      	movs	r3, #32
 8002750:	001a      	movs	r2, r3
 8002752:	2100      	movs	r1, #0
 8002754:	f003 fc1e 	bl	8005f94 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002758:	4b36      	ldr	r3, [pc, #216]	@ (8002834 <MX_TIM17_Init+0x100>)
 800275a:	4a37      	ldr	r2, [pc, #220]	@ (8002838 <MX_TIM17_Init+0x104>)
 800275c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 500-1;
 800275e:	4b35      	ldr	r3, [pc, #212]	@ (8002834 <MX_TIM17_Init+0x100>)
 8002760:	22f4      	movs	r2, #244	@ 0xf4
 8002762:	32ff      	adds	r2, #255	@ 0xff
 8002764:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002766:	4b33      	ldr	r3, [pc, #204]	@ (8002834 <MX_TIM17_Init+0x100>)
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100-1;
 800276c:	4b31      	ldr	r3, [pc, #196]	@ (8002834 <MX_TIM17_Init+0x100>)
 800276e:	2263      	movs	r2, #99	@ 0x63
 8002770:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002772:	4b30      	ldr	r3, [pc, #192]	@ (8002834 <MX_TIM17_Init+0x100>)
 8002774:	2200      	movs	r2, #0
 8002776:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002778:	4b2e      	ldr	r3, [pc, #184]	@ (8002834 <MX_TIM17_Init+0x100>)
 800277a:	2200      	movs	r2, #0
 800277c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800277e:	4b2d      	ldr	r3, [pc, #180]	@ (8002834 <MX_TIM17_Init+0x100>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002784:	4b2b      	ldr	r3, [pc, #172]	@ (8002834 <MX_TIM17_Init+0x100>)
 8002786:	0018      	movs	r0, r3
 8002788:	f002 f94e 	bl	8004a28 <HAL_TIM_Base_Init>
 800278c:	1e03      	subs	r3, r0, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8002790:	f000 f980 	bl	8002a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002794:	4b27      	ldr	r3, [pc, #156]	@ (8002834 <MX_TIM17_Init+0x100>)
 8002796:	0018      	movs	r0, r3
 8002798:	f002 f9da 	bl	8004b50 <HAL_TIM_PWM_Init>
 800279c:	1e03      	subs	r3, r0, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 80027a0:	f000 f978 	bl	8002a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027a4:	2124      	movs	r1, #36	@ 0x24
 80027a6:	187b      	adds	r3, r7, r1
 80027a8:	2260      	movs	r2, #96	@ 0x60
 80027aa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80027ac:	187b      	adds	r3, r7, r1
 80027ae:	2200      	movs	r2, #0
 80027b0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027b2:	187b      	adds	r3, r7, r1
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027b8:	187b      	adds	r3, r7, r1
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027be:	187b      	adds	r3, r7, r1
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	2200      	movs	r2, #0
 80027c8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027d0:	1879      	adds	r1, r7, r1
 80027d2:	4b18      	ldr	r3, [pc, #96]	@ (8002834 <MX_TIM17_Init+0x100>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	0018      	movs	r0, r3
 80027d8:	f002 fb38 	bl	8004e4c <HAL_TIM_PWM_ConfigChannel>
 80027dc:	1e03      	subs	r3, r0, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 80027e0:	f000 f958 	bl	8002a94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027e4:	1d3b      	adds	r3, r7, #4
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027ea:	1d3b      	adds	r3, r7, #4
 80027ec:	2200      	movs	r2, #0
 80027ee:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027f0:	1d3b      	adds	r3, r7, #4
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027f6:	1d3b      	adds	r3, r7, #4
 80027f8:	2200      	movs	r2, #0
 80027fa:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	2280      	movs	r2, #128	@ 0x80
 8002806:	0192      	lsls	r2, r2, #6
 8002808:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	2200      	movs	r2, #0
 800280e:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002810:	1d3a      	adds	r2, r7, #4
 8002812:	4b08      	ldr	r3, [pc, #32]	@ (8002834 <MX_TIM17_Init+0x100>)
 8002814:	0011      	movs	r1, r2
 8002816:	0018      	movs	r0, r3
 8002818:	f002 feda 	bl	80055d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800281c:	1e03      	subs	r3, r0, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM17_Init+0xf0>
  {
    Error_Handler();
 8002820:	f000 f938 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002824:	4b03      	ldr	r3, [pc, #12]	@ (8002834 <MX_TIM17_Init+0x100>)
 8002826:	0018      	movs	r0, r3
 8002828:	f000 fa72 	bl	8002d10 <HAL_TIM_MspPostInit>

}
 800282c:	46c0      	nop			@ (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b010      	add	sp, #64	@ 0x40
 8002832:	bd80      	pop	{r7, pc}
 8002834:	2000022c 	.word	0x2000022c
 8002838:	40014800 	.word	0x40014800

0800283c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002840:	4b14      	ldr	r3, [pc, #80]	@ (8002894 <MX_USART1_UART_Init+0x58>)
 8002842:	4a15      	ldr	r2, [pc, #84]	@ (8002898 <MX_USART1_UART_Init+0x5c>)
 8002844:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002846:	4b13      	ldr	r3, [pc, #76]	@ (8002894 <MX_USART1_UART_Init+0x58>)
 8002848:	2296      	movs	r2, #150	@ 0x96
 800284a:	0212      	lsls	r2, r2, #8
 800284c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800284e:	4b11      	ldr	r3, [pc, #68]	@ (8002894 <MX_USART1_UART_Init+0x58>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002854:	4b0f      	ldr	r3, [pc, #60]	@ (8002894 <MX_USART1_UART_Init+0x58>)
 8002856:	2200      	movs	r2, #0
 8002858:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800285a:	4b0e      	ldr	r3, [pc, #56]	@ (8002894 <MX_USART1_UART_Init+0x58>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002860:	4b0c      	ldr	r3, [pc, #48]	@ (8002894 <MX_USART1_UART_Init+0x58>)
 8002862:	220c      	movs	r2, #12
 8002864:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002866:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <MX_USART1_UART_Init+0x58>)
 8002868:	2200      	movs	r2, #0
 800286a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800286c:	4b09      	ldr	r3, [pc, #36]	@ (8002894 <MX_USART1_UART_Init+0x58>)
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002872:	4b08      	ldr	r3, [pc, #32]	@ (8002894 <MX_USART1_UART_Init+0x58>)
 8002874:	2200      	movs	r2, #0
 8002876:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002878:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <MX_USART1_UART_Init+0x58>)
 800287a:	2200      	movs	r2, #0
 800287c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800287e:	4b05      	ldr	r3, [pc, #20]	@ (8002894 <MX_USART1_UART_Init+0x58>)
 8002880:	0018      	movs	r0, r3
 8002882:	f002 ff03 	bl	800568c <HAL_UART_Init>
 8002886:	1e03      	subs	r3, r0, #0
 8002888:	d001      	beq.n	800288e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800288a:	f000 f903 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000274 	.word	0x20000274
 8002898:	40013800 	.word	0x40013800

0800289c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b08b      	sub	sp, #44	@ 0x2c
 80028a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a2:	2414      	movs	r4, #20
 80028a4:	193b      	adds	r3, r7, r4
 80028a6:	0018      	movs	r0, r3
 80028a8:	2314      	movs	r3, #20
 80028aa:	001a      	movs	r2, r3
 80028ac:	2100      	movs	r1, #0
 80028ae:	f003 fb71 	bl	8005f94 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b2:	4b67      	ldr	r3, [pc, #412]	@ (8002a50 <MX_GPIO_Init+0x1b4>)
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	4b66      	ldr	r3, [pc, #408]	@ (8002a50 <MX_GPIO_Init+0x1b4>)
 80028b8:	2180      	movs	r1, #128	@ 0x80
 80028ba:	0309      	lsls	r1, r1, #12
 80028bc:	430a      	orrs	r2, r1
 80028be:	615a      	str	r2, [r3, #20]
 80028c0:	4b63      	ldr	r3, [pc, #396]	@ (8002a50 <MX_GPIO_Init+0x1b4>)
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	2380      	movs	r3, #128	@ 0x80
 80028c6:	031b      	lsls	r3, r3, #12
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028ce:	4b60      	ldr	r3, [pc, #384]	@ (8002a50 <MX_GPIO_Init+0x1b4>)
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	4b5f      	ldr	r3, [pc, #380]	@ (8002a50 <MX_GPIO_Init+0x1b4>)
 80028d4:	2180      	movs	r1, #128	@ 0x80
 80028d6:	03c9      	lsls	r1, r1, #15
 80028d8:	430a      	orrs	r2, r1
 80028da:	615a      	str	r2, [r3, #20]
 80028dc:	4b5c      	ldr	r3, [pc, #368]	@ (8002a50 <MX_GPIO_Init+0x1b4>)
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	2380      	movs	r3, #128	@ 0x80
 80028e2:	03db      	lsls	r3, r3, #15
 80028e4:	4013      	ands	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ea:	4b59      	ldr	r3, [pc, #356]	@ (8002a50 <MX_GPIO_Init+0x1b4>)
 80028ec:	695a      	ldr	r2, [r3, #20]
 80028ee:	4b58      	ldr	r3, [pc, #352]	@ (8002a50 <MX_GPIO_Init+0x1b4>)
 80028f0:	2180      	movs	r1, #128	@ 0x80
 80028f2:	0289      	lsls	r1, r1, #10
 80028f4:	430a      	orrs	r2, r1
 80028f6:	615a      	str	r2, [r3, #20]
 80028f8:	4b55      	ldr	r3, [pc, #340]	@ (8002a50 <MX_GPIO_Init+0x1b4>)
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	2380      	movs	r3, #128	@ 0x80
 80028fe:	029b      	lsls	r3, r3, #10
 8002900:	4013      	ands	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002906:	4b52      	ldr	r3, [pc, #328]	@ (8002a50 <MX_GPIO_Init+0x1b4>)
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	4b51      	ldr	r3, [pc, #324]	@ (8002a50 <MX_GPIO_Init+0x1b4>)
 800290c:	2180      	movs	r1, #128	@ 0x80
 800290e:	02c9      	lsls	r1, r1, #11
 8002910:	430a      	orrs	r2, r1
 8002912:	615a      	str	r2, [r3, #20]
 8002914:	4b4e      	ldr	r3, [pc, #312]	@ (8002a50 <MX_GPIO_Init+0x1b4>)
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	2380      	movs	r3, #128	@ 0x80
 800291a:	02db      	lsls	r3, r3, #11
 800291c:	4013      	ands	r3, r2
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_LEVEL1_Pin|LED_LEVEL4_Pin|LED_LEVEL5_Pin|LED_LINKS_Pin, GPIO_PIN_RESET);
 8002922:	2390      	movs	r3, #144	@ 0x90
 8002924:	05db      	lsls	r3, r3, #23
 8002926:	2200      	movs	r2, #0
 8002928:	21b8      	movs	r1, #184	@ 0xb8
 800292a:	0018      	movs	r0, r3
 800292c:	f001 f9f5 	bl	8003d1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_LEVEL2_Pin|LED_LEVEL3_Pin, GPIO_PIN_RESET);
 8002930:	4b48      	ldr	r3, [pc, #288]	@ (8002a54 <MX_GPIO_Init+0x1b8>)
 8002932:	2200      	movs	r2, #0
 8002934:	2130      	movs	r1, #48	@ 0x30
 8002936:	0018      	movs	r0, r3
 8002938:	f001 f9ef 	bl	8003d1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RECHTS_GPIO_Port, LED_RECHTS_Pin, GPIO_PIN_RESET);
 800293c:	4b46      	ldr	r3, [pc, #280]	@ (8002a58 <MX_GPIO_Init+0x1bc>)
 800293e:	2200      	movs	r2, #0
 8002940:	2110      	movs	r1, #16
 8002942:	0018      	movs	r0, r3
 8002944:	f001 f9e9 	bl	8003d1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_MOTOR1_Pin|LED_MOTOR2_Pin, GPIO_PIN_RESET);
 8002948:	4b44      	ldr	r3, [pc, #272]	@ (8002a5c <MX_GPIO_Init+0x1c0>)
 800294a:	2200      	movs	r2, #0
 800294c:	2103      	movs	r1, #3
 800294e:	0018      	movs	r0, r3
 8002950:	f001 f9e3 	bl	8003d1a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_STOP_Pin MOTOR_LR_Pin */
  GPIO_InitStruct.Pin = START_STOP_Pin|MOTOR_LR_Pin;
 8002954:	193b      	adds	r3, r7, r4
 8002956:	22c0      	movs	r2, #192	@ 0xc0
 8002958:	0212      	lsls	r2, r2, #8
 800295a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800295c:	193b      	adds	r3, r7, r4
 800295e:	2200      	movs	r2, #0
 8002960:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	193b      	adds	r3, r7, r4
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002968:	193b      	adds	r3, r7, r4
 800296a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a58 <MX_GPIO_Init+0x1bc>)
 800296c:	0019      	movs	r1, r3
 800296e:	0010      	movs	r0, r2
 8002970:	f001 f846 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_SELECT1_Pin MOTOR_SELECT2_Pin */
  GPIO_InitStruct.Pin = MOTOR_SELECT1_Pin|MOTOR_SELECT2_Pin;
 8002974:	193b      	adds	r3, r7, r4
 8002976:	2203      	movs	r2, #3
 8002978:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800297a:	193b      	adds	r3, r7, r4
 800297c:	2200      	movs	r2, #0
 800297e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	193b      	adds	r3, r7, r4
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002986:	193b      	adds	r3, r7, r4
 8002988:	4a32      	ldr	r2, [pc, #200]	@ (8002a54 <MX_GPIO_Init+0x1b8>)
 800298a:	0019      	movs	r1, r3
 800298c:	0010      	movs	r0, r2
 800298e:	f001 f837 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_LEVEL1_Pin LED_LEVEL4_Pin LED_LEVEL5_Pin LED_LINKS_Pin */
  GPIO_InitStruct.Pin = LED_LEVEL1_Pin|LED_LEVEL4_Pin|LED_LEVEL5_Pin|LED_LINKS_Pin;
 8002992:	193b      	adds	r3, r7, r4
 8002994:	22b8      	movs	r2, #184	@ 0xb8
 8002996:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002998:	193b      	adds	r3, r7, r4
 800299a:	2201      	movs	r2, #1
 800299c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	193b      	adds	r3, r7, r4
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a4:	193b      	adds	r3, r7, r4
 80029a6:	2200      	movs	r2, #0
 80029a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029aa:	193a      	adds	r2, r7, r4
 80029ac:	2390      	movs	r3, #144	@ 0x90
 80029ae:	05db      	lsls	r3, r3, #23
 80029b0:	0011      	movs	r1, r2
 80029b2:	0018      	movs	r0, r3
 80029b4:	f001 f824 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_LEVEL2_Pin LED_LEVEL3_Pin */
  GPIO_InitStruct.Pin = LED_LEVEL2_Pin|LED_LEVEL3_Pin;
 80029b8:	193b      	adds	r3, r7, r4
 80029ba:	2230      	movs	r2, #48	@ 0x30
 80029bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029be:	193b      	adds	r3, r7, r4
 80029c0:	2201      	movs	r2, #1
 80029c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	193b      	adds	r3, r7, r4
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	193b      	adds	r3, r7, r4
 80029cc:	2200      	movs	r2, #0
 80029ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029d0:	193b      	adds	r3, r7, r4
 80029d2:	4a20      	ldr	r2, [pc, #128]	@ (8002a54 <MX_GPIO_Init+0x1b8>)
 80029d4:	0019      	movs	r1, r3
 80029d6:	0010      	movs	r0, r2
 80029d8:	f001 f812 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RECHTS_Pin */
  GPIO_InitStruct.Pin = LED_RECHTS_Pin;
 80029dc:	193b      	adds	r3, r7, r4
 80029de:	2210      	movs	r2, #16
 80029e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e2:	193b      	adds	r3, r7, r4
 80029e4:	2201      	movs	r2, #1
 80029e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	193b      	adds	r3, r7, r4
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	2200      	movs	r2, #0
 80029f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_RECHTS_GPIO_Port, &GPIO_InitStruct);
 80029f4:	193b      	adds	r3, r7, r4
 80029f6:	4a18      	ldr	r2, [pc, #96]	@ (8002a58 <MX_GPIO_Init+0x1bc>)
 80029f8:	0019      	movs	r1, r3
 80029fa:	0010      	movs	r0, r2
 80029fc:	f001 f800 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_MOTOR1_Pin LED_MOTOR2_Pin */
  GPIO_InitStruct.Pin = LED_MOTOR1_Pin|LED_MOTOR2_Pin;
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	2203      	movs	r2, #3
 8002a04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	2201      	movs	r2, #1
 8002a0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	2200      	movs	r2, #0
 8002a16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a18:	193b      	adds	r3, r7, r4
 8002a1a:	4a10      	ldr	r2, [pc, #64]	@ (8002a5c <MX_GPIO_Init+0x1c0>)
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	0010      	movs	r0, r2
 8002a20:	f000 ffee 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ERROR_IN_Pin */
  GPIO_InitStruct.Pin = ERROR_IN_Pin;
 8002a24:	0021      	movs	r1, r4
 8002a26:	187b      	adds	r3, r7, r1
 8002a28:	2280      	movs	r2, #128	@ 0x80
 8002a2a:	0152      	lsls	r2, r2, #5
 8002a2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a2e:	187b      	adds	r3, r7, r1
 8002a30:	2200      	movs	r2, #0
 8002a32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	187b      	adds	r3, r7, r1
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ERROR_IN_GPIO_Port, &GPIO_InitStruct);
 8002a3a:	187b      	adds	r3, r7, r1
 8002a3c:	4a07      	ldr	r2, [pc, #28]	@ (8002a5c <MX_GPIO_Init+0x1c0>)
 8002a3e:	0019      	movs	r1, r3
 8002a40:	0010      	movs	r0, r2
 8002a42:	f000 ffdd 	bl	8003a00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b00b      	add	sp, #44	@ 0x2c
 8002a4c:	bd90      	pop	{r4, r7, pc}
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	40021000 	.word	0x40021000
 8002a54:	48001400 	.word	0x48001400
 8002a58:	48000800 	.word	0x48000800
 8002a5c:	48000400 	.word	0x48000400

08002a60 <usDelay>:

/* USER CODE BEGIN 4 */

void usDelay(uint16_t delay)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	0002      	movs	r2, r0
 8002a68:	1dbb      	adds	r3, r7, #6
 8002a6a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002a6c:	4b08      	ldr	r3, [pc, #32]	@ (8002a90 <usDelay+0x30>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2200      	movs	r2, #0
 8002a72:	625a      	str	r2, [r3, #36]	@ 0x24

	while (__HAL_TIM_GET_COUNTER(&htim14) < delay);
 8002a74:	46c0      	nop			@ (mov r8, r8)
 8002a76:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <usDelay+0x30>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a7c:	1dbb      	adds	r3, r7, #6
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d3f8      	bcc.n	8002a76 <usDelay+0x16>
}
 8002a84:	46c0      	nop			@ (mov r8, r8)
 8002a86:	46c0      	nop			@ (mov r8, r8)
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b002      	add	sp, #8
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	46c0      	nop			@ (mov r8, r8)
 8002a90:	20000154 	.word	0x20000154

08002a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a98:	b672      	cpsid	i
}
 8002a9a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002a9c:	46c0      	nop			@ (mov r8, r8)
 8002a9e:	e7fd      	b.n	8002a9c <Error_Handler+0x8>

08002aa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae4 <HAL_MspInit+0x44>)
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <HAL_MspInit+0x44>)
 8002aac:	2101      	movs	r1, #1
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	619a      	str	r2, [r3, #24]
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae4 <HAL_MspInit+0x44>)
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	4013      	ands	r3, r2
 8002aba:	607b      	str	r3, [r7, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002abe:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <HAL_MspInit+0x44>)
 8002ac0:	69da      	ldr	r2, [r3, #28]
 8002ac2:	4b08      	ldr	r3, [pc, #32]	@ (8002ae4 <HAL_MspInit+0x44>)
 8002ac4:	2180      	movs	r1, #128	@ 0x80
 8002ac6:	0549      	lsls	r1, r1, #21
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	61da      	str	r2, [r3, #28]
 8002acc:	4b05      	ldr	r3, [pc, #20]	@ (8002ae4 <HAL_MspInit+0x44>)
 8002ace:	69da      	ldr	r2, [r3, #28]
 8002ad0:	2380      	movs	r3, #128	@ 0x80
 8002ad2:	055b      	lsls	r3, r3, #21
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ada:	46c0      	nop			@ (mov r8, r8)
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b002      	add	sp, #8
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	40021000 	.word	0x40021000

08002ae8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b08b      	sub	sp, #44	@ 0x2c
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af0:	2414      	movs	r4, #20
 8002af2:	193b      	adds	r3, r7, r4
 8002af4:	0018      	movs	r0, r3
 8002af6:	2314      	movs	r3, #20
 8002af8:	001a      	movs	r2, r3
 8002afa:	2100      	movs	r1, #0
 8002afc:	f003 fa4a 	bl	8005f94 <memset>
  if(hadc->Instance==ADC1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a19      	ldr	r2, [pc, #100]	@ (8002b6c <HAL_ADC_MspInit+0x84>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d12b      	bne.n	8002b62 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b0a:	4b19      	ldr	r3, [pc, #100]	@ (8002b70 <HAL_ADC_MspInit+0x88>)
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	4b18      	ldr	r3, [pc, #96]	@ (8002b70 <HAL_ADC_MspInit+0x88>)
 8002b10:	2180      	movs	r1, #128	@ 0x80
 8002b12:	0089      	lsls	r1, r1, #2
 8002b14:	430a      	orrs	r2, r1
 8002b16:	619a      	str	r2, [r3, #24]
 8002b18:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <HAL_ADC_MspInit+0x88>)
 8002b1a:	699a      	ldr	r2, [r3, #24]
 8002b1c:	2380      	movs	r3, #128	@ 0x80
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b26:	4b12      	ldr	r3, [pc, #72]	@ (8002b70 <HAL_ADC_MspInit+0x88>)
 8002b28:	695a      	ldr	r2, [r3, #20]
 8002b2a:	4b11      	ldr	r3, [pc, #68]	@ (8002b70 <HAL_ADC_MspInit+0x88>)
 8002b2c:	2180      	movs	r1, #128	@ 0x80
 8002b2e:	0289      	lsls	r1, r1, #10
 8002b30:	430a      	orrs	r2, r1
 8002b32:	615a      	str	r2, [r3, #20]
 8002b34:	4b0e      	ldr	r3, [pc, #56]	@ (8002b70 <HAL_ADC_MspInit+0x88>)
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	2380      	movs	r3, #128	@ 0x80
 8002b3a:	029b      	lsls	r3, r3, #10
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = POT_METER_Pin;
 8002b42:	193b      	adds	r3, r7, r4
 8002b44:	2204      	movs	r2, #4
 8002b46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b48:	193b      	adds	r3, r7, r4
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	193b      	adds	r3, r7, r4
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(POT_METER_GPIO_Port, &GPIO_InitStruct);
 8002b54:	193a      	adds	r2, r7, r4
 8002b56:	2390      	movs	r3, #144	@ 0x90
 8002b58:	05db      	lsls	r3, r3, #23
 8002b5a:	0011      	movs	r1, r2
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f000 ff4f 	bl	8003a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b00b      	add	sp, #44	@ 0x2c
 8002b68:	bd90      	pop	{r4, r7, pc}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	40012400 	.word	0x40012400
 8002b70:	40021000 	.word	0x40021000

08002b74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b08b      	sub	sp, #44	@ 0x2c
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	2414      	movs	r4, #20
 8002b7e:	193b      	adds	r3, r7, r4
 8002b80:	0018      	movs	r0, r3
 8002b82:	2314      	movs	r3, #20
 8002b84:	001a      	movs	r2, r3
 8002b86:	2100      	movs	r1, #0
 8002b88:	f003 fa04 	bl	8005f94 <memset>
  if(hi2c->Instance==I2C1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1c      	ldr	r2, [pc, #112]	@ (8002c04 <HAL_I2C_MspInit+0x90>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d131      	bne.n	8002bfa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b96:	4b1c      	ldr	r3, [pc, #112]	@ (8002c08 <HAL_I2C_MspInit+0x94>)
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c08 <HAL_I2C_MspInit+0x94>)
 8002b9c:	2180      	movs	r1, #128	@ 0x80
 8002b9e:	02c9      	lsls	r1, r1, #11
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	615a      	str	r2, [r3, #20]
 8002ba4:	4b18      	ldr	r3, [pc, #96]	@ (8002c08 <HAL_I2C_MspInit+0x94>)
 8002ba6:	695a      	ldr	r2, [r3, #20]
 8002ba8:	2380      	movs	r3, #128	@ 0x80
 8002baa:	02db      	lsls	r3, r3, #11
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bb2:	0021      	movs	r1, r4
 8002bb4:	187b      	adds	r3, r7, r1
 8002bb6:	22c0      	movs	r2, #192	@ 0xc0
 8002bb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bba:	187b      	adds	r3, r7, r1
 8002bbc:	2212      	movs	r2, #18
 8002bbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	2203      	movs	r2, #3
 8002bca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	2201      	movs	r2, #1
 8002bd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002c0c <HAL_I2C_MspInit+0x98>)
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	0010      	movs	r0, r2
 8002bda:	f000 ff11 	bl	8003a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bde:	4b0a      	ldr	r3, [pc, #40]	@ (8002c08 <HAL_I2C_MspInit+0x94>)
 8002be0:	69da      	ldr	r2, [r3, #28]
 8002be2:	4b09      	ldr	r3, [pc, #36]	@ (8002c08 <HAL_I2C_MspInit+0x94>)
 8002be4:	2180      	movs	r1, #128	@ 0x80
 8002be6:	0389      	lsls	r1, r1, #14
 8002be8:	430a      	orrs	r2, r1
 8002bea:	61da      	str	r2, [r3, #28]
 8002bec:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <HAL_I2C_MspInit+0x94>)
 8002bee:	69da      	ldr	r2, [r3, #28]
 8002bf0:	2380      	movs	r3, #128	@ 0x80
 8002bf2:	039b      	lsls	r3, r3, #14
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bfa:	46c0      	nop			@ (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b00b      	add	sp, #44	@ 0x2c
 8002c00:	bd90      	pop	{r4, r7, pc}
 8002c02:	46c0      	nop			@ (mov r8, r8)
 8002c04:	40005400 	.word	0x40005400
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	48000400 	.word	0x48000400

08002c10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a13      	ldr	r2, [pc, #76]	@ (8002c6c <HAL_TIM_PWM_MspInit+0x5c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10c      	bne.n	8002c3c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c22:	4b13      	ldr	r3, [pc, #76]	@ (8002c70 <HAL_TIM_PWM_MspInit+0x60>)
 8002c24:	69da      	ldr	r2, [r3, #28]
 8002c26:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <HAL_TIM_PWM_MspInit+0x60>)
 8002c28:	2102      	movs	r1, #2
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	61da      	str	r2, [r3, #28]
 8002c2e:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <HAL_TIM_PWM_MspInit+0x60>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	2202      	movs	r2, #2
 8002c34:	4013      	ands	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002c3a:	e012      	b.n	8002c62 <HAL_TIM_PWM_MspInit+0x52>
  else if(htim_pwm->Instance==TIM15)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0c      	ldr	r2, [pc, #48]	@ (8002c74 <HAL_TIM_PWM_MspInit+0x64>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d10d      	bne.n	8002c62 <HAL_TIM_PWM_MspInit+0x52>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002c46:	4b0a      	ldr	r3, [pc, #40]	@ (8002c70 <HAL_TIM_PWM_MspInit+0x60>)
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	4b09      	ldr	r3, [pc, #36]	@ (8002c70 <HAL_TIM_PWM_MspInit+0x60>)
 8002c4c:	2180      	movs	r1, #128	@ 0x80
 8002c4e:	0249      	lsls	r1, r1, #9
 8002c50:	430a      	orrs	r2, r1
 8002c52:	619a      	str	r2, [r3, #24]
 8002c54:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <HAL_TIM_PWM_MspInit+0x60>)
 8002c56:	699a      	ldr	r2, [r3, #24]
 8002c58:	2380      	movs	r3, #128	@ 0x80
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b004      	add	sp, #16
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	46c0      	nop			@ (mov r8, r8)
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40014000 	.word	0x40014000

08002c78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1e      	ldr	r2, [pc, #120]	@ (8002d00 <HAL_TIM_Base_MspInit+0x88>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d10e      	bne.n	8002ca8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d04 <HAL_TIM_Base_MspInit+0x8c>)
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d04 <HAL_TIM_Base_MspInit+0x8c>)
 8002c90:	2180      	movs	r1, #128	@ 0x80
 8002c92:	0049      	lsls	r1, r1, #1
 8002c94:	430a      	orrs	r2, r1
 8002c96:	61da      	str	r2, [r3, #28]
 8002c98:	4b1a      	ldr	r3, [pc, #104]	@ (8002d04 <HAL_TIM_Base_MspInit+0x8c>)
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	2380      	movs	r3, #128	@ 0x80
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002ca6:	e026      	b.n	8002cf6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM16)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a16      	ldr	r2, [pc, #88]	@ (8002d08 <HAL_TIM_Base_MspInit+0x90>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10e      	bne.n	8002cd0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002cb2:	4b14      	ldr	r3, [pc, #80]	@ (8002d04 <HAL_TIM_Base_MspInit+0x8c>)
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	4b13      	ldr	r3, [pc, #76]	@ (8002d04 <HAL_TIM_Base_MspInit+0x8c>)
 8002cb8:	2180      	movs	r1, #128	@ 0x80
 8002cba:	0289      	lsls	r1, r1, #10
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	619a      	str	r2, [r3, #24]
 8002cc0:	4b10      	ldr	r3, [pc, #64]	@ (8002d04 <HAL_TIM_Base_MspInit+0x8c>)
 8002cc2:	699a      	ldr	r2, [r3, #24]
 8002cc4:	2380      	movs	r3, #128	@ 0x80
 8002cc6:	029b      	lsls	r3, r3, #10
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	693b      	ldr	r3, [r7, #16]
}
 8002cce:	e012      	b.n	8002cf6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM17)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d0c <HAL_TIM_Base_MspInit+0x94>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d10d      	bne.n	8002cf6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002cda:	4b0a      	ldr	r3, [pc, #40]	@ (8002d04 <HAL_TIM_Base_MspInit+0x8c>)
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	4b09      	ldr	r3, [pc, #36]	@ (8002d04 <HAL_TIM_Base_MspInit+0x8c>)
 8002ce0:	2180      	movs	r1, #128	@ 0x80
 8002ce2:	02c9      	lsls	r1, r1, #11
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	619a      	str	r2, [r3, #24]
 8002ce8:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <HAL_TIM_Base_MspInit+0x8c>)
 8002cea:	699a      	ldr	r2, [r3, #24]
 8002cec:	2380      	movs	r3, #128	@ 0x80
 8002cee:	02db      	lsls	r3, r3, #11
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
}
 8002cf6:	46c0      	nop			@ (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b006      	add	sp, #24
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			@ (mov r8, r8)
 8002d00:	40002000 	.word	0x40002000
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40014400 	.word	0x40014400
 8002d0c:	40014800 	.word	0x40014800

08002d10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b08d      	sub	sp, #52	@ 0x34
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	241c      	movs	r4, #28
 8002d1a:	193b      	adds	r3, r7, r4
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	2314      	movs	r3, #20
 8002d20:	001a      	movs	r2, r3
 8002d22:	2100      	movs	r1, #0
 8002d24:	f003 f936 	bl	8005f94 <memset>
  if(htim->Instance==TIM3)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a61      	ldr	r2, [pc, #388]	@ (8002eb4 <HAL_TIM_MspPostInit+0x1a4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d13b      	bne.n	8002daa <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d32:	4b61      	ldr	r3, [pc, #388]	@ (8002eb8 <HAL_TIM_MspPostInit+0x1a8>)
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	4b60      	ldr	r3, [pc, #384]	@ (8002eb8 <HAL_TIM_MspPostInit+0x1a8>)
 8002d38:	2180      	movs	r1, #128	@ 0x80
 8002d3a:	0309      	lsls	r1, r1, #12
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	615a      	str	r2, [r3, #20]
 8002d40:	4b5d      	ldr	r3, [pc, #372]	@ (8002eb8 <HAL_TIM_MspPostInit+0x1a8>)
 8002d42:	695a      	ldr	r2, [r3, #20]
 8002d44:	2380      	movs	r3, #128	@ 0x80
 8002d46:	031b      	lsls	r3, r3, #12
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8002d4e:	193b      	adds	r3, r7, r4
 8002d50:	22b0      	movs	r2, #176	@ 0xb0
 8002d52:	0092      	lsls	r2, r2, #2
 8002d54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	193b      	adds	r3, r7, r4
 8002d58:	2202      	movs	r2, #2
 8002d5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	193b      	adds	r3, r7, r4
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d62:	193b      	adds	r3, r7, r4
 8002d64:	2200      	movs	r2, #0
 8002d66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002d68:	193b      	adds	r3, r7, r4
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	4a52      	ldr	r2, [pc, #328]	@ (8002ebc <HAL_TIM_MspPostInit+0x1ac>)
 8002d72:	0019      	movs	r1, r3
 8002d74:	0010      	movs	r0, r2
 8002d76:	f000 fe43 	bl	8003a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d7a:	0021      	movs	r1, r4
 8002d7c:	187b      	adds	r3, r7, r1
 8002d7e:	2280      	movs	r2, #128	@ 0x80
 8002d80:	0052      	lsls	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	2202      	movs	r2, #2
 8002d88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	2200      	movs	r2, #0
 8002d94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8002d96:	187b      	adds	r3, r7, r1
 8002d98:	2200      	movs	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d9c:	187b      	adds	r3, r7, r1
 8002d9e:	4a47      	ldr	r2, [pc, #284]	@ (8002ebc <HAL_TIM_MspPostInit+0x1ac>)
 8002da0:	0019      	movs	r1, r3
 8002da2:	0010      	movs	r0, r2
 8002da4:	f000 fe2c 	bl	8003a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002da8:	e07f      	b.n	8002eaa <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM15)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a44      	ldr	r2, [pc, #272]	@ (8002ec0 <HAL_TIM_MspPostInit+0x1b0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d125      	bne.n	8002e00 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db4:	4b40      	ldr	r3, [pc, #256]	@ (8002eb8 <HAL_TIM_MspPostInit+0x1a8>)
 8002db6:	695a      	ldr	r2, [r3, #20]
 8002db8:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb8 <HAL_TIM_MspPostInit+0x1a8>)
 8002dba:	2180      	movs	r1, #128	@ 0x80
 8002dbc:	02c9      	lsls	r1, r1, #11
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	615a      	str	r2, [r3, #20]
 8002dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8002eb8 <HAL_TIM_MspPostInit+0x1a8>)
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	2380      	movs	r3, #128	@ 0x80
 8002dc8:	02db      	lsls	r3, r3, #11
 8002dca:	4013      	ands	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002dd0:	211c      	movs	r1, #28
 8002dd2:	187b      	adds	r3, r7, r1
 8002dd4:	22c0      	movs	r2, #192	@ 0xc0
 8002dd6:	0212      	lsls	r2, r2, #8
 8002dd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	2202      	movs	r2, #2
 8002dde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	187b      	adds	r3, r7, r1
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	2200      	movs	r2, #0
 8002dea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002dec:	187b      	adds	r3, r7, r1
 8002dee:	2201      	movs	r2, #1
 8002df0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	4a33      	ldr	r2, [pc, #204]	@ (8002ec4 <HAL_TIM_MspPostInit+0x1b4>)
 8002df6:	0019      	movs	r1, r3
 8002df8:	0010      	movs	r0, r2
 8002dfa:	f000 fe01 	bl	8003a00 <HAL_GPIO_Init>
}
 8002dfe:	e054      	b.n	8002eaa <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM16)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a30      	ldr	r2, [pc, #192]	@ (8002ec8 <HAL_TIM_MspPostInit+0x1b8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d125      	bne.n	8002e56 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb8 <HAL_TIM_MspPostInit+0x1a8>)
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb8 <HAL_TIM_MspPostInit+0x1a8>)
 8002e10:	2180      	movs	r1, #128	@ 0x80
 8002e12:	02c9      	lsls	r1, r1, #11
 8002e14:	430a      	orrs	r2, r1
 8002e16:	615a      	str	r2, [r3, #20]
 8002e18:	4b27      	ldr	r3, [pc, #156]	@ (8002eb8 <HAL_TIM_MspPostInit+0x1a8>)
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	2380      	movs	r3, #128	@ 0x80
 8002e1e:	02db      	lsls	r3, r3, #11
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e26:	211c      	movs	r1, #28
 8002e28:	187b      	adds	r3, r7, r1
 8002e2a:	2280      	movs	r2, #128	@ 0x80
 8002e2c:	0052      	lsls	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	2202      	movs	r2, #2
 8002e34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	187b      	adds	r3, r7, r1
 8002e38:	2200      	movs	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3c:	187b      	adds	r3, r7, r1
 8002e3e:	2200      	movs	r2, #0
 8002e40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8002e42:	187b      	adds	r3, r7, r1
 8002e44:	2202      	movs	r2, #2
 8002e46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e48:	187b      	adds	r3, r7, r1
 8002e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ec4 <HAL_TIM_MspPostInit+0x1b4>)
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	0010      	movs	r0, r2
 8002e50:	f000 fdd6 	bl	8003a00 <HAL_GPIO_Init>
}
 8002e54:	e029      	b.n	8002eaa <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM17)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002ecc <HAL_TIM_MspPostInit+0x1bc>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d124      	bne.n	8002eaa <HAL_TIM_MspPostInit+0x19a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e60:	4b15      	ldr	r3, [pc, #84]	@ (8002eb8 <HAL_TIM_MspPostInit+0x1a8>)
 8002e62:	695a      	ldr	r2, [r3, #20]
 8002e64:	4b14      	ldr	r3, [pc, #80]	@ (8002eb8 <HAL_TIM_MspPostInit+0x1a8>)
 8002e66:	2180      	movs	r1, #128	@ 0x80
 8002e68:	02c9      	lsls	r1, r1, #11
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	615a      	str	r2, [r3, #20]
 8002e6e:	4b12      	ldr	r3, [pc, #72]	@ (8002eb8 <HAL_TIM_MspPostInit+0x1a8>)
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	2380      	movs	r3, #128	@ 0x80
 8002e74:	02db      	lsls	r3, r3, #11
 8002e76:	4013      	ands	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e7c:	211c      	movs	r1, #28
 8002e7e:	187b      	adds	r3, r7, r1
 8002e80:	2280      	movs	r2, #128	@ 0x80
 8002e82:	0092      	lsls	r2, r2, #2
 8002e84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e86:	187b      	adds	r3, r7, r1
 8002e88:	2202      	movs	r2, #2
 8002e8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	187b      	adds	r3, r7, r1
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e92:	187b      	adds	r3, r7, r1
 8002e94:	2200      	movs	r2, #0
 8002e96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8002e98:	187b      	adds	r3, r7, r1
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e9e:	187b      	adds	r3, r7, r1
 8002ea0:	4a08      	ldr	r2, [pc, #32]	@ (8002ec4 <HAL_TIM_MspPostInit+0x1b4>)
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	0010      	movs	r0, r2
 8002ea6:	f000 fdab 	bl	8003a00 <HAL_GPIO_Init>
}
 8002eaa:	46c0      	nop			@ (mov r8, r8)
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b00d      	add	sp, #52	@ 0x34
 8002eb0:	bd90      	pop	{r4, r7, pc}
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	40000400 	.word	0x40000400
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	48000800 	.word	0x48000800
 8002ec0:	40014000 	.word	0x40014000
 8002ec4:	48000400 	.word	0x48000400
 8002ec8:	40014400 	.word	0x40014400
 8002ecc:	40014800 	.word	0x40014800

08002ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b08b      	sub	sp, #44	@ 0x2c
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	2414      	movs	r4, #20
 8002eda:	193b      	adds	r3, r7, r4
 8002edc:	0018      	movs	r0, r3
 8002ede:	2314      	movs	r3, #20
 8002ee0:	001a      	movs	r2, r3
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	f003 f856 	bl	8005f94 <memset>
  if(huart->Instance==USART1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1d      	ldr	r2, [pc, #116]	@ (8002f64 <HAL_UART_MspInit+0x94>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d133      	bne.n	8002f5a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f68 <HAL_UART_MspInit+0x98>)
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f68 <HAL_UART_MspInit+0x98>)
 8002ef8:	2180      	movs	r1, #128	@ 0x80
 8002efa:	01c9      	lsls	r1, r1, #7
 8002efc:	430a      	orrs	r2, r1
 8002efe:	619a      	str	r2, [r3, #24]
 8002f00:	4b19      	ldr	r3, [pc, #100]	@ (8002f68 <HAL_UART_MspInit+0x98>)
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	2380      	movs	r3, #128	@ 0x80
 8002f06:	01db      	lsls	r3, r3, #7
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0e:	4b16      	ldr	r3, [pc, #88]	@ (8002f68 <HAL_UART_MspInit+0x98>)
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	4b15      	ldr	r3, [pc, #84]	@ (8002f68 <HAL_UART_MspInit+0x98>)
 8002f14:	2180      	movs	r1, #128	@ 0x80
 8002f16:	0289      	lsls	r1, r1, #10
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	615a      	str	r2, [r3, #20]
 8002f1c:	4b12      	ldr	r3, [pc, #72]	@ (8002f68 <HAL_UART_MspInit+0x98>)
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	2380      	movs	r3, #128	@ 0x80
 8002f22:	029b      	lsls	r3, r3, #10
 8002f24:	4013      	ands	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f2a:	193b      	adds	r3, r7, r4
 8002f2c:	22c0      	movs	r2, #192	@ 0xc0
 8002f2e:	00d2      	lsls	r2, r2, #3
 8002f30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f32:	0021      	movs	r1, r4
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	2202      	movs	r2, #2
 8002f38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3a:	187b      	adds	r3, r7, r1
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f40:	187b      	adds	r3, r7, r1
 8002f42:	2203      	movs	r2, #3
 8002f44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002f46:	187b      	adds	r3, r7, r1
 8002f48:	2201      	movs	r2, #1
 8002f4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4c:	187a      	adds	r2, r7, r1
 8002f4e:	2390      	movs	r3, #144	@ 0x90
 8002f50:	05db      	lsls	r3, r3, #23
 8002f52:	0011      	movs	r1, r2
 8002f54:	0018      	movs	r0, r3
 8002f56:	f000 fd53 	bl	8003a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f5a:	46c0      	nop			@ (mov r8, r8)
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b00b      	add	sp, #44	@ 0x2c
 8002f60:	bd90      	pop	{r4, r7, pc}
 8002f62:	46c0      	nop			@ (mov r8, r8)
 8002f64:	40013800 	.word	0x40013800
 8002f68:	40021000 	.word	0x40021000

08002f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f70:	46c0      	nop			@ (mov r8, r8)
 8002f72:	e7fd      	b.n	8002f70 <NMI_Handler+0x4>

08002f74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f78:	46c0      	nop			@ (mov r8, r8)
 8002f7a:	e7fd      	b.n	8002f78 <HardFault_Handler+0x4>

08002f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f80:	46c0      	nop			@ (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f94:	f000 f8b2 	bl	80030fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f98:	46c0      	nop			@ (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fa8:	4a14      	ldr	r2, [pc, #80]	@ (8002ffc <_sbrk+0x5c>)
 8002faa:	4b15      	ldr	r3, [pc, #84]	@ (8003000 <_sbrk+0x60>)
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fb4:	4b13      	ldr	r3, [pc, #76]	@ (8003004 <_sbrk+0x64>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fbc:	4b11      	ldr	r3, [pc, #68]	@ (8003004 <_sbrk+0x64>)
 8002fbe:	4a12      	ldr	r2, [pc, #72]	@ (8003008 <_sbrk+0x68>)
 8002fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fc2:	4b10      	ldr	r3, [pc, #64]	@ (8003004 <_sbrk+0x64>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	18d3      	adds	r3, r2, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d207      	bcs.n	8002fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fd0:	f002 ffe8 	bl	8005fa4 <__errno>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	220c      	movs	r2, #12
 8002fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	425b      	negs	r3, r3
 8002fde:	e009      	b.n	8002ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fe0:	4b08      	ldr	r3, [pc, #32]	@ (8003004 <_sbrk+0x64>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fe6:	4b07      	ldr	r3, [pc, #28]	@ (8003004 <_sbrk+0x64>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	18d2      	adds	r2, r2, r3
 8002fee:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <_sbrk+0x64>)
 8002ff0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
}
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b006      	add	sp, #24
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20002000 	.word	0x20002000
 8003000:	00000400 	.word	0x00000400
 8003004:	20000370 	.word	0x20000370
 8003008:	200004c0 	.word	0x200004c0

0800300c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003010:	46c0      	nop			@ (mov r8, r8)
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003018:	480d      	ldr	r0, [pc, #52]	@ (8003050 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800301a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800301c:	f7ff fff6 	bl	800300c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003020:	480c      	ldr	r0, [pc, #48]	@ (8003054 <LoopForever+0x6>)
  ldr r1, =_edata
 8003022:	490d      	ldr	r1, [pc, #52]	@ (8003058 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003024:	4a0d      	ldr	r2, [pc, #52]	@ (800305c <LoopForever+0xe>)
  movs r3, #0
 8003026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003028:	e002      	b.n	8003030 <LoopCopyDataInit>

0800302a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800302a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800302c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800302e:	3304      	adds	r3, #4

08003030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003034:	d3f9      	bcc.n	800302a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003036:	4a0a      	ldr	r2, [pc, #40]	@ (8003060 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003038:	4c0a      	ldr	r4, [pc, #40]	@ (8003064 <LoopForever+0x16>)
  movs r3, #0
 800303a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800303c:	e001      	b.n	8003042 <LoopFillZerobss>

0800303e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800303e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003040:	3204      	adds	r2, #4

08003042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003044:	d3fb      	bcc.n	800303e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003046:	f002 ffb3 	bl	8005fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800304a:	f7fe ff11 	bl	8001e70 <main>

0800304e <LoopForever>:

LoopForever:
    b LoopForever
 800304e:	e7fe      	b.n	800304e <LoopForever>
  ldr   r0, =_estack
 8003050:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003058:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800305c:	08007a08 	.word	0x08007a08
  ldr r2, =_sbss
 8003060:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8003064:	200004c0 	.word	0x200004c0

08003068 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003068:	e7fe      	b.n	8003068 <ADC1_IRQHandler>
	...

0800306c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003070:	4b07      	ldr	r3, [pc, #28]	@ (8003090 <HAL_Init+0x24>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <HAL_Init+0x24>)
 8003076:	2110      	movs	r1, #16
 8003078:	430a      	orrs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800307c:	2003      	movs	r0, #3
 800307e:	f000 f809 	bl	8003094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003082:	f7ff fd0d 	bl	8002aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	0018      	movs	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			@ (mov r8, r8)
 8003090:	40022000 	.word	0x40022000

08003094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800309c:	4b14      	ldr	r3, [pc, #80]	@ (80030f0 <HAL_InitTick+0x5c>)
 800309e:	681c      	ldr	r4, [r3, #0]
 80030a0:	4b14      	ldr	r3, [pc, #80]	@ (80030f4 <HAL_InitTick+0x60>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	0019      	movs	r1, r3
 80030a6:	23fa      	movs	r3, #250	@ 0xfa
 80030a8:	0098      	lsls	r0, r3, #2
 80030aa:	f7fd f83f 	bl	800012c <__udivsi3>
 80030ae:	0003      	movs	r3, r0
 80030b0:	0019      	movs	r1, r3
 80030b2:	0020      	movs	r0, r4
 80030b4:	f7fd f83a 	bl	800012c <__udivsi3>
 80030b8:	0003      	movs	r3, r0
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 fc93 	bl	80039e6 <HAL_SYSTICK_Config>
 80030c0:	1e03      	subs	r3, r0, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e00f      	b.n	80030e8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d80b      	bhi.n	80030e6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	2301      	movs	r3, #1
 80030d2:	425b      	negs	r3, r3
 80030d4:	2200      	movs	r2, #0
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 fc70 	bl	80039bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030dc:	4b06      	ldr	r3, [pc, #24]	@ (80030f8 <HAL_InitTick+0x64>)
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	e000      	b.n	80030e8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
}
 80030e8:	0018      	movs	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b003      	add	sp, #12
 80030ee:	bd90      	pop	{r4, r7, pc}
 80030f0:	20000000 	.word	0x20000000
 80030f4:	20000008 	.word	0x20000008
 80030f8:	20000004 	.word	0x20000004

080030fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003100:	4b05      	ldr	r3, [pc, #20]	@ (8003118 <HAL_IncTick+0x1c>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	001a      	movs	r2, r3
 8003106:	4b05      	ldr	r3, [pc, #20]	@ (800311c <HAL_IncTick+0x20>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	18d2      	adds	r2, r2, r3
 800310c:	4b03      	ldr	r3, [pc, #12]	@ (800311c <HAL_IncTick+0x20>)
 800310e:	601a      	str	r2, [r3, #0]
}
 8003110:	46c0      	nop			@ (mov r8, r8)
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	46c0      	nop			@ (mov r8, r8)
 8003118:	20000008 	.word	0x20000008
 800311c:	20000374 	.word	0x20000374

08003120 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  return uwTick;
 8003124:	4b02      	ldr	r3, [pc, #8]	@ (8003130 <HAL_GetTick+0x10>)
 8003126:	681b      	ldr	r3, [r3, #0]
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	46c0      	nop			@ (mov r8, r8)
 8003130:	20000374 	.word	0x20000374

08003134 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800313c:	230f      	movs	r3, #15
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e125      	b.n	800339e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2234      	movs	r2, #52	@ 0x34
 8003164:	2100      	movs	r1, #0
 8003166:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	0018      	movs	r0, r3
 800316c:	f7ff fcbc 	bl	8002ae8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003174:	2210      	movs	r2, #16
 8003176:	4013      	ands	r3, r2
 8003178:	d000      	beq.n	800317c <HAL_ADC_Init+0x48>
 800317a:	e103      	b.n	8003384 <HAL_ADC_Init+0x250>
 800317c:	230f      	movs	r3, #15
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d000      	beq.n	8003188 <HAL_ADC_Init+0x54>
 8003186:	e0fd      	b.n	8003384 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2204      	movs	r2, #4
 8003190:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003192:	d000      	beq.n	8003196 <HAL_ADC_Init+0x62>
 8003194:	e0f6      	b.n	8003384 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319a:	4a83      	ldr	r2, [pc, #524]	@ (80033a8 <HAL_ADC_Init+0x274>)
 800319c:	4013      	ands	r3, r2
 800319e:	2202      	movs	r2, #2
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2203      	movs	r2, #3
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d112      	bne.n	80031da <HAL_ADC_Init+0xa6>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2201      	movs	r2, #1
 80031bc:	4013      	ands	r3, r2
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d009      	beq.n	80031d6 <HAL_ADC_Init+0xa2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	2380      	movs	r3, #128	@ 0x80
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	401a      	ands	r2, r3
 80031ce:	2380      	movs	r3, #128	@ 0x80
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d101      	bne.n	80031da <HAL_ADC_Init+0xa6>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <HAL_ADC_Init+0xa8>
 80031da:	2300      	movs	r3, #0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d116      	bne.n	800320e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2218      	movs	r2, #24
 80031e8:	4393      	bics	r3, r2
 80031ea:	0019      	movs	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	0899      	lsrs	r1, r3, #2
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4964      	ldr	r1, [pc, #400]	@ (80033ac <HAL_ADC_Init+0x278>)
 800321a:	400a      	ands	r2, r1
 800321c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	7e1b      	ldrb	r3, [r3, #24]
 8003222:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	7e5b      	ldrb	r3, [r3, #25]
 8003228:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800322a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7e9b      	ldrb	r3, [r3, #26]
 8003230:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003232:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003238:	2b01      	cmp	r3, #1
 800323a:	d002      	beq.n	8003242 <HAL_ADC_Init+0x10e>
 800323c:	2380      	movs	r3, #128	@ 0x80
 800323e:	015b      	lsls	r3, r3, #5
 8003240:	e000      	b.n	8003244 <HAL_ADC_Init+0x110>
 8003242:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003244:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800324a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d101      	bne.n	8003258 <HAL_ADC_Init+0x124>
 8003254:	2304      	movs	r3, #4
 8003256:	e000      	b.n	800325a <HAL_ADC_Init+0x126>
 8003258:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800325a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2124      	movs	r1, #36	@ 0x24
 8003260:	5c5b      	ldrb	r3, [r3, r1]
 8003262:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003264:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	4313      	orrs	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	7edb      	ldrb	r3, [r3, #27]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d115      	bne.n	80032a0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7e9b      	ldrb	r3, [r3, #26]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d105      	bne.n	8003288 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2280      	movs	r2, #128	@ 0x80
 8003280:	0252      	lsls	r2, r2, #9
 8003282:	4313      	orrs	r3, r2
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	e00b      	b.n	80032a0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328c:	2220      	movs	r2, #32
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003298:	2201      	movs	r2, #1
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	23c2      	movs	r3, #194	@ 0xc2
 80032a6:	33ff      	adds	r3, #255	@ 0xff
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d007      	beq.n	80032bc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80032b4:	4313      	orrs	r3, r2
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68d9      	ldr	r1, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032d0:	2380      	movs	r3, #128	@ 0x80
 80032d2:	055b      	lsls	r3, r3, #21
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d01b      	beq.n	8003310 <HAL_ADC_Init+0x1dc>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d017      	beq.n	8003310 <HAL_ADC_Init+0x1dc>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d013      	beq.n	8003310 <HAL_ADC_Init+0x1dc>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d00f      	beq.n	8003310 <HAL_ADC_Init+0x1dc>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d00b      	beq.n	8003310 <HAL_ADC_Init+0x1dc>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fc:	2b05      	cmp	r3, #5
 80032fe:	d007      	beq.n	8003310 <HAL_ADC_Init+0x1dc>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003304:	2b06      	cmp	r3, #6
 8003306:	d003      	beq.n	8003310 <HAL_ADC_Init+0x1dc>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330c:	2b07      	cmp	r3, #7
 800330e:	d112      	bne.n	8003336 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2107      	movs	r1, #7
 800331c:	438a      	bics	r2, r1
 800331e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6959      	ldr	r1, [r3, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332a:	2207      	movs	r2, #7
 800332c:	401a      	ands	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4a1c      	ldr	r2, [pc, #112]	@ (80033b0 <HAL_ADC_Init+0x27c>)
 800333e:	4013      	ands	r3, r2
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	429a      	cmp	r2, r3
 8003344:	d10b      	bne.n	800335e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003350:	2203      	movs	r2, #3
 8003352:	4393      	bics	r3, r2
 8003354:	2201      	movs	r2, #1
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800335c:	e01c      	b.n	8003398 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003362:	2212      	movs	r2, #18
 8003364:	4393      	bics	r3, r2
 8003366:	2210      	movs	r2, #16
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003372:	2201      	movs	r2, #1
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800337a:	230f      	movs	r3, #15
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003382:	e009      	b.n	8003398 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003388:	2210      	movs	r2, #16
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003390:	230f      	movs	r3, #15
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003398:	230f      	movs	r3, #15
 800339a:	18fb      	adds	r3, r7, r3
 800339c:	781b      	ldrb	r3, [r3, #0]
}
 800339e:	0018      	movs	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b004      	add	sp, #16
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	fffffefd 	.word	0xfffffefd
 80033ac:	fffe0219 	.word	0xfffe0219
 80033b0:	833fffe7 	.word	0x833fffe7

080033b4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80033b4:	b590      	push	{r4, r7, lr}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033bc:	230f      	movs	r3, #15
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2204      	movs	r2, #4
 80033cc:	4013      	ands	r3, r2
 80033ce:	d138      	bne.n	8003442 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2234      	movs	r2, #52	@ 0x34
 80033d4:	5c9b      	ldrb	r3, [r3, r2]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_ADC_Start+0x2a>
 80033da:	2302      	movs	r3, #2
 80033dc:	e038      	b.n	8003450 <HAL_ADC_Start+0x9c>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2234      	movs	r2, #52	@ 0x34
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	7e5b      	ldrb	r3, [r3, #25]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d007      	beq.n	80033fe <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80033ee:	230f      	movs	r3, #15
 80033f0:	18fc      	adds	r4, r7, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	0018      	movs	r0, r3
 80033f6:	f000 f9cb 	bl	8003790 <ADC_Enable>
 80033fa:	0003      	movs	r3, r0
 80033fc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033fe:	230f      	movs	r3, #15
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d120      	bne.n	800344a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340c:	4a12      	ldr	r2, [pc, #72]	@ (8003458 <HAL_ADC_Start+0xa4>)
 800340e:	4013      	ands	r3, r2
 8003410:	2280      	movs	r2, #128	@ 0x80
 8003412:	0052      	lsls	r2, r2, #1
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2234      	movs	r2, #52	@ 0x34
 8003424:	2100      	movs	r1, #0
 8003426:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	221c      	movs	r2, #28
 800342e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2104      	movs	r1, #4
 800343c:	430a      	orrs	r2, r1
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	e003      	b.n	800344a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003442:	230f      	movs	r3, #15
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	2202      	movs	r2, #2
 8003448:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800344a:	230f      	movs	r3, #15
 800344c:	18fb      	adds	r3, r7, r3
 800344e:	781b      	ldrb	r3, [r3, #0]
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b005      	add	sp, #20
 8003456:	bd90      	pop	{r4, r7, pc}
 8003458:	fffff0fe 	.word	0xfffff0fe

0800345c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	2b08      	cmp	r3, #8
 800346c:	d102      	bne.n	8003474 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800346e:	2308      	movs	r3, #8
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e014      	b.n	800349e <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	4013      	ands	r3, r2
 800347e:	2b01      	cmp	r3, #1
 8003480:	d10b      	bne.n	800349a <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003486:	2220      	movs	r2, #32
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2234      	movs	r2, #52	@ 0x34
 8003492:	2100      	movs	r1, #0
 8003494:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e071      	b.n	800357e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800349a:	230c      	movs	r3, #12
 800349c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800349e:	f7ff fe3f 	bl	8003120 <HAL_GetTick>
 80034a2:	0003      	movs	r3, r0
 80034a4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80034a6:	e01f      	b.n	80034e8 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	3301      	adds	r3, #1
 80034ac:	d01c      	beq.n	80034e8 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_ADC_PollForConversion+0x68>
 80034b4:	f7ff fe34 	bl	8003120 <HAL_GetTick>
 80034b8:	0002      	movs	r2, r0
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d211      	bcs.n	80034e8 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4013      	ands	r3, r2
 80034ce:	d10b      	bne.n	80034e8 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d4:	2204      	movs	r2, #4
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2234      	movs	r2, #52	@ 0x34
 80034e0:	2100      	movs	r1, #0
 80034e2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e04a      	b.n	800357e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4013      	ands	r3, r2
 80034f2:	d0d9      	beq.n	80034a8 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f8:	2280      	movs	r2, #128	@ 0x80
 80034fa:	0092      	lsls	r2, r2, #2
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	23c0      	movs	r3, #192	@ 0xc0
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	4013      	ands	r3, r2
 800350e:	d12d      	bne.n	800356c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003514:	2b00      	cmp	r3, #0
 8003516:	d129      	bne.n	800356c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2208      	movs	r2, #8
 8003520:	4013      	ands	r3, r2
 8003522:	2b08      	cmp	r3, #8
 8003524:	d122      	bne.n	800356c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2204      	movs	r2, #4
 800352e:	4013      	ands	r3, r2
 8003530:	d110      	bne.n	8003554 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	210c      	movs	r1, #12
 800353e:	438a      	bics	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003546:	4a10      	ldr	r2, [pc, #64]	@ (8003588 <HAL_ADC_PollForConversion+0x12c>)
 8003548:	4013      	ands	r3, r2
 800354a:	2201      	movs	r2, #1
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	639a      	str	r2, [r3, #56]	@ 0x38
 8003552:	e00b      	b.n	800356c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003558:	2220      	movs	r2, #32
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003564:	2201      	movs	r2, #1
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	7e1b      	ldrb	r3, [r3, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d103      	bne.n	800357c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	220c      	movs	r2, #12
 800357a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	0018      	movs	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	b004      	add	sp, #16
 8003584:	bd80      	pop	{r7, pc}
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	fffffefe 	.word	0xfffffefe

0800358c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800359a:	0018      	movs	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	b002      	add	sp, #8
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ae:	230f      	movs	r3, #15
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035be:	2380      	movs	r3, #128	@ 0x80
 80035c0:	055b      	lsls	r3, r3, #21
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d011      	beq.n	80035ea <HAL_ADC_ConfigChannel+0x46>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d00d      	beq.n	80035ea <HAL_ADC_ConfigChannel+0x46>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d009      	beq.n	80035ea <HAL_ADC_ConfigChannel+0x46>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d005      	beq.n	80035ea <HAL_ADC_ConfigChannel+0x46>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d001      	beq.n	80035ea <HAL_ADC_ConfigChannel+0x46>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2234      	movs	r2, #52	@ 0x34
 80035ee:	5c9b      	ldrb	r3, [r3, r2]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x54>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e0bb      	b.n	8003770 <HAL_ADC_ConfigChannel+0x1cc>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2234      	movs	r2, #52	@ 0x34
 80035fc:	2101      	movs	r1, #1
 80035fe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2204      	movs	r2, #4
 8003608:	4013      	ands	r3, r2
 800360a:	d000      	beq.n	800360e <HAL_ADC_ConfigChannel+0x6a>
 800360c:	e09f      	b.n	800374e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4a59      	ldr	r2, [pc, #356]	@ (8003778 <HAL_ADC_ConfigChannel+0x1d4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d100      	bne.n	800361a <HAL_ADC_ConfigChannel+0x76>
 8003618:	e077      	b.n	800370a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2201      	movs	r2, #1
 8003626:	409a      	lsls	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003634:	2380      	movs	r3, #128	@ 0x80
 8003636:	055b      	lsls	r3, r3, #21
 8003638:	429a      	cmp	r2, r3
 800363a:	d037      	beq.n	80036ac <HAL_ADC_ConfigChannel+0x108>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d033      	beq.n	80036ac <HAL_ADC_ConfigChannel+0x108>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003648:	2b02      	cmp	r3, #2
 800364a:	d02f      	beq.n	80036ac <HAL_ADC_ConfigChannel+0x108>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003650:	2b03      	cmp	r3, #3
 8003652:	d02b      	beq.n	80036ac <HAL_ADC_ConfigChannel+0x108>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	2b04      	cmp	r3, #4
 800365a:	d027      	beq.n	80036ac <HAL_ADC_ConfigChannel+0x108>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003660:	2b05      	cmp	r3, #5
 8003662:	d023      	beq.n	80036ac <HAL_ADC_ConfigChannel+0x108>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003668:	2b06      	cmp	r3, #6
 800366a:	d01f      	beq.n	80036ac <HAL_ADC_ConfigChannel+0x108>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003670:	2b07      	cmp	r3, #7
 8003672:	d01b      	beq.n	80036ac <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	2107      	movs	r1, #7
 8003680:	400b      	ands	r3, r1
 8003682:	429a      	cmp	r2, r3
 8003684:	d012      	beq.n	80036ac <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2107      	movs	r1, #7
 8003692:	438a      	bics	r2, r1
 8003694:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6959      	ldr	r1, [r3, #20]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2207      	movs	r2, #7
 80036a2:	401a      	ands	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b10      	cmp	r3, #16
 80036b2:	d003      	beq.n	80036bc <HAL_ADC_ConfigChannel+0x118>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b11      	cmp	r3, #17
 80036ba:	d152      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80036bc:	4b2f      	ldr	r3, [pc, #188]	@ (800377c <HAL_ADC_ConfigChannel+0x1d8>)
 80036be:	6819      	ldr	r1, [r3, #0]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b10      	cmp	r3, #16
 80036c6:	d102      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x12a>
 80036c8:	2380      	movs	r3, #128	@ 0x80
 80036ca:	041b      	lsls	r3, r3, #16
 80036cc:	e001      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x12e>
 80036ce:	2380      	movs	r3, #128	@ 0x80
 80036d0:	03db      	lsls	r3, r3, #15
 80036d2:	4a2a      	ldr	r2, [pc, #168]	@ (800377c <HAL_ADC_ConfigChannel+0x1d8>)
 80036d4:	430b      	orrs	r3, r1
 80036d6:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b10      	cmp	r3, #16
 80036de:	d140      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036e0:	4b27      	ldr	r3, [pc, #156]	@ (8003780 <HAL_ADC_ConfigChannel+0x1dc>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4927      	ldr	r1, [pc, #156]	@ (8003784 <HAL_ADC_ConfigChannel+0x1e0>)
 80036e6:	0018      	movs	r0, r3
 80036e8:	f7fc fd20 	bl	800012c <__udivsi3>
 80036ec:	0003      	movs	r3, r0
 80036ee:	001a      	movs	r2, r3
 80036f0:	0013      	movs	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	189b      	adds	r3, r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036fa:	e002      	b.n	8003702 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	3b01      	subs	r3, #1
 8003700:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1f9      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x158>
 8003708:	e02b      	b.n	8003762 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2101      	movs	r1, #1
 8003716:	4099      	lsls	r1, r3
 8003718:	000b      	movs	r3, r1
 800371a:	43d9      	mvns	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	400a      	ands	r2, r1
 8003722:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b10      	cmp	r3, #16
 800372a:	d003      	beq.n	8003734 <HAL_ADC_ConfigChannel+0x190>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b11      	cmp	r3, #17
 8003732:	d116      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003734:	4b11      	ldr	r3, [pc, #68]	@ (800377c <HAL_ADC_ConfigChannel+0x1d8>)
 8003736:	6819      	ldr	r1, [r3, #0]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b10      	cmp	r3, #16
 800373e:	d101      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x1a0>
 8003740:	4a11      	ldr	r2, [pc, #68]	@ (8003788 <HAL_ADC_ConfigChannel+0x1e4>)
 8003742:	e000      	b.n	8003746 <HAL_ADC_ConfigChannel+0x1a2>
 8003744:	4a11      	ldr	r2, [pc, #68]	@ (800378c <HAL_ADC_ConfigChannel+0x1e8>)
 8003746:	4b0d      	ldr	r3, [pc, #52]	@ (800377c <HAL_ADC_ConfigChannel+0x1d8>)
 8003748:	400a      	ands	r2, r1
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	e009      	b.n	8003762 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003752:	2220      	movs	r2, #32
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 800375a:	230f      	movs	r3, #15
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2234      	movs	r2, #52	@ 0x34
 8003766:	2100      	movs	r1, #0
 8003768:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800376a:	230f      	movs	r3, #15
 800376c:	18fb      	adds	r3, r7, r3
 800376e:	781b      	ldrb	r3, [r3, #0]
}
 8003770:	0018      	movs	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	b004      	add	sp, #16
 8003776:	bd80      	pop	{r7, pc}
 8003778:	00001001 	.word	0x00001001
 800377c:	40012708 	.word	0x40012708
 8003780:	20000000 	.word	0x20000000
 8003784:	000f4240 	.word	0x000f4240
 8003788:	ff7fffff 	.word	0xff7fffff
 800378c:	ffbfffff 	.word	0xffbfffff

08003790 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2203      	movs	r2, #3
 80037a8:	4013      	ands	r3, r2
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d112      	bne.n	80037d4 <ADC_Enable+0x44>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2201      	movs	r2, #1
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d009      	beq.n	80037d0 <ADC_Enable+0x40>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	2380      	movs	r3, #128	@ 0x80
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	401a      	ands	r2, r3
 80037c8:	2380      	movs	r3, #128	@ 0x80
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d101      	bne.n	80037d4 <ADC_Enable+0x44>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <ADC_Enable+0x46>
 80037d4:	2300      	movs	r3, #0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d152      	bne.n	8003880 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	4a2a      	ldr	r2, [pc, #168]	@ (800388c <ADC_Enable+0xfc>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	d00d      	beq.n	8003802 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ea:	2210      	movs	r2, #16
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f6:	2201      	movs	r2, #1
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e03f      	b.n	8003882 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2101      	movs	r1, #1
 800380e:	430a      	orrs	r2, r1
 8003810:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003812:	4b1f      	ldr	r3, [pc, #124]	@ (8003890 <ADC_Enable+0x100>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	491f      	ldr	r1, [pc, #124]	@ (8003894 <ADC_Enable+0x104>)
 8003818:	0018      	movs	r0, r3
 800381a:	f7fc fc87 	bl	800012c <__udivsi3>
 800381e:	0003      	movs	r3, r0
 8003820:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003822:	e002      	b.n	800382a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	3b01      	subs	r3, #1
 8003828:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f9      	bne.n	8003824 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003830:	f7ff fc76 	bl	8003120 <HAL_GetTick>
 8003834:	0003      	movs	r3, r0
 8003836:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003838:	e01b      	b.n	8003872 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800383a:	f7ff fc71 	bl	8003120 <HAL_GetTick>
 800383e:	0002      	movs	r2, r0
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d914      	bls.n	8003872 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2201      	movs	r2, #1
 8003850:	4013      	ands	r3, r2
 8003852:	2b01      	cmp	r3, #1
 8003854:	d00d      	beq.n	8003872 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385a:	2210      	movs	r2, #16
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003866:	2201      	movs	r2, #1
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e007      	b.n	8003882 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2201      	movs	r2, #1
 800387a:	4013      	ands	r3, r2
 800387c:	2b01      	cmp	r3, #1
 800387e:	d1dc      	bne.n	800383a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	0018      	movs	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	b004      	add	sp, #16
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	80000017 	.word	0x80000017
 8003890:	20000000 	.word	0x20000000
 8003894:	000f4240 	.word	0x000f4240

08003898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003898:	b590      	push	{r4, r7, lr}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	0002      	movs	r2, r0
 80038a0:	6039      	str	r1, [r7, #0]
 80038a2:	1dfb      	adds	r3, r7, #7
 80038a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038a6:	1dfb      	adds	r3, r7, #7
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80038ac:	d828      	bhi.n	8003900 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038ae:	4a2f      	ldr	r2, [pc, #188]	@ (800396c <__NVIC_SetPriority+0xd4>)
 80038b0:	1dfb      	adds	r3, r7, #7
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	b25b      	sxtb	r3, r3
 80038b6:	089b      	lsrs	r3, r3, #2
 80038b8:	33c0      	adds	r3, #192	@ 0xc0
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	589b      	ldr	r3, [r3, r2]
 80038be:	1dfa      	adds	r2, r7, #7
 80038c0:	7812      	ldrb	r2, [r2, #0]
 80038c2:	0011      	movs	r1, r2
 80038c4:	2203      	movs	r2, #3
 80038c6:	400a      	ands	r2, r1
 80038c8:	00d2      	lsls	r2, r2, #3
 80038ca:	21ff      	movs	r1, #255	@ 0xff
 80038cc:	4091      	lsls	r1, r2
 80038ce:	000a      	movs	r2, r1
 80038d0:	43d2      	mvns	r2, r2
 80038d2:	401a      	ands	r2, r3
 80038d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	22ff      	movs	r2, #255	@ 0xff
 80038dc:	401a      	ands	r2, r3
 80038de:	1dfb      	adds	r3, r7, #7
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	0018      	movs	r0, r3
 80038e4:	2303      	movs	r3, #3
 80038e6:	4003      	ands	r3, r0
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038ec:	481f      	ldr	r0, [pc, #124]	@ (800396c <__NVIC_SetPriority+0xd4>)
 80038ee:	1dfb      	adds	r3, r7, #7
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	b25b      	sxtb	r3, r3
 80038f4:	089b      	lsrs	r3, r3, #2
 80038f6:	430a      	orrs	r2, r1
 80038f8:	33c0      	adds	r3, #192	@ 0xc0
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80038fe:	e031      	b.n	8003964 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003900:	4a1b      	ldr	r2, [pc, #108]	@ (8003970 <__NVIC_SetPriority+0xd8>)
 8003902:	1dfb      	adds	r3, r7, #7
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	0019      	movs	r1, r3
 8003908:	230f      	movs	r3, #15
 800390a:	400b      	ands	r3, r1
 800390c:	3b08      	subs	r3, #8
 800390e:	089b      	lsrs	r3, r3, #2
 8003910:	3306      	adds	r3, #6
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	18d3      	adds	r3, r2, r3
 8003916:	3304      	adds	r3, #4
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	1dfa      	adds	r2, r7, #7
 800391c:	7812      	ldrb	r2, [r2, #0]
 800391e:	0011      	movs	r1, r2
 8003920:	2203      	movs	r2, #3
 8003922:	400a      	ands	r2, r1
 8003924:	00d2      	lsls	r2, r2, #3
 8003926:	21ff      	movs	r1, #255	@ 0xff
 8003928:	4091      	lsls	r1, r2
 800392a:	000a      	movs	r2, r1
 800392c:	43d2      	mvns	r2, r2
 800392e:	401a      	ands	r2, r3
 8003930:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	019b      	lsls	r3, r3, #6
 8003936:	22ff      	movs	r2, #255	@ 0xff
 8003938:	401a      	ands	r2, r3
 800393a:	1dfb      	adds	r3, r7, #7
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	0018      	movs	r0, r3
 8003940:	2303      	movs	r3, #3
 8003942:	4003      	ands	r3, r0
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003948:	4809      	ldr	r0, [pc, #36]	@ (8003970 <__NVIC_SetPriority+0xd8>)
 800394a:	1dfb      	adds	r3, r7, #7
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	001c      	movs	r4, r3
 8003950:	230f      	movs	r3, #15
 8003952:	4023      	ands	r3, r4
 8003954:	3b08      	subs	r3, #8
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	430a      	orrs	r2, r1
 800395a:	3306      	adds	r3, #6
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	18c3      	adds	r3, r0, r3
 8003960:	3304      	adds	r3, #4
 8003962:	601a      	str	r2, [r3, #0]
}
 8003964:	46c0      	nop			@ (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	b003      	add	sp, #12
 800396a:	bd90      	pop	{r4, r7, pc}
 800396c:	e000e100 	.word	0xe000e100
 8003970:	e000ed00 	.word	0xe000ed00

08003974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	1e5a      	subs	r2, r3, #1
 8003980:	2380      	movs	r3, #128	@ 0x80
 8003982:	045b      	lsls	r3, r3, #17
 8003984:	429a      	cmp	r2, r3
 8003986:	d301      	bcc.n	800398c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003988:	2301      	movs	r3, #1
 800398a:	e010      	b.n	80039ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800398c:	4b0a      	ldr	r3, [pc, #40]	@ (80039b8 <SysTick_Config+0x44>)
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	3a01      	subs	r2, #1
 8003992:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003994:	2301      	movs	r3, #1
 8003996:	425b      	negs	r3, r3
 8003998:	2103      	movs	r1, #3
 800399a:	0018      	movs	r0, r3
 800399c:	f7ff ff7c 	bl	8003898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039a0:	4b05      	ldr	r3, [pc, #20]	@ (80039b8 <SysTick_Config+0x44>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039a6:	4b04      	ldr	r3, [pc, #16]	@ (80039b8 <SysTick_Config+0x44>)
 80039a8:	2207      	movs	r2, #7
 80039aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	0018      	movs	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b002      	add	sp, #8
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	e000e010 	.word	0xe000e010

080039bc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	210f      	movs	r1, #15
 80039c8:	187b      	adds	r3, r7, r1
 80039ca:	1c02      	adds	r2, r0, #0
 80039cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	187b      	adds	r3, r7, r1
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	b25b      	sxtb	r3, r3
 80039d6:	0011      	movs	r1, r2
 80039d8:	0018      	movs	r0, r3
 80039da:	f7ff ff5d 	bl	8003898 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80039de:	46c0      	nop			@ (mov r8, r8)
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b004      	add	sp, #16
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	0018      	movs	r0, r3
 80039f2:	f7ff ffbf 	bl	8003974 <SysTick_Config>
 80039f6:	0003      	movs	r3, r0
}
 80039f8:	0018      	movs	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b002      	add	sp, #8
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a0e:	e14f      	b.n	8003cb0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2101      	movs	r1, #1
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4091      	lsls	r1, r2
 8003a1a:	000a      	movs	r2, r1
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d100      	bne.n	8003a28 <HAL_GPIO_Init+0x28>
 8003a26:	e140      	b.n	8003caa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d005      	beq.n	8003a40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2203      	movs	r2, #3
 8003a3a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d130      	bne.n	8003aa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	0013      	movs	r3, r2
 8003a50:	43da      	mvns	r2, r3
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4013      	ands	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	409a      	lsls	r2, r3
 8003a62:	0013      	movs	r3, r2
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a76:	2201      	movs	r2, #1
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	0013      	movs	r3, r2
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	401a      	ands	r2, r3
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	409a      	lsls	r2, r3
 8003a94:	0013      	movs	r3, r2
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d017      	beq.n	8003ade <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	2203      	movs	r2, #3
 8003aba:	409a      	lsls	r2, r3
 8003abc:	0013      	movs	r3, r2
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	0013      	movs	r3, r2
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d123      	bne.n	8003b32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	08da      	lsrs	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3208      	adds	r2, #8
 8003af2:	0092      	lsls	r2, r2, #2
 8003af4:	58d3      	ldr	r3, [r2, r3]
 8003af6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2207      	movs	r2, #7
 8003afc:	4013      	ands	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	220f      	movs	r2, #15
 8003b02:	409a      	lsls	r2, r3
 8003b04:	0013      	movs	r3, r2
 8003b06:	43da      	mvns	r2, r3
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2107      	movs	r1, #7
 8003b16:	400b      	ands	r3, r1
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	0013      	movs	r3, r2
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	08da      	lsrs	r2, r3, #3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3208      	adds	r2, #8
 8003b2c:	0092      	lsls	r2, r2, #2
 8003b2e:	6939      	ldr	r1, [r7, #16]
 8003b30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	0013      	movs	r3, r2
 8003b42:	43da      	mvns	r2, r3
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4013      	ands	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2203      	movs	r2, #3
 8003b50:	401a      	ands	r2, r3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	409a      	lsls	r2, r3
 8003b58:	0013      	movs	r3, r2
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	23c0      	movs	r3, #192	@ 0xc0
 8003b6c:	029b      	lsls	r3, r3, #10
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d100      	bne.n	8003b74 <HAL_GPIO_Init+0x174>
 8003b72:	e09a      	b.n	8003caa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b74:	4b54      	ldr	r3, [pc, #336]	@ (8003cc8 <HAL_GPIO_Init+0x2c8>)
 8003b76:	699a      	ldr	r2, [r3, #24]
 8003b78:	4b53      	ldr	r3, [pc, #332]	@ (8003cc8 <HAL_GPIO_Init+0x2c8>)
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	619a      	str	r2, [r3, #24]
 8003b80:	4b51      	ldr	r3, [pc, #324]	@ (8003cc8 <HAL_GPIO_Init+0x2c8>)
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	2201      	movs	r2, #1
 8003b86:	4013      	ands	r3, r2
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b8c:	4a4f      	ldr	r2, [pc, #316]	@ (8003ccc <HAL_GPIO_Init+0x2cc>)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	3302      	adds	r3, #2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	589b      	ldr	r3, [r3, r2]
 8003b98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	220f      	movs	r2, #15
 8003ba4:	409a      	lsls	r2, r3
 8003ba6:	0013      	movs	r3, r2
 8003ba8:	43da      	mvns	r2, r3
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4013      	ands	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	2390      	movs	r3, #144	@ 0x90
 8003bb4:	05db      	lsls	r3, r3, #23
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d013      	beq.n	8003be2 <HAL_GPIO_Init+0x1e2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a44      	ldr	r2, [pc, #272]	@ (8003cd0 <HAL_GPIO_Init+0x2d0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00d      	beq.n	8003bde <HAL_GPIO_Init+0x1de>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a43      	ldr	r2, [pc, #268]	@ (8003cd4 <HAL_GPIO_Init+0x2d4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d007      	beq.n	8003bda <HAL_GPIO_Init+0x1da>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a42      	ldr	r2, [pc, #264]	@ (8003cd8 <HAL_GPIO_Init+0x2d8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d101      	bne.n	8003bd6 <HAL_GPIO_Init+0x1d6>
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e006      	b.n	8003be4 <HAL_GPIO_Init+0x1e4>
 8003bd6:	2305      	movs	r3, #5
 8003bd8:	e004      	b.n	8003be4 <HAL_GPIO_Init+0x1e4>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e002      	b.n	8003be4 <HAL_GPIO_Init+0x1e4>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <HAL_GPIO_Init+0x1e4>
 8003be2:	2300      	movs	r3, #0
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	2103      	movs	r1, #3
 8003be8:	400a      	ands	r2, r1
 8003bea:	0092      	lsls	r2, r2, #2
 8003bec:	4093      	lsls	r3, r2
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bf4:	4935      	ldr	r1, [pc, #212]	@ (8003ccc <HAL_GPIO_Init+0x2cc>)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	089b      	lsrs	r3, r3, #2
 8003bfa:	3302      	adds	r3, #2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c02:	4b36      	ldr	r3, [pc, #216]	@ (8003cdc <HAL_GPIO_Init+0x2dc>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	2380      	movs	r3, #128	@ 0x80
 8003c18:	035b      	lsls	r3, r3, #13
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c26:	4b2d      	ldr	r3, [pc, #180]	@ (8003cdc <HAL_GPIO_Init+0x2dc>)
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003cdc <HAL_GPIO_Init+0x2dc>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	43da      	mvns	r2, r3
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	2380      	movs	r3, #128	@ 0x80
 8003c42:	039b      	lsls	r3, r3, #14
 8003c44:	4013      	ands	r3, r2
 8003c46:	d003      	beq.n	8003c50 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c50:	4b22      	ldr	r3, [pc, #136]	@ (8003cdc <HAL_GPIO_Init+0x2dc>)
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003c56:	4b21      	ldr	r3, [pc, #132]	@ (8003cdc <HAL_GPIO_Init+0x2dc>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	43da      	mvns	r2, r3
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4013      	ands	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	2380      	movs	r3, #128	@ 0x80
 8003c6c:	029b      	lsls	r3, r3, #10
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d003      	beq.n	8003c7a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003c7a:	4b18      	ldr	r3, [pc, #96]	@ (8003cdc <HAL_GPIO_Init+0x2dc>)
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003c80:	4b16      	ldr	r3, [pc, #88]	@ (8003cdc <HAL_GPIO_Init+0x2dc>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	43da      	mvns	r2, r3
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	2380      	movs	r3, #128	@ 0x80
 8003c96:	025b      	lsls	r3, r3, #9
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d003      	beq.n	8003ca4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8003cdc <HAL_GPIO_Init+0x2dc>)
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	3301      	adds	r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	40da      	lsrs	r2, r3
 8003cb8:	1e13      	subs	r3, r2, #0
 8003cba:	d000      	beq.n	8003cbe <HAL_GPIO_Init+0x2be>
 8003cbc:	e6a8      	b.n	8003a10 <HAL_GPIO_Init+0x10>
  } 
}
 8003cbe:	46c0      	nop			@ (mov r8, r8)
 8003cc0:	46c0      	nop			@ (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b006      	add	sp, #24
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40010000 	.word	0x40010000
 8003cd0:	48000400 	.word	0x48000400
 8003cd4:	48000800 	.word	0x48000800
 8003cd8:	48000c00 	.word	0x48000c00
 8003cdc:	40010400 	.word	0x40010400

08003ce0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	000a      	movs	r2, r1
 8003cea:	1cbb      	adds	r3, r7, #2
 8003cec:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	1cba      	adds	r2, r7, #2
 8003cf4:	8812      	ldrh	r2, [r2, #0]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003cfa:	230f      	movs	r3, #15
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	2201      	movs	r2, #1
 8003d00:	701a      	strb	r2, [r3, #0]
 8003d02:	e003      	b.n	8003d0c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d04:	230f      	movs	r3, #15
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003d0c:	230f      	movs	r3, #15
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	781b      	ldrb	r3, [r3, #0]
  }
 8003d12:	0018      	movs	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b004      	add	sp, #16
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	0008      	movs	r0, r1
 8003d24:	0011      	movs	r1, r2
 8003d26:	1cbb      	adds	r3, r7, #2
 8003d28:	1c02      	adds	r2, r0, #0
 8003d2a:	801a      	strh	r2, [r3, #0]
 8003d2c:	1c7b      	adds	r3, r7, #1
 8003d2e:	1c0a      	adds	r2, r1, #0
 8003d30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d32:	1c7b      	adds	r3, r7, #1
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d004      	beq.n	8003d44 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d3a:	1cbb      	adds	r3, r7, #2
 8003d3c:	881a      	ldrh	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d42:	e003      	b.n	8003d4c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d44:	1cbb      	adds	r3, r7, #2
 8003d46:	881a      	ldrh	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d4c:	46c0      	nop			@ (mov r8, r8)
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b002      	add	sp, #8
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e08f      	b.n	8003e86 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2241      	movs	r2, #65	@ 0x41
 8003d6a:	5c9b      	ldrb	r3, [r3, r2]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d107      	bne.n	8003d82 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2240      	movs	r2, #64	@ 0x40
 8003d76:	2100      	movs	r1, #0
 8003d78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f7fe fef9 	bl	8002b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2241      	movs	r2, #65	@ 0x41
 8003d86:	2124      	movs	r1, #36	@ 0x24
 8003d88:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2101      	movs	r1, #1
 8003d96:	438a      	bics	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	493b      	ldr	r1, [pc, #236]	@ (8003e90 <HAL_I2C_Init+0x13c>)
 8003da4:	400a      	ands	r2, r1
 8003da6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4938      	ldr	r1, [pc, #224]	@ (8003e94 <HAL_I2C_Init+0x140>)
 8003db4:	400a      	ands	r2, r1
 8003db6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d108      	bne.n	8003dd2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2180      	movs	r1, #128	@ 0x80
 8003dca:	0209      	lsls	r1, r1, #8
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	e007      	b.n	8003de2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2184      	movs	r1, #132	@ 0x84
 8003ddc:	0209      	lsls	r1, r1, #8
 8003dde:	430a      	orrs	r2, r1
 8003de0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d109      	bne.n	8003dfe <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2180      	movs	r1, #128	@ 0x80
 8003df6:	0109      	lsls	r1, r1, #4
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	605a      	str	r2, [r3, #4]
 8003dfc:	e007      	b.n	8003e0e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4923      	ldr	r1, [pc, #140]	@ (8003e98 <HAL_I2C_Init+0x144>)
 8003e0a:	400a      	ands	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4920      	ldr	r1, [pc, #128]	@ (8003e9c <HAL_I2C_Init+0x148>)
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	491a      	ldr	r1, [pc, #104]	@ (8003e94 <HAL_I2C_Init+0x140>)
 8003e2a:	400a      	ands	r2, r1
 8003e2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691a      	ldr	r2, [r3, #16]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69d9      	ldr	r1, [r3, #28]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1a      	ldr	r2, [r3, #32]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2101      	movs	r1, #1
 8003e64:	430a      	orrs	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2241      	movs	r2, #65	@ 0x41
 8003e72:	2120      	movs	r1, #32
 8003e74:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2242      	movs	r2, #66	@ 0x42
 8003e80:	2100      	movs	r1, #0
 8003e82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	0018      	movs	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b002      	add	sp, #8
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	46c0      	nop			@ (mov r8, r8)
 8003e90:	f0ffffff 	.word	0xf0ffffff
 8003e94:	ffff7fff 	.word	0xffff7fff
 8003e98:	fffff7ff 	.word	0xfffff7ff
 8003e9c:	02008000 	.word	0x02008000

08003ea0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2241      	movs	r2, #65	@ 0x41
 8003eae:	5c9b      	ldrb	r3, [r3, r2]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d138      	bne.n	8003f28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2240      	movs	r2, #64	@ 0x40
 8003eba:	5c9b      	ldrb	r3, [r3, r2]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e032      	b.n	8003f2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2240      	movs	r2, #64	@ 0x40
 8003ec8:	2101      	movs	r1, #1
 8003eca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2241      	movs	r2, #65	@ 0x41
 8003ed0:	2124      	movs	r1, #36	@ 0x24
 8003ed2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2101      	movs	r1, #1
 8003ee0:	438a      	bics	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4911      	ldr	r1, [pc, #68]	@ (8003f34 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003ef0:	400a      	ands	r2, r1
 8003ef2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6819      	ldr	r1, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2101      	movs	r1, #1
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2241      	movs	r2, #65	@ 0x41
 8003f18:	2120      	movs	r1, #32
 8003f1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2240      	movs	r2, #64	@ 0x40
 8003f20:	2100      	movs	r1, #0
 8003f22:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	e000      	b.n	8003f2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f28:	2302      	movs	r3, #2
  }
}
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b002      	add	sp, #8
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	46c0      	nop			@ (mov r8, r8)
 8003f34:	ffffefff 	.word	0xffffefff

08003f38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2241      	movs	r2, #65	@ 0x41
 8003f46:	5c9b      	ldrb	r3, [r3, r2]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d139      	bne.n	8003fc2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2240      	movs	r2, #64	@ 0x40
 8003f52:	5c9b      	ldrb	r3, [r3, r2]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e033      	b.n	8003fc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2240      	movs	r2, #64	@ 0x40
 8003f60:	2101      	movs	r1, #1
 8003f62:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2241      	movs	r2, #65	@ 0x41
 8003f68:	2124      	movs	r1, #36	@ 0x24
 8003f6a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2101      	movs	r1, #1
 8003f78:	438a      	bics	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4a11      	ldr	r2, [pc, #68]	@ (8003fcc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	021b      	lsls	r3, r3, #8
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2101      	movs	r1, #1
 8003faa:	430a      	orrs	r2, r1
 8003fac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2241      	movs	r2, #65	@ 0x41
 8003fb2:	2120      	movs	r1, #32
 8003fb4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2240      	movs	r2, #64	@ 0x40
 8003fba:	2100      	movs	r1, #0
 8003fbc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e000      	b.n	8003fc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
  }
}
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b004      	add	sp, #16
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	fffff0ff 	.word	0xfffff0ff

08003fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e301      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d100      	bne.n	8003fee <HAL_RCC_OscConfig+0x1e>
 8003fec:	e08d      	b.n	800410a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003fee:	4bc3      	ldr	r3, [pc, #780]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	220c      	movs	r2, #12
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d00e      	beq.n	8004018 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ffa:	4bc0      	ldr	r3, [pc, #768]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	220c      	movs	r2, #12
 8004000:	4013      	ands	r3, r2
 8004002:	2b08      	cmp	r3, #8
 8004004:	d116      	bne.n	8004034 <HAL_RCC_OscConfig+0x64>
 8004006:	4bbd      	ldr	r3, [pc, #756]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	2380      	movs	r3, #128	@ 0x80
 800400c:	025b      	lsls	r3, r3, #9
 800400e:	401a      	ands	r2, r3
 8004010:	2380      	movs	r3, #128	@ 0x80
 8004012:	025b      	lsls	r3, r3, #9
 8004014:	429a      	cmp	r2, r3
 8004016:	d10d      	bne.n	8004034 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004018:	4bb8      	ldr	r3, [pc, #736]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	2380      	movs	r3, #128	@ 0x80
 800401e:	029b      	lsls	r3, r3, #10
 8004020:	4013      	ands	r3, r2
 8004022:	d100      	bne.n	8004026 <HAL_RCC_OscConfig+0x56>
 8004024:	e070      	b.n	8004108 <HAL_RCC_OscConfig+0x138>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d000      	beq.n	8004030 <HAL_RCC_OscConfig+0x60>
 800402e:	e06b      	b.n	8004108 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e2d8      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d107      	bne.n	800404c <HAL_RCC_OscConfig+0x7c>
 800403c:	4baf      	ldr	r3, [pc, #700]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4bae      	ldr	r3, [pc, #696]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004042:	2180      	movs	r1, #128	@ 0x80
 8004044:	0249      	lsls	r1, r1, #9
 8004046:	430a      	orrs	r2, r1
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	e02f      	b.n	80040ac <HAL_RCC_OscConfig+0xdc>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10c      	bne.n	800406e <HAL_RCC_OscConfig+0x9e>
 8004054:	4ba9      	ldr	r3, [pc, #676]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4ba8      	ldr	r3, [pc, #672]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 800405a:	49a9      	ldr	r1, [pc, #676]	@ (8004300 <HAL_RCC_OscConfig+0x330>)
 800405c:	400a      	ands	r2, r1
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	4ba6      	ldr	r3, [pc, #664]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4ba5      	ldr	r3, [pc, #660]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004066:	49a7      	ldr	r1, [pc, #668]	@ (8004304 <HAL_RCC_OscConfig+0x334>)
 8004068:	400a      	ands	r2, r1
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	e01e      	b.n	80040ac <HAL_RCC_OscConfig+0xdc>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b05      	cmp	r3, #5
 8004074:	d10e      	bne.n	8004094 <HAL_RCC_OscConfig+0xc4>
 8004076:	4ba1      	ldr	r3, [pc, #644]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	4ba0      	ldr	r3, [pc, #640]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 800407c:	2180      	movs	r1, #128	@ 0x80
 800407e:	02c9      	lsls	r1, r1, #11
 8004080:	430a      	orrs	r2, r1
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	4b9d      	ldr	r3, [pc, #628]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4b9c      	ldr	r3, [pc, #624]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 800408a:	2180      	movs	r1, #128	@ 0x80
 800408c:	0249      	lsls	r1, r1, #9
 800408e:	430a      	orrs	r2, r1
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	e00b      	b.n	80040ac <HAL_RCC_OscConfig+0xdc>
 8004094:	4b99      	ldr	r3, [pc, #612]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b98      	ldr	r3, [pc, #608]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 800409a:	4999      	ldr	r1, [pc, #612]	@ (8004300 <HAL_RCC_OscConfig+0x330>)
 800409c:	400a      	ands	r2, r1
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	4b96      	ldr	r3, [pc, #600]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b95      	ldr	r3, [pc, #596]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 80040a6:	4997      	ldr	r1, [pc, #604]	@ (8004304 <HAL_RCC_OscConfig+0x334>)
 80040a8:	400a      	ands	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d014      	beq.n	80040de <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7ff f834 	bl	8003120 <HAL_GetTick>
 80040b8:	0003      	movs	r3, r0
 80040ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040be:	f7ff f82f 	bl	8003120 <HAL_GetTick>
 80040c2:	0002      	movs	r2, r0
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b64      	cmp	r3, #100	@ 0x64
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e28a      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d0:	4b8a      	ldr	r3, [pc, #552]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	2380      	movs	r3, #128	@ 0x80
 80040d6:	029b      	lsls	r3, r3, #10
 80040d8:	4013      	ands	r3, r2
 80040da:	d0f0      	beq.n	80040be <HAL_RCC_OscConfig+0xee>
 80040dc:	e015      	b.n	800410a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040de:	f7ff f81f 	bl	8003120 <HAL_GetTick>
 80040e2:	0003      	movs	r3, r0
 80040e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e8:	f7ff f81a 	bl	8003120 <HAL_GetTick>
 80040ec:	0002      	movs	r2, r0
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b64      	cmp	r3, #100	@ 0x64
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e275      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fa:	4b80      	ldr	r3, [pc, #512]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	2380      	movs	r3, #128	@ 0x80
 8004100:	029b      	lsls	r3, r3, #10
 8004102:	4013      	ands	r3, r2
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x118>
 8004106:	e000      	b.n	800410a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004108:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2202      	movs	r2, #2
 8004110:	4013      	ands	r3, r2
 8004112:	d100      	bne.n	8004116 <HAL_RCC_OscConfig+0x146>
 8004114:	e069      	b.n	80041ea <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004116:	4b79      	ldr	r3, [pc, #484]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	220c      	movs	r2, #12
 800411c:	4013      	ands	r3, r2
 800411e:	d00b      	beq.n	8004138 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004120:	4b76      	ldr	r3, [pc, #472]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	220c      	movs	r2, #12
 8004126:	4013      	ands	r3, r2
 8004128:	2b08      	cmp	r3, #8
 800412a:	d11c      	bne.n	8004166 <HAL_RCC_OscConfig+0x196>
 800412c:	4b73      	ldr	r3, [pc, #460]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	2380      	movs	r3, #128	@ 0x80
 8004132:	025b      	lsls	r3, r3, #9
 8004134:	4013      	ands	r3, r2
 8004136:	d116      	bne.n	8004166 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004138:	4b70      	ldr	r3, [pc, #448]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2202      	movs	r2, #2
 800413e:	4013      	ands	r3, r2
 8004140:	d005      	beq.n	800414e <HAL_RCC_OscConfig+0x17e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d001      	beq.n	800414e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e24b      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414e:	4b6b      	ldr	r3, [pc, #428]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	22f8      	movs	r2, #248	@ 0xf8
 8004154:	4393      	bics	r3, r2
 8004156:	0019      	movs	r1, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	00da      	lsls	r2, r3, #3
 800415e:	4b67      	ldr	r3, [pc, #412]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004160:	430a      	orrs	r2, r1
 8004162:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004164:	e041      	b.n	80041ea <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d024      	beq.n	80041b8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800416e:	4b63      	ldr	r3, [pc, #396]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4b62      	ldr	r3, [pc, #392]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004174:	2101      	movs	r1, #1
 8004176:	430a      	orrs	r2, r1
 8004178:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417a:	f7fe ffd1 	bl	8003120 <HAL_GetTick>
 800417e:	0003      	movs	r3, r0
 8004180:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004184:	f7fe ffcc 	bl	8003120 <HAL_GetTick>
 8004188:	0002      	movs	r2, r0
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e227      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004196:	4b59      	ldr	r3, [pc, #356]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2202      	movs	r2, #2
 800419c:	4013      	ands	r3, r2
 800419e:	d0f1      	beq.n	8004184 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a0:	4b56      	ldr	r3, [pc, #344]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	22f8      	movs	r2, #248	@ 0xf8
 80041a6:	4393      	bics	r3, r2
 80041a8:	0019      	movs	r1, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	00da      	lsls	r2, r3, #3
 80041b0:	4b52      	ldr	r3, [pc, #328]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 80041b2:	430a      	orrs	r2, r1
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	e018      	b.n	80041ea <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b8:	4b50      	ldr	r3, [pc, #320]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4b4f      	ldr	r3, [pc, #316]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 80041be:	2101      	movs	r1, #1
 80041c0:	438a      	bics	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c4:	f7fe ffac 	bl	8003120 <HAL_GetTick>
 80041c8:	0003      	movs	r3, r0
 80041ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ce:	f7fe ffa7 	bl	8003120 <HAL_GetTick>
 80041d2:	0002      	movs	r2, r0
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e202      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e0:	4b46      	ldr	r3, [pc, #280]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2202      	movs	r2, #2
 80041e6:	4013      	ands	r3, r2
 80041e8:	d1f1      	bne.n	80041ce <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2208      	movs	r2, #8
 80041f0:	4013      	ands	r3, r2
 80041f2:	d036      	beq.n	8004262 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d019      	beq.n	8004230 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041fc:	4b3f      	ldr	r3, [pc, #252]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 80041fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004200:	4b3e      	ldr	r3, [pc, #248]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004202:	2101      	movs	r1, #1
 8004204:	430a      	orrs	r2, r1
 8004206:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004208:	f7fe ff8a 	bl	8003120 <HAL_GetTick>
 800420c:	0003      	movs	r3, r0
 800420e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004212:	f7fe ff85 	bl	8003120 <HAL_GetTick>
 8004216:	0002      	movs	r2, r0
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e1e0      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004224:	4b35      	ldr	r3, [pc, #212]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	2202      	movs	r2, #2
 800422a:	4013      	ands	r3, r2
 800422c:	d0f1      	beq.n	8004212 <HAL_RCC_OscConfig+0x242>
 800422e:	e018      	b.n	8004262 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004230:	4b32      	ldr	r3, [pc, #200]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004232:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004234:	4b31      	ldr	r3, [pc, #196]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004236:	2101      	movs	r1, #1
 8004238:	438a      	bics	r2, r1
 800423a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423c:	f7fe ff70 	bl	8003120 <HAL_GetTick>
 8004240:	0003      	movs	r3, r0
 8004242:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004246:	f7fe ff6b 	bl	8003120 <HAL_GetTick>
 800424a:	0002      	movs	r2, r0
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e1c6      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004258:	4b28      	ldr	r3, [pc, #160]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	2202      	movs	r2, #2
 800425e:	4013      	ands	r3, r2
 8004260:	d1f1      	bne.n	8004246 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2204      	movs	r2, #4
 8004268:	4013      	ands	r3, r2
 800426a:	d100      	bne.n	800426e <HAL_RCC_OscConfig+0x29e>
 800426c:	e0b4      	b.n	80043d8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800426e:	201f      	movs	r0, #31
 8004270:	183b      	adds	r3, r7, r0
 8004272:	2200      	movs	r2, #0
 8004274:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004276:	4b21      	ldr	r3, [pc, #132]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004278:	69da      	ldr	r2, [r3, #28]
 800427a:	2380      	movs	r3, #128	@ 0x80
 800427c:	055b      	lsls	r3, r3, #21
 800427e:	4013      	ands	r3, r2
 8004280:	d110      	bne.n	80042a4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004282:	4b1e      	ldr	r3, [pc, #120]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004284:	69da      	ldr	r2, [r3, #28]
 8004286:	4b1d      	ldr	r3, [pc, #116]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004288:	2180      	movs	r1, #128	@ 0x80
 800428a:	0549      	lsls	r1, r1, #21
 800428c:	430a      	orrs	r2, r1
 800428e:	61da      	str	r2, [r3, #28]
 8004290:	4b1a      	ldr	r3, [pc, #104]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	2380      	movs	r3, #128	@ 0x80
 8004296:	055b      	lsls	r3, r3, #21
 8004298:	4013      	ands	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800429e:	183b      	adds	r3, r7, r0
 80042a0:	2201      	movs	r2, #1
 80042a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a4:	4b18      	ldr	r3, [pc, #96]	@ (8004308 <HAL_RCC_OscConfig+0x338>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	2380      	movs	r3, #128	@ 0x80
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	4013      	ands	r3, r2
 80042ae:	d11a      	bne.n	80042e6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b0:	4b15      	ldr	r3, [pc, #84]	@ (8004308 <HAL_RCC_OscConfig+0x338>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b14      	ldr	r3, [pc, #80]	@ (8004308 <HAL_RCC_OscConfig+0x338>)
 80042b6:	2180      	movs	r1, #128	@ 0x80
 80042b8:	0049      	lsls	r1, r1, #1
 80042ba:	430a      	orrs	r2, r1
 80042bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042be:	f7fe ff2f 	bl	8003120 <HAL_GetTick>
 80042c2:	0003      	movs	r3, r0
 80042c4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c8:	f7fe ff2a 	bl	8003120 <HAL_GetTick>
 80042cc:	0002      	movs	r2, r0
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	@ 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e185      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042da:	4b0b      	ldr	r3, [pc, #44]	@ (8004308 <HAL_RCC_OscConfig+0x338>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	2380      	movs	r3, #128	@ 0x80
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	4013      	ands	r3, r2
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d10e      	bne.n	800430c <HAL_RCC_OscConfig+0x33c>
 80042ee:	4b03      	ldr	r3, [pc, #12]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 80042f0:	6a1a      	ldr	r2, [r3, #32]
 80042f2:	4b02      	ldr	r3, [pc, #8]	@ (80042fc <HAL_RCC_OscConfig+0x32c>)
 80042f4:	2101      	movs	r1, #1
 80042f6:	430a      	orrs	r2, r1
 80042f8:	621a      	str	r2, [r3, #32]
 80042fa:	e035      	b.n	8004368 <HAL_RCC_OscConfig+0x398>
 80042fc:	40021000 	.word	0x40021000
 8004300:	fffeffff 	.word	0xfffeffff
 8004304:	fffbffff 	.word	0xfffbffff
 8004308:	40007000 	.word	0x40007000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10c      	bne.n	800432e <HAL_RCC_OscConfig+0x35e>
 8004314:	4bb6      	ldr	r3, [pc, #728]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004316:	6a1a      	ldr	r2, [r3, #32]
 8004318:	4bb5      	ldr	r3, [pc, #724]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 800431a:	2101      	movs	r1, #1
 800431c:	438a      	bics	r2, r1
 800431e:	621a      	str	r2, [r3, #32]
 8004320:	4bb3      	ldr	r3, [pc, #716]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	4bb2      	ldr	r3, [pc, #712]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004326:	2104      	movs	r1, #4
 8004328:	438a      	bics	r2, r1
 800432a:	621a      	str	r2, [r3, #32]
 800432c:	e01c      	b.n	8004368 <HAL_RCC_OscConfig+0x398>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b05      	cmp	r3, #5
 8004334:	d10c      	bne.n	8004350 <HAL_RCC_OscConfig+0x380>
 8004336:	4bae      	ldr	r3, [pc, #696]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004338:	6a1a      	ldr	r2, [r3, #32]
 800433a:	4bad      	ldr	r3, [pc, #692]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 800433c:	2104      	movs	r1, #4
 800433e:	430a      	orrs	r2, r1
 8004340:	621a      	str	r2, [r3, #32]
 8004342:	4bab      	ldr	r3, [pc, #684]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004344:	6a1a      	ldr	r2, [r3, #32]
 8004346:	4baa      	ldr	r3, [pc, #680]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004348:	2101      	movs	r1, #1
 800434a:	430a      	orrs	r2, r1
 800434c:	621a      	str	r2, [r3, #32]
 800434e:	e00b      	b.n	8004368 <HAL_RCC_OscConfig+0x398>
 8004350:	4ba7      	ldr	r3, [pc, #668]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004352:	6a1a      	ldr	r2, [r3, #32]
 8004354:	4ba6      	ldr	r3, [pc, #664]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004356:	2101      	movs	r1, #1
 8004358:	438a      	bics	r2, r1
 800435a:	621a      	str	r2, [r3, #32]
 800435c:	4ba4      	ldr	r3, [pc, #656]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 800435e:	6a1a      	ldr	r2, [r3, #32]
 8004360:	4ba3      	ldr	r3, [pc, #652]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004362:	2104      	movs	r1, #4
 8004364:	438a      	bics	r2, r1
 8004366:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d014      	beq.n	800439a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004370:	f7fe fed6 	bl	8003120 <HAL_GetTick>
 8004374:	0003      	movs	r3, r0
 8004376:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004378:	e009      	b.n	800438e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800437a:	f7fe fed1 	bl	8003120 <HAL_GetTick>
 800437e:	0002      	movs	r2, r0
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	4a9b      	ldr	r2, [pc, #620]	@ (80045f4 <HAL_RCC_OscConfig+0x624>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e12b      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800438e:	4b98      	ldr	r3, [pc, #608]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	2202      	movs	r2, #2
 8004394:	4013      	ands	r3, r2
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x3aa>
 8004398:	e013      	b.n	80043c2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800439a:	f7fe fec1 	bl	8003120 <HAL_GetTick>
 800439e:	0003      	movs	r3, r0
 80043a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a2:	e009      	b.n	80043b8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a4:	f7fe febc 	bl	8003120 <HAL_GetTick>
 80043a8:	0002      	movs	r2, r0
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	4a91      	ldr	r2, [pc, #580]	@ (80045f4 <HAL_RCC_OscConfig+0x624>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e116      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b8:	4b8d      	ldr	r3, [pc, #564]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	2202      	movs	r2, #2
 80043be:	4013      	ands	r3, r2
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043c2:	231f      	movs	r3, #31
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d105      	bne.n	80043d8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043cc:	4b88      	ldr	r3, [pc, #544]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 80043ce:	69da      	ldr	r2, [r3, #28]
 80043d0:	4b87      	ldr	r3, [pc, #540]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 80043d2:	4989      	ldr	r1, [pc, #548]	@ (80045f8 <HAL_RCC_OscConfig+0x628>)
 80043d4:	400a      	ands	r2, r1
 80043d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2210      	movs	r2, #16
 80043de:	4013      	ands	r3, r2
 80043e0:	d063      	beq.n	80044aa <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d12a      	bne.n	8004440 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80043ea:	4b81      	ldr	r3, [pc, #516]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 80043ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043ee:	4b80      	ldr	r3, [pc, #512]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 80043f0:	2104      	movs	r1, #4
 80043f2:	430a      	orrs	r2, r1
 80043f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80043f6:	4b7e      	ldr	r3, [pc, #504]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 80043f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043fa:	4b7d      	ldr	r3, [pc, #500]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 80043fc:	2101      	movs	r1, #1
 80043fe:	430a      	orrs	r2, r1
 8004400:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004402:	f7fe fe8d 	bl	8003120 <HAL_GetTick>
 8004406:	0003      	movs	r3, r0
 8004408:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800440c:	f7fe fe88 	bl	8003120 <HAL_GetTick>
 8004410:	0002      	movs	r2, r0
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e0e3      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800441e:	4b74      	ldr	r3, [pc, #464]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004422:	2202      	movs	r2, #2
 8004424:	4013      	ands	r3, r2
 8004426:	d0f1      	beq.n	800440c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004428:	4b71      	ldr	r3, [pc, #452]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 800442a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800442c:	22f8      	movs	r2, #248	@ 0xf8
 800442e:	4393      	bics	r3, r2
 8004430:	0019      	movs	r1, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	00da      	lsls	r2, r3, #3
 8004438:	4b6d      	ldr	r3, [pc, #436]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 800443a:	430a      	orrs	r2, r1
 800443c:	635a      	str	r2, [r3, #52]	@ 0x34
 800443e:	e034      	b.n	80044aa <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	3305      	adds	r3, #5
 8004446:	d111      	bne.n	800446c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004448:	4b69      	ldr	r3, [pc, #420]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 800444a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800444c:	4b68      	ldr	r3, [pc, #416]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 800444e:	2104      	movs	r1, #4
 8004450:	438a      	bics	r2, r1
 8004452:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004454:	4b66      	ldr	r3, [pc, #408]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004458:	22f8      	movs	r2, #248	@ 0xf8
 800445a:	4393      	bics	r3, r2
 800445c:	0019      	movs	r1, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	00da      	lsls	r2, r3, #3
 8004464:	4b62      	ldr	r3, [pc, #392]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004466:	430a      	orrs	r2, r1
 8004468:	635a      	str	r2, [r3, #52]	@ 0x34
 800446a:	e01e      	b.n	80044aa <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800446c:	4b60      	ldr	r3, [pc, #384]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 800446e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004470:	4b5f      	ldr	r3, [pc, #380]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004472:	2104      	movs	r1, #4
 8004474:	430a      	orrs	r2, r1
 8004476:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004478:	4b5d      	ldr	r3, [pc, #372]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 800447a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800447c:	4b5c      	ldr	r3, [pc, #368]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 800447e:	2101      	movs	r1, #1
 8004480:	438a      	bics	r2, r1
 8004482:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004484:	f7fe fe4c 	bl	8003120 <HAL_GetTick>
 8004488:	0003      	movs	r3, r0
 800448a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800448e:	f7fe fe47 	bl	8003120 <HAL_GetTick>
 8004492:	0002      	movs	r2, r0
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e0a2      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80044a0:	4b53      	ldr	r3, [pc, #332]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 80044a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a4:	2202      	movs	r2, #2
 80044a6:	4013      	ands	r3, r2
 80044a8:	d1f1      	bne.n	800448e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d100      	bne.n	80044b4 <HAL_RCC_OscConfig+0x4e4>
 80044b2:	e097      	b.n	80045e4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044b4:	4b4e      	ldr	r3, [pc, #312]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	220c      	movs	r2, #12
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d100      	bne.n	80044c2 <HAL_RCC_OscConfig+0x4f2>
 80044c0:	e06b      	b.n	800459a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d14c      	bne.n	8004564 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ca:	4b49      	ldr	r3, [pc, #292]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	4b48      	ldr	r3, [pc, #288]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 80044d0:	494a      	ldr	r1, [pc, #296]	@ (80045fc <HAL_RCC_OscConfig+0x62c>)
 80044d2:	400a      	ands	r2, r1
 80044d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d6:	f7fe fe23 	bl	8003120 <HAL_GetTick>
 80044da:	0003      	movs	r3, r0
 80044dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fe fe1e 	bl	8003120 <HAL_GetTick>
 80044e4:	0002      	movs	r2, r0
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e079      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044f2:	4b3f      	ldr	r3, [pc, #252]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	2380      	movs	r3, #128	@ 0x80
 80044f8:	049b      	lsls	r3, r3, #18
 80044fa:	4013      	ands	r3, r2
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044fe:	4b3c      	ldr	r3, [pc, #240]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004502:	220f      	movs	r2, #15
 8004504:	4393      	bics	r3, r2
 8004506:	0019      	movs	r1, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800450c:	4b38      	ldr	r3, [pc, #224]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 800450e:	430a      	orrs	r2, r1
 8004510:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004512:	4b37      	ldr	r3, [pc, #220]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4a3a      	ldr	r2, [pc, #232]	@ (8004600 <HAL_RCC_OscConfig+0x630>)
 8004518:	4013      	ands	r3, r2
 800451a:	0019      	movs	r1, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004524:	431a      	orrs	r2, r3
 8004526:	4b32      	ldr	r3, [pc, #200]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004528:	430a      	orrs	r2, r1
 800452a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800452c:	4b30      	ldr	r3, [pc, #192]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4b2f      	ldr	r3, [pc, #188]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004532:	2180      	movs	r1, #128	@ 0x80
 8004534:	0449      	lsls	r1, r1, #17
 8004536:	430a      	orrs	r2, r1
 8004538:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453a:	f7fe fdf1 	bl	8003120 <HAL_GetTick>
 800453e:	0003      	movs	r3, r0
 8004540:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004544:	f7fe fdec 	bl	8003120 <HAL_GetTick>
 8004548:	0002      	movs	r2, r0
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e047      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004556:	4b26      	ldr	r3, [pc, #152]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	2380      	movs	r3, #128	@ 0x80
 800455c:	049b      	lsls	r3, r3, #18
 800455e:	4013      	ands	r3, r2
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0x574>
 8004562:	e03f      	b.n	80045e4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004564:	4b22      	ldr	r3, [pc, #136]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	4b21      	ldr	r3, [pc, #132]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 800456a:	4924      	ldr	r1, [pc, #144]	@ (80045fc <HAL_RCC_OscConfig+0x62c>)
 800456c:	400a      	ands	r2, r1
 800456e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004570:	f7fe fdd6 	bl	8003120 <HAL_GetTick>
 8004574:	0003      	movs	r3, r0
 8004576:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800457a:	f7fe fdd1 	bl	8003120 <HAL_GetTick>
 800457e:	0002      	movs	r2, r0
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e02c      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800458c:	4b18      	ldr	r3, [pc, #96]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	2380      	movs	r3, #128	@ 0x80
 8004592:	049b      	lsls	r3, r3, #18
 8004594:	4013      	ands	r3, r2
 8004596:	d1f0      	bne.n	800457a <HAL_RCC_OscConfig+0x5aa>
 8004598:	e024      	b.n	80045e4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e01f      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80045a6:	4b12      	ldr	r3, [pc, #72]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80045ac:	4b10      	ldr	r3, [pc, #64]	@ (80045f0 <HAL_RCC_OscConfig+0x620>)
 80045ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	2380      	movs	r3, #128	@ 0x80
 80045b6:	025b      	lsls	r3, r3, #9
 80045b8:	401a      	ands	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045be:	429a      	cmp	r2, r3
 80045c0:	d10e      	bne.n	80045e0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	220f      	movs	r2, #15
 80045c6:	401a      	ands	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d107      	bne.n	80045e0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	23f0      	movs	r3, #240	@ 0xf0
 80045d4:	039b      	lsls	r3, r3, #14
 80045d6:	401a      	ands	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80045dc:	429a      	cmp	r2, r3
 80045de:	d001      	beq.n	80045e4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	0018      	movs	r0, r3
 80045e8:	46bd      	mov	sp, r7
 80045ea:	b008      	add	sp, #32
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	46c0      	nop			@ (mov r8, r8)
 80045f0:	40021000 	.word	0x40021000
 80045f4:	00001388 	.word	0x00001388
 80045f8:	efffffff 	.word	0xefffffff
 80045fc:	feffffff 	.word	0xfeffffff
 8004600:	ffc2ffff 	.word	0xffc2ffff

08004604 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0b3      	b.n	8004780 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004618:	4b5b      	ldr	r3, [pc, #364]	@ (8004788 <HAL_RCC_ClockConfig+0x184>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2201      	movs	r2, #1
 800461e:	4013      	ands	r3, r2
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d911      	bls.n	800464a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004626:	4b58      	ldr	r3, [pc, #352]	@ (8004788 <HAL_RCC_ClockConfig+0x184>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2201      	movs	r2, #1
 800462c:	4393      	bics	r3, r2
 800462e:	0019      	movs	r1, r3
 8004630:	4b55      	ldr	r3, [pc, #340]	@ (8004788 <HAL_RCC_ClockConfig+0x184>)
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004638:	4b53      	ldr	r3, [pc, #332]	@ (8004788 <HAL_RCC_ClockConfig+0x184>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2201      	movs	r2, #1
 800463e:	4013      	ands	r3, r2
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d001      	beq.n	800464a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e09a      	b.n	8004780 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2202      	movs	r2, #2
 8004650:	4013      	ands	r3, r2
 8004652:	d015      	beq.n	8004680 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2204      	movs	r2, #4
 800465a:	4013      	ands	r3, r2
 800465c:	d006      	beq.n	800466c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800465e:	4b4b      	ldr	r3, [pc, #300]	@ (800478c <HAL_RCC_ClockConfig+0x188>)
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	4b4a      	ldr	r3, [pc, #296]	@ (800478c <HAL_RCC_ClockConfig+0x188>)
 8004664:	21e0      	movs	r1, #224	@ 0xe0
 8004666:	00c9      	lsls	r1, r1, #3
 8004668:	430a      	orrs	r2, r1
 800466a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800466c:	4b47      	ldr	r3, [pc, #284]	@ (800478c <HAL_RCC_ClockConfig+0x188>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	22f0      	movs	r2, #240	@ 0xf0
 8004672:	4393      	bics	r3, r2
 8004674:	0019      	movs	r1, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	4b44      	ldr	r3, [pc, #272]	@ (800478c <HAL_RCC_ClockConfig+0x188>)
 800467c:	430a      	orrs	r2, r1
 800467e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2201      	movs	r2, #1
 8004686:	4013      	ands	r3, r2
 8004688:	d040      	beq.n	800470c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d107      	bne.n	80046a2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004692:	4b3e      	ldr	r3, [pc, #248]	@ (800478c <HAL_RCC_ClockConfig+0x188>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	2380      	movs	r3, #128	@ 0x80
 8004698:	029b      	lsls	r3, r3, #10
 800469a:	4013      	ands	r3, r2
 800469c:	d114      	bne.n	80046c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e06e      	b.n	8004780 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d107      	bne.n	80046ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046aa:	4b38      	ldr	r3, [pc, #224]	@ (800478c <HAL_RCC_ClockConfig+0x188>)
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	2380      	movs	r3, #128	@ 0x80
 80046b0:	049b      	lsls	r3, r3, #18
 80046b2:	4013      	ands	r3, r2
 80046b4:	d108      	bne.n	80046c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e062      	b.n	8004780 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ba:	4b34      	ldr	r3, [pc, #208]	@ (800478c <HAL_RCC_ClockConfig+0x188>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2202      	movs	r2, #2
 80046c0:	4013      	ands	r3, r2
 80046c2:	d101      	bne.n	80046c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e05b      	b.n	8004780 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046c8:	4b30      	ldr	r3, [pc, #192]	@ (800478c <HAL_RCC_ClockConfig+0x188>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2203      	movs	r2, #3
 80046ce:	4393      	bics	r3, r2
 80046d0:	0019      	movs	r1, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	4b2d      	ldr	r3, [pc, #180]	@ (800478c <HAL_RCC_ClockConfig+0x188>)
 80046d8:	430a      	orrs	r2, r1
 80046da:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046dc:	f7fe fd20 	bl	8003120 <HAL_GetTick>
 80046e0:	0003      	movs	r3, r0
 80046e2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e4:	e009      	b.n	80046fa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e6:	f7fe fd1b 	bl	8003120 <HAL_GetTick>
 80046ea:	0002      	movs	r2, r0
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	4a27      	ldr	r2, [pc, #156]	@ (8004790 <HAL_RCC_ClockConfig+0x18c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e042      	b.n	8004780 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fa:	4b24      	ldr	r3, [pc, #144]	@ (800478c <HAL_RCC_ClockConfig+0x188>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	220c      	movs	r2, #12
 8004700:	401a      	ands	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	429a      	cmp	r2, r3
 800470a:	d1ec      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800470c:	4b1e      	ldr	r3, [pc, #120]	@ (8004788 <HAL_RCC_ClockConfig+0x184>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2201      	movs	r2, #1
 8004712:	4013      	ands	r3, r2
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d211      	bcs.n	800473e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471a:	4b1b      	ldr	r3, [pc, #108]	@ (8004788 <HAL_RCC_ClockConfig+0x184>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2201      	movs	r2, #1
 8004720:	4393      	bics	r3, r2
 8004722:	0019      	movs	r1, r3
 8004724:	4b18      	ldr	r3, [pc, #96]	@ (8004788 <HAL_RCC_ClockConfig+0x184>)
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800472c:	4b16      	ldr	r3, [pc, #88]	@ (8004788 <HAL_RCC_ClockConfig+0x184>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2201      	movs	r2, #1
 8004732:	4013      	ands	r3, r2
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d001      	beq.n	800473e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e020      	b.n	8004780 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2204      	movs	r2, #4
 8004744:	4013      	ands	r3, r2
 8004746:	d009      	beq.n	800475c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004748:	4b10      	ldr	r3, [pc, #64]	@ (800478c <HAL_RCC_ClockConfig+0x188>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	4a11      	ldr	r2, [pc, #68]	@ (8004794 <HAL_RCC_ClockConfig+0x190>)
 800474e:	4013      	ands	r3, r2
 8004750:	0019      	movs	r1, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	4b0d      	ldr	r3, [pc, #52]	@ (800478c <HAL_RCC_ClockConfig+0x188>)
 8004758:	430a      	orrs	r2, r1
 800475a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800475c:	f000 f820 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 8004760:	0001      	movs	r1, r0
 8004762:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <HAL_RCC_ClockConfig+0x188>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	091b      	lsrs	r3, r3, #4
 8004768:	220f      	movs	r2, #15
 800476a:	4013      	ands	r3, r2
 800476c:	4a0a      	ldr	r2, [pc, #40]	@ (8004798 <HAL_RCC_ClockConfig+0x194>)
 800476e:	5cd3      	ldrb	r3, [r2, r3]
 8004770:	000a      	movs	r2, r1
 8004772:	40da      	lsrs	r2, r3
 8004774:	4b09      	ldr	r3, [pc, #36]	@ (800479c <HAL_RCC_ClockConfig+0x198>)
 8004776:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004778:	2003      	movs	r0, #3
 800477a:	f7fe fc8b 	bl	8003094 <HAL_InitTick>
  
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	0018      	movs	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	b004      	add	sp, #16
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40022000 	.word	0x40022000
 800478c:	40021000 	.word	0x40021000
 8004790:	00001388 	.word	0x00001388
 8004794:	fffff8ff 	.word	0xfffff8ff
 8004798:	08007994 	.word	0x08007994
 800479c:	20000000 	.word	0x20000000

080047a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	2300      	movs	r3, #0
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	2300      	movs	r3, #0
 80047b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80047ba:	4b20      	ldr	r3, [pc, #128]	@ (800483c <HAL_RCC_GetSysClockFreq+0x9c>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	220c      	movs	r2, #12
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d002      	beq.n	80047d0 <HAL_RCC_GetSysClockFreq+0x30>
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d003      	beq.n	80047d6 <HAL_RCC_GetSysClockFreq+0x36>
 80047ce:	e02c      	b.n	800482a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004840 <HAL_RCC_GetSysClockFreq+0xa0>)
 80047d2:	613b      	str	r3, [r7, #16]
      break;
 80047d4:	e02c      	b.n	8004830 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	0c9b      	lsrs	r3, r3, #18
 80047da:	220f      	movs	r2, #15
 80047dc:	4013      	ands	r3, r2
 80047de:	4a19      	ldr	r2, [pc, #100]	@ (8004844 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047e0:	5cd3      	ldrb	r3, [r2, r3]
 80047e2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80047e4:	4b15      	ldr	r3, [pc, #84]	@ (800483c <HAL_RCC_GetSysClockFreq+0x9c>)
 80047e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e8:	220f      	movs	r2, #15
 80047ea:	4013      	ands	r3, r2
 80047ec:	4a16      	ldr	r2, [pc, #88]	@ (8004848 <HAL_RCC_GetSysClockFreq+0xa8>)
 80047ee:	5cd3      	ldrb	r3, [r2, r3]
 80047f0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	2380      	movs	r3, #128	@ 0x80
 80047f6:	025b      	lsls	r3, r3, #9
 80047f8:	4013      	ands	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	4810      	ldr	r0, [pc, #64]	@ (8004840 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004800:	f7fb fc94 	bl	800012c <__udivsi3>
 8004804:	0003      	movs	r3, r0
 8004806:	001a      	movs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4353      	muls	r3, r2
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	e009      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	000a      	movs	r2, r1
 8004814:	0152      	lsls	r2, r2, #5
 8004816:	1a52      	subs	r2, r2, r1
 8004818:	0193      	lsls	r3, r2, #6
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	185b      	adds	r3, r3, r1
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	613b      	str	r3, [r7, #16]
      break;
 8004828:	e002      	b.n	8004830 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800482a:	4b05      	ldr	r3, [pc, #20]	@ (8004840 <HAL_RCC_GetSysClockFreq+0xa0>)
 800482c:	613b      	str	r3, [r7, #16]
      break;
 800482e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004830:	693b      	ldr	r3, [r7, #16]
}
 8004832:	0018      	movs	r0, r3
 8004834:	46bd      	mov	sp, r7
 8004836:	b006      	add	sp, #24
 8004838:	bd80      	pop	{r7, pc}
 800483a:	46c0      	nop			@ (mov r8, r8)
 800483c:	40021000 	.word	0x40021000
 8004840:	007a1200 	.word	0x007a1200
 8004844:	080079ac 	.word	0x080079ac
 8004848:	080079bc 	.word	0x080079bc

0800484c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004850:	4b02      	ldr	r3, [pc, #8]	@ (800485c <HAL_RCC_GetHCLKFreq+0x10>)
 8004852:	681b      	ldr	r3, [r3, #0]
}
 8004854:	0018      	movs	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	20000000 	.word	0x20000000

08004860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004864:	f7ff fff2 	bl	800484c <HAL_RCC_GetHCLKFreq>
 8004868:	0001      	movs	r1, r0
 800486a:	4b06      	ldr	r3, [pc, #24]	@ (8004884 <HAL_RCC_GetPCLK1Freq+0x24>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	0a1b      	lsrs	r3, r3, #8
 8004870:	2207      	movs	r2, #7
 8004872:	4013      	ands	r3, r2
 8004874:	4a04      	ldr	r2, [pc, #16]	@ (8004888 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004876:	5cd3      	ldrb	r3, [r2, r3]
 8004878:	40d9      	lsrs	r1, r3
 800487a:	000b      	movs	r3, r1
}    
 800487c:	0018      	movs	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	46c0      	nop			@ (mov r8, r8)
 8004884:	40021000 	.word	0x40021000
 8004888:	080079a4 	.word	0x080079a4

0800488c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	2380      	movs	r3, #128	@ 0x80
 80048a2:	025b      	lsls	r3, r3, #9
 80048a4:	4013      	ands	r3, r2
 80048a6:	d100      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80048a8:	e08e      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80048aa:	2017      	movs	r0, #23
 80048ac:	183b      	adds	r3, r7, r0
 80048ae:	2200      	movs	r2, #0
 80048b0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b2:	4b57      	ldr	r3, [pc, #348]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80048b4:	69da      	ldr	r2, [r3, #28]
 80048b6:	2380      	movs	r3, #128	@ 0x80
 80048b8:	055b      	lsls	r3, r3, #21
 80048ba:	4013      	ands	r3, r2
 80048bc:	d110      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048be:	4b54      	ldr	r3, [pc, #336]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80048c0:	69da      	ldr	r2, [r3, #28]
 80048c2:	4b53      	ldr	r3, [pc, #332]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80048c4:	2180      	movs	r1, #128	@ 0x80
 80048c6:	0549      	lsls	r1, r1, #21
 80048c8:	430a      	orrs	r2, r1
 80048ca:	61da      	str	r2, [r3, #28]
 80048cc:	4b50      	ldr	r3, [pc, #320]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80048ce:	69da      	ldr	r2, [r3, #28]
 80048d0:	2380      	movs	r3, #128	@ 0x80
 80048d2:	055b      	lsls	r3, r3, #21
 80048d4:	4013      	ands	r3, r2
 80048d6:	60bb      	str	r3, [r7, #8]
 80048d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048da:	183b      	adds	r3, r7, r0
 80048dc:	2201      	movs	r2, #1
 80048de:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e0:	4b4c      	ldr	r3, [pc, #304]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	2380      	movs	r3, #128	@ 0x80
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	4013      	ands	r3, r2
 80048ea:	d11a      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ec:	4b49      	ldr	r3, [pc, #292]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	4b48      	ldr	r3, [pc, #288]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80048f2:	2180      	movs	r1, #128	@ 0x80
 80048f4:	0049      	lsls	r1, r1, #1
 80048f6:	430a      	orrs	r2, r1
 80048f8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048fa:	f7fe fc11 	bl	8003120 <HAL_GetTick>
 80048fe:	0003      	movs	r3, r0
 8004900:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004902:	e008      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004904:	f7fe fc0c 	bl	8003120 <HAL_GetTick>
 8004908:	0002      	movs	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b64      	cmp	r3, #100	@ 0x64
 8004910:	d901      	bls.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e077      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004916:	4b3f      	ldr	r3, [pc, #252]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	2380      	movs	r3, #128	@ 0x80
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	4013      	ands	r3, r2
 8004920:	d0f0      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004922:	4b3b      	ldr	r3, [pc, #236]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004924:	6a1a      	ldr	r2, [r3, #32]
 8004926:	23c0      	movs	r3, #192	@ 0xc0
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4013      	ands	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d034      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	23c0      	movs	r3, #192	@ 0xc0
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4013      	ands	r3, r2
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	429a      	cmp	r2, r3
 8004942:	d02c      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004944:	4b32      	ldr	r3, [pc, #200]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	4a33      	ldr	r2, [pc, #204]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800494a:	4013      	ands	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800494e:	4b30      	ldr	r3, [pc, #192]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004950:	6a1a      	ldr	r2, [r3, #32]
 8004952:	4b2f      	ldr	r3, [pc, #188]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004954:	2180      	movs	r1, #128	@ 0x80
 8004956:	0249      	lsls	r1, r1, #9
 8004958:	430a      	orrs	r2, r1
 800495a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800495c:	4b2c      	ldr	r3, [pc, #176]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800495e:	6a1a      	ldr	r2, [r3, #32]
 8004960:	4b2b      	ldr	r3, [pc, #172]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004962:	492e      	ldr	r1, [pc, #184]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004964:	400a      	ands	r2, r1
 8004966:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004968:	4b29      	ldr	r3, [pc, #164]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	4013      	ands	r3, r2
 8004974:	d013      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004976:	f7fe fbd3 	bl	8003120 <HAL_GetTick>
 800497a:	0003      	movs	r3, r0
 800497c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497e:	e009      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004980:	f7fe fbce 	bl	8003120 <HAL_GetTick>
 8004984:	0002      	movs	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	4a25      	ldr	r2, [pc, #148]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d901      	bls.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e038      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004994:	4b1e      	ldr	r3, [pc, #120]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	2202      	movs	r2, #2
 800499a:	4013      	ands	r3, r2
 800499c:	d0f0      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800499e:	4b1c      	ldr	r3, [pc, #112]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	0019      	movs	r1, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	4b18      	ldr	r3, [pc, #96]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049ae:	430a      	orrs	r2, r1
 80049b0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049b2:	2317      	movs	r3, #23
 80049b4:	18fb      	adds	r3, r7, r3
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d105      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049bc:	4b14      	ldr	r3, [pc, #80]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049be:	69da      	ldr	r2, [r3, #28]
 80049c0:	4b13      	ldr	r3, [pc, #76]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049c2:	4918      	ldr	r1, [pc, #96]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80049c4:	400a      	ands	r2, r1
 80049c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2201      	movs	r2, #1
 80049ce:	4013      	ands	r3, r2
 80049d0:	d009      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d6:	2203      	movs	r2, #3
 80049d8:	4393      	bics	r3, r2
 80049da:	0019      	movs	r1, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049e2:	430a      	orrs	r2, r1
 80049e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2220      	movs	r2, #32
 80049ec:	4013      	ands	r3, r2
 80049ee:	d009      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049f0:	4b07      	ldr	r3, [pc, #28]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f4:	2210      	movs	r2, #16
 80049f6:	4393      	bics	r3, r2
 80049f8:	0019      	movs	r1, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	4b04      	ldr	r3, [pc, #16]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004a00:	430a      	orrs	r2, r1
 8004a02:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	0018      	movs	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b006      	add	sp, #24
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	46c0      	nop			@ (mov r8, r8)
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40007000 	.word	0x40007000
 8004a18:	fffffcff 	.word	0xfffffcff
 8004a1c:	fffeffff 	.word	0xfffeffff
 8004a20:	00001388 	.word	0x00001388
 8004a24:	efffffff 	.word	0xefffffff

08004a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e042      	b.n	8004ac0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	223d      	movs	r2, #61	@ 0x3d
 8004a3e:	5c9b      	ldrb	r3, [r3, r2]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d107      	bne.n	8004a56 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	223c      	movs	r2, #60	@ 0x3c
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	0018      	movs	r0, r3
 8004a52:	f7fe f911 	bl	8002c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	223d      	movs	r2, #61	@ 0x3d
 8004a5a:	2102      	movs	r1, #2
 8004a5c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3304      	adds	r3, #4
 8004a66:	0019      	movs	r1, r3
 8004a68:	0010      	movs	r0, r2
 8004a6a:	f000 fab5 	bl	8004fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2246      	movs	r2, #70	@ 0x46
 8004a72:	2101      	movs	r1, #1
 8004a74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	223e      	movs	r2, #62	@ 0x3e
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	5499      	strb	r1, [r3, r2]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	223f      	movs	r2, #63	@ 0x3f
 8004a82:	2101      	movs	r1, #1
 8004a84:	5499      	strb	r1, [r3, r2]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2240      	movs	r2, #64	@ 0x40
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	5499      	strb	r1, [r3, r2]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2241      	movs	r2, #65	@ 0x41
 8004a92:	2101      	movs	r1, #1
 8004a94:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2242      	movs	r2, #66	@ 0x42
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	5499      	strb	r1, [r3, r2]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2243      	movs	r2, #67	@ 0x43
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	5499      	strb	r1, [r3, r2]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2244      	movs	r2, #68	@ 0x44
 8004aaa:	2101      	movs	r1, #1
 8004aac:	5499      	strb	r1, [r3, r2]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2245      	movs	r2, #69	@ 0x45
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	223d      	movs	r2, #61	@ 0x3d
 8004aba:	2101      	movs	r1, #1
 8004abc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	b002      	add	sp, #8
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	223d      	movs	r2, #61	@ 0x3d
 8004ad4:	5c9b      	ldrb	r3, [r3, r2]
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d001      	beq.n	8004ae0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e02d      	b.n	8004b3c <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	223d      	movs	r2, #61	@ 0x3d
 8004ae4:	2102      	movs	r1, #2
 8004ae6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a15      	ldr	r2, [pc, #84]	@ (8004b44 <HAL_TIM_Base_Start+0x7c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d009      	beq.n	8004b06 <HAL_TIM_Base_Start+0x3e>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a14      	ldr	r2, [pc, #80]	@ (8004b48 <HAL_TIM_Base_Start+0x80>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d004      	beq.n	8004b06 <HAL_TIM_Base_Start+0x3e>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a12      	ldr	r2, [pc, #72]	@ (8004b4c <HAL_TIM_Base_Start+0x84>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d111      	bne.n	8004b2a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2207      	movs	r2, #7
 8004b0e:	4013      	ands	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b06      	cmp	r3, #6
 8004b16:	d010      	beq.n	8004b3a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2101      	movs	r1, #1
 8004b24:	430a      	orrs	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b28:	e007      	b.n	8004b3a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2101      	movs	r1, #1
 8004b36:	430a      	orrs	r2, r1
 8004b38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b004      	add	sp, #16
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40000400 	.word	0x40000400
 8004b4c:	40014000 	.word	0x40014000

08004b50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e042      	b.n	8004be8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	223d      	movs	r2, #61	@ 0x3d
 8004b66:	5c9b      	ldrb	r3, [r3, r2]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d107      	bne.n	8004b7e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	223c      	movs	r2, #60	@ 0x3c
 8004b72:	2100      	movs	r1, #0
 8004b74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f7fe f849 	bl	8002c10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	223d      	movs	r2, #61	@ 0x3d
 8004b82:	2102      	movs	r1, #2
 8004b84:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	0019      	movs	r1, r3
 8004b90:	0010      	movs	r0, r2
 8004b92:	f000 fa21 	bl	8004fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2246      	movs	r2, #70	@ 0x46
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	223e      	movs	r2, #62	@ 0x3e
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	5499      	strb	r1, [r3, r2]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	223f      	movs	r2, #63	@ 0x3f
 8004baa:	2101      	movs	r1, #1
 8004bac:	5499      	strb	r1, [r3, r2]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2240      	movs	r2, #64	@ 0x40
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	5499      	strb	r1, [r3, r2]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2241      	movs	r2, #65	@ 0x41
 8004bba:	2101      	movs	r1, #1
 8004bbc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2242      	movs	r2, #66	@ 0x42
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	5499      	strb	r1, [r3, r2]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2243      	movs	r2, #67	@ 0x43
 8004bca:	2101      	movs	r1, #1
 8004bcc:	5499      	strb	r1, [r3, r2]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2244      	movs	r2, #68	@ 0x44
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	5499      	strb	r1, [r3, r2]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2245      	movs	r2, #69	@ 0x45
 8004bda:	2101      	movs	r1, #1
 8004bdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	223d      	movs	r2, #61	@ 0x3d
 8004be2:	2101      	movs	r1, #1
 8004be4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	0018      	movs	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b002      	add	sp, #8
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d108      	bne.n	8004c12 <HAL_TIM_PWM_Start+0x22>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	223e      	movs	r2, #62	@ 0x3e
 8004c04:	5c9b      	ldrb	r3, [r3, r2]
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	1e5a      	subs	r2, r3, #1
 8004c0c:	4193      	sbcs	r3, r2
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	e01f      	b.n	8004c52 <HAL_TIM_PWM_Start+0x62>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d108      	bne.n	8004c2a <HAL_TIM_PWM_Start+0x3a>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	223f      	movs	r2, #63	@ 0x3f
 8004c1c:	5c9b      	ldrb	r3, [r3, r2]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	1e5a      	subs	r2, r3, #1
 8004c24:	4193      	sbcs	r3, r2
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	e013      	b.n	8004c52 <HAL_TIM_PWM_Start+0x62>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d108      	bne.n	8004c42 <HAL_TIM_PWM_Start+0x52>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2240      	movs	r2, #64	@ 0x40
 8004c34:	5c9b      	ldrb	r3, [r3, r2]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	1e5a      	subs	r2, r3, #1
 8004c3c:	4193      	sbcs	r3, r2
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	e007      	b.n	8004c52 <HAL_TIM_PWM_Start+0x62>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2241      	movs	r2, #65	@ 0x41
 8004c46:	5c9b      	ldrb	r3, [r3, r2]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	1e5a      	subs	r2, r3, #1
 8004c4e:	4193      	sbcs	r3, r2
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e06e      	b.n	8004d38 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d104      	bne.n	8004c6a <HAL_TIM_PWM_Start+0x7a>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	223e      	movs	r2, #62	@ 0x3e
 8004c64:	2102      	movs	r1, #2
 8004c66:	5499      	strb	r1, [r3, r2]
 8004c68:	e013      	b.n	8004c92 <HAL_TIM_PWM_Start+0xa2>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d104      	bne.n	8004c7a <HAL_TIM_PWM_Start+0x8a>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	223f      	movs	r2, #63	@ 0x3f
 8004c74:	2102      	movs	r1, #2
 8004c76:	5499      	strb	r1, [r3, r2]
 8004c78:	e00b      	b.n	8004c92 <HAL_TIM_PWM_Start+0xa2>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d104      	bne.n	8004c8a <HAL_TIM_PWM_Start+0x9a>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2240      	movs	r2, #64	@ 0x40
 8004c84:	2102      	movs	r1, #2
 8004c86:	5499      	strb	r1, [r3, r2]
 8004c88:	e003      	b.n	8004c92 <HAL_TIM_PWM_Start+0xa2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2241      	movs	r2, #65	@ 0x41
 8004c8e:	2102      	movs	r1, #2
 8004c90:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6839      	ldr	r1, [r7, #0]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f000 fc1c 	bl	80054d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a26      	ldr	r2, [pc, #152]	@ (8004d40 <HAL_TIM_PWM_Start+0x150>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00e      	beq.n	8004cc8 <HAL_TIM_PWM_Start+0xd8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a25      	ldr	r2, [pc, #148]	@ (8004d44 <HAL_TIM_PWM_Start+0x154>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d009      	beq.n	8004cc8 <HAL_TIM_PWM_Start+0xd8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a23      	ldr	r2, [pc, #140]	@ (8004d48 <HAL_TIM_PWM_Start+0x158>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d004      	beq.n	8004cc8 <HAL_TIM_PWM_Start+0xd8>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a22      	ldr	r2, [pc, #136]	@ (8004d4c <HAL_TIM_PWM_Start+0x15c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d101      	bne.n	8004ccc <HAL_TIM_PWM_Start+0xdc>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <HAL_TIM_PWM_Start+0xde>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2180      	movs	r1, #128	@ 0x80
 8004cde:	0209      	lsls	r1, r1, #8
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a15      	ldr	r2, [pc, #84]	@ (8004d40 <HAL_TIM_PWM_Start+0x150>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d009      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x112>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a17      	ldr	r2, [pc, #92]	@ (8004d50 <HAL_TIM_PWM_Start+0x160>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d004      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x112>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a11      	ldr	r2, [pc, #68]	@ (8004d44 <HAL_TIM_PWM_Start+0x154>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d111      	bne.n	8004d26 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2207      	movs	r2, #7
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b06      	cmp	r3, #6
 8004d12:	d010      	beq.n	8004d36 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2101      	movs	r1, #1
 8004d20:	430a      	orrs	r2, r1
 8004d22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d24:	e007      	b.n	8004d36 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2101      	movs	r1, #1
 8004d32:	430a      	orrs	r2, r1
 8004d34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	0018      	movs	r0, r3
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	b004      	add	sp, #16
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40012c00 	.word	0x40012c00
 8004d44:	40014000 	.word	0x40014000
 8004d48:	40014400 	.word	0x40014400
 8004d4c:	40014800 	.word	0x40014800
 8004d50:	40000400 	.word	0x40000400

08004d54 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6839      	ldr	r1, [r7, #0]
 8004d64:	2200      	movs	r2, #0
 8004d66:	0018      	movs	r0, r3
 8004d68:	f000 fbb6 	bl	80054d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a2f      	ldr	r2, [pc, #188]	@ (8004e30 <HAL_TIM_PWM_Stop+0xdc>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00e      	beq.n	8004d94 <HAL_TIM_PWM_Stop+0x40>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a2e      	ldr	r2, [pc, #184]	@ (8004e34 <HAL_TIM_PWM_Stop+0xe0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d009      	beq.n	8004d94 <HAL_TIM_PWM_Stop+0x40>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a2c      	ldr	r2, [pc, #176]	@ (8004e38 <HAL_TIM_PWM_Stop+0xe4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d004      	beq.n	8004d94 <HAL_TIM_PWM_Stop+0x40>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8004e3c <HAL_TIM_PWM_Stop+0xe8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d101      	bne.n	8004d98 <HAL_TIM_PWM_Stop+0x44>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <HAL_TIM_PWM_Stop+0x46>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d013      	beq.n	8004dc6 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	4a26      	ldr	r2, [pc, #152]	@ (8004e40 <HAL_TIM_PWM_Stop+0xec>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	d10d      	bne.n	8004dc6 <HAL_TIM_PWM_Stop+0x72>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	4a24      	ldr	r2, [pc, #144]	@ (8004e44 <HAL_TIM_PWM_Stop+0xf0>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	d107      	bne.n	8004dc6 <HAL_TIM_PWM_Stop+0x72>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4921      	ldr	r1, [pc, #132]	@ (8004e48 <HAL_TIM_PWM_Stop+0xf4>)
 8004dc2:	400a      	ands	r2, r1
 8004dc4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8004e40 <HAL_TIM_PWM_Stop+0xec>)
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d10d      	bne.n	8004dee <HAL_TIM_PWM_Stop+0x9a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	4a1a      	ldr	r2, [pc, #104]	@ (8004e44 <HAL_TIM_PWM_Stop+0xf0>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d107      	bne.n	8004dee <HAL_TIM_PWM_Stop+0x9a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2101      	movs	r1, #1
 8004dea:	438a      	bics	r2, r1
 8004dec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d104      	bne.n	8004dfe <HAL_TIM_PWM_Stop+0xaa>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	223e      	movs	r2, #62	@ 0x3e
 8004df8:	2101      	movs	r1, #1
 8004dfa:	5499      	strb	r1, [r3, r2]
 8004dfc:	e013      	b.n	8004e26 <HAL_TIM_PWM_Stop+0xd2>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d104      	bne.n	8004e0e <HAL_TIM_PWM_Stop+0xba>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	223f      	movs	r2, #63	@ 0x3f
 8004e08:	2101      	movs	r1, #1
 8004e0a:	5499      	strb	r1, [r3, r2]
 8004e0c:	e00b      	b.n	8004e26 <HAL_TIM_PWM_Stop+0xd2>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d104      	bne.n	8004e1e <HAL_TIM_PWM_Stop+0xca>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2240      	movs	r2, #64	@ 0x40
 8004e18:	2101      	movs	r1, #1
 8004e1a:	5499      	strb	r1, [r3, r2]
 8004e1c:	e003      	b.n	8004e26 <HAL_TIM_PWM_Stop+0xd2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2241      	movs	r2, #65	@ 0x41
 8004e22:	2101      	movs	r1, #1
 8004e24:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	0018      	movs	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b002      	add	sp, #8
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40012c00 	.word	0x40012c00
 8004e34:	40014000 	.word	0x40014000
 8004e38:	40014400 	.word	0x40014400
 8004e3c:	40014800 	.word	0x40014800
 8004e40:	00001111 	.word	0x00001111
 8004e44:	00000444 	.word	0x00000444
 8004e48:	ffff7fff 	.word	0xffff7fff

08004e4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e58:	2317      	movs	r3, #23
 8004e5a:	18fb      	adds	r3, r7, r3
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	223c      	movs	r2, #60	@ 0x3c
 8004e64:	5c9b      	ldrb	r3, [r3, r2]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d101      	bne.n	8004e6e <HAL_TIM_PWM_ConfigChannel+0x22>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	e0ad      	b.n	8004fca <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	223c      	movs	r2, #60	@ 0x3c
 8004e72:	2101      	movs	r1, #1
 8004e74:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b0c      	cmp	r3, #12
 8004e7a:	d100      	bne.n	8004e7e <HAL_TIM_PWM_ConfigChannel+0x32>
 8004e7c:	e076      	b.n	8004f6c <HAL_TIM_PWM_ConfigChannel+0x120>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b0c      	cmp	r3, #12
 8004e82:	d900      	bls.n	8004e86 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004e84:	e095      	b.n	8004fb2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d04e      	beq.n	8004f2a <HAL_TIM_PWM_ConfigChannel+0xde>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d900      	bls.n	8004e94 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004e92:	e08e      	b.n	8004fb2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d021      	beq.n	8004ee4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004ea0:	e087      	b.n	8004fb2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	0011      	movs	r1, r2
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f000 f918 	bl	80050e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2108      	movs	r1, #8
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2104      	movs	r1, #4
 8004ecc:	438a      	bics	r2, r1
 8004ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6999      	ldr	r1, [r3, #24]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	619a      	str	r2, [r3, #24]
      break;
 8004ee2:	e06b      	b.n	8004fbc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	0011      	movs	r1, r2
 8004eec:	0018      	movs	r0, r3
 8004eee:	f000 f97f 	bl	80051f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699a      	ldr	r2, [r3, #24]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2180      	movs	r1, #128	@ 0x80
 8004efe:	0109      	lsls	r1, r1, #4
 8004f00:	430a      	orrs	r2, r1
 8004f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4931      	ldr	r1, [pc, #196]	@ (8004fd4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004f10:	400a      	ands	r2, r1
 8004f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6999      	ldr	r1, [r3, #24]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	021a      	lsls	r2, r3, #8
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	619a      	str	r2, [r3, #24]
      break;
 8004f28:	e048      	b.n	8004fbc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	0011      	movs	r1, r2
 8004f32:	0018      	movs	r0, r3
 8004f34:	f000 f9e0 	bl	80052f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69da      	ldr	r2, [r3, #28]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2108      	movs	r1, #8
 8004f44:	430a      	orrs	r2, r1
 8004f46:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69da      	ldr	r2, [r3, #28]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2104      	movs	r1, #4
 8004f54:	438a      	bics	r2, r1
 8004f56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	69d9      	ldr	r1, [r3, #28]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	691a      	ldr	r2, [r3, #16]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	61da      	str	r2, [r3, #28]
      break;
 8004f6a:	e027      	b.n	8004fbc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	0011      	movs	r1, r2
 8004f74:	0018      	movs	r0, r3
 8004f76:	f000 fa45 	bl	8005404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69da      	ldr	r2, [r3, #28]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2180      	movs	r1, #128	@ 0x80
 8004f86:	0109      	lsls	r1, r1, #4
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69da      	ldr	r2, [r3, #28]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	490f      	ldr	r1, [pc, #60]	@ (8004fd4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004f98:	400a      	ands	r2, r1
 8004f9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69d9      	ldr	r1, [r3, #28]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	021a      	lsls	r2, r3, #8
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	61da      	str	r2, [r3, #28]
      break;
 8004fb0:	e004      	b.n	8004fbc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004fb2:	2317      	movs	r3, #23
 8004fb4:	18fb      	adds	r3, r7, r3
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	701a      	strb	r2, [r3, #0]
      break;
 8004fba:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	223c      	movs	r2, #60	@ 0x3c
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	5499      	strb	r1, [r3, r2]

  return status;
 8004fc4:	2317      	movs	r3, #23
 8004fc6:	18fb      	adds	r3, r7, r3
 8004fc8:	781b      	ldrb	r3, [r3, #0]
}
 8004fca:	0018      	movs	r0, r3
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	b006      	add	sp, #24
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	46c0      	nop			@ (mov r8, r8)
 8004fd4:	fffffbff 	.word	0xfffffbff

08004fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a36      	ldr	r2, [pc, #216]	@ (80050c4 <TIM_Base_SetConfig+0xec>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_Base_SetConfig+0x20>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a35      	ldr	r2, [pc, #212]	@ (80050c8 <TIM_Base_SetConfig+0xf0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d108      	bne.n	800500a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2270      	movs	r2, #112	@ 0x70
 8004ffc:	4393      	bics	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a2d      	ldr	r2, [pc, #180]	@ (80050c4 <TIM_Base_SetConfig+0xec>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d013      	beq.n	800503a <TIM_Base_SetConfig+0x62>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a2c      	ldr	r2, [pc, #176]	@ (80050c8 <TIM_Base_SetConfig+0xf0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00f      	beq.n	800503a <TIM_Base_SetConfig+0x62>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a2b      	ldr	r2, [pc, #172]	@ (80050cc <TIM_Base_SetConfig+0xf4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00b      	beq.n	800503a <TIM_Base_SetConfig+0x62>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a2a      	ldr	r2, [pc, #168]	@ (80050d0 <TIM_Base_SetConfig+0xf8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d007      	beq.n	800503a <TIM_Base_SetConfig+0x62>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a29      	ldr	r2, [pc, #164]	@ (80050d4 <TIM_Base_SetConfig+0xfc>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_Base_SetConfig+0x62>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a28      	ldr	r2, [pc, #160]	@ (80050d8 <TIM_Base_SetConfig+0x100>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d108      	bne.n	800504c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4a27      	ldr	r2, [pc, #156]	@ (80050dc <TIM_Base_SetConfig+0x104>)
 800503e:	4013      	ands	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2280      	movs	r2, #128	@ 0x80
 8005050:	4393      	bics	r3, r2
 8005052:	001a      	movs	r2, r3
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a13      	ldr	r2, [pc, #76]	@ (80050c4 <TIM_Base_SetConfig+0xec>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00b      	beq.n	8005092 <TIM_Base_SetConfig+0xba>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a14      	ldr	r2, [pc, #80]	@ (80050d0 <TIM_Base_SetConfig+0xf8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d007      	beq.n	8005092 <TIM_Base_SetConfig+0xba>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a13      	ldr	r2, [pc, #76]	@ (80050d4 <TIM_Base_SetConfig+0xfc>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d003      	beq.n	8005092 <TIM_Base_SetConfig+0xba>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a12      	ldr	r2, [pc, #72]	@ (80050d8 <TIM_Base_SetConfig+0x100>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d103      	bne.n	800509a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2201      	movs	r2, #1
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d106      	bne.n	80050ba <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	2201      	movs	r2, #1
 80050b2:	4393      	bics	r3, r2
 80050b4:	001a      	movs	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	611a      	str	r2, [r3, #16]
  }
}
 80050ba:	46c0      	nop			@ (mov r8, r8)
 80050bc:	46bd      	mov	sp, r7
 80050be:	b004      	add	sp, #16
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	46c0      	nop			@ (mov r8, r8)
 80050c4:	40012c00 	.word	0x40012c00
 80050c8:	40000400 	.word	0x40000400
 80050cc:	40002000 	.word	0x40002000
 80050d0:	40014000 	.word	0x40014000
 80050d4:	40014400 	.word	0x40014400
 80050d8:	40014800 	.word	0x40014800
 80050dc:	fffffcff 	.word	0xfffffcff

080050e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	2201      	movs	r2, #1
 80050f6:	4393      	bics	r3, r2
 80050f8:	001a      	movs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2270      	movs	r2, #112	@ 0x70
 800510e:	4393      	bics	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2203      	movs	r2, #3
 8005116:	4393      	bics	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2202      	movs	r2, #2
 8005128:	4393      	bics	r3, r2
 800512a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a27      	ldr	r2, [pc, #156]	@ (80051d8 <TIM_OC1_SetConfig+0xf8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00b      	beq.n	8005156 <TIM_OC1_SetConfig+0x76>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a26      	ldr	r2, [pc, #152]	@ (80051dc <TIM_OC1_SetConfig+0xfc>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d007      	beq.n	8005156 <TIM_OC1_SetConfig+0x76>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a25      	ldr	r2, [pc, #148]	@ (80051e0 <TIM_OC1_SetConfig+0x100>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d003      	beq.n	8005156 <TIM_OC1_SetConfig+0x76>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a24      	ldr	r2, [pc, #144]	@ (80051e4 <TIM_OC1_SetConfig+0x104>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d10c      	bne.n	8005170 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2208      	movs	r2, #8
 800515a:	4393      	bics	r3, r2
 800515c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2204      	movs	r2, #4
 800516c:	4393      	bics	r3, r2
 800516e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a19      	ldr	r2, [pc, #100]	@ (80051d8 <TIM_OC1_SetConfig+0xf8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00b      	beq.n	8005190 <TIM_OC1_SetConfig+0xb0>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a18      	ldr	r2, [pc, #96]	@ (80051dc <TIM_OC1_SetConfig+0xfc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d007      	beq.n	8005190 <TIM_OC1_SetConfig+0xb0>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a17      	ldr	r2, [pc, #92]	@ (80051e0 <TIM_OC1_SetConfig+0x100>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d003      	beq.n	8005190 <TIM_OC1_SetConfig+0xb0>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a16      	ldr	r2, [pc, #88]	@ (80051e4 <TIM_OC1_SetConfig+0x104>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d111      	bne.n	80051b4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	4a15      	ldr	r2, [pc, #84]	@ (80051e8 <TIM_OC1_SetConfig+0x108>)
 8005194:	4013      	ands	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	4a14      	ldr	r2, [pc, #80]	@ (80051ec <TIM_OC1_SetConfig+0x10c>)
 800519c:	4013      	ands	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	621a      	str	r2, [r3, #32]
}
 80051ce:	46c0      	nop			@ (mov r8, r8)
 80051d0:	46bd      	mov	sp, r7
 80051d2:	b006      	add	sp, #24
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	46c0      	nop			@ (mov r8, r8)
 80051d8:	40012c00 	.word	0x40012c00
 80051dc:	40014000 	.word	0x40014000
 80051e0:	40014400 	.word	0x40014400
 80051e4:	40014800 	.word	0x40014800
 80051e8:	fffffeff 	.word	0xfffffeff
 80051ec:	fffffdff 	.word	0xfffffdff

080051f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	2210      	movs	r2, #16
 8005206:	4393      	bics	r3, r2
 8005208:	001a      	movs	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4a2e      	ldr	r2, [pc, #184]	@ (80052d8 <TIM_OC2_SetConfig+0xe8>)
 800521e:	4013      	ands	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4a2d      	ldr	r2, [pc, #180]	@ (80052dc <TIM_OC2_SetConfig+0xec>)
 8005226:	4013      	ands	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	021b      	lsls	r3, r3, #8
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2220      	movs	r2, #32
 800523a:	4393      	bics	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a24      	ldr	r2, [pc, #144]	@ (80052e0 <TIM_OC2_SetConfig+0xf0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d10d      	bne.n	800526e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2280      	movs	r2, #128	@ 0x80
 8005256:	4393      	bics	r3, r2
 8005258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2240      	movs	r2, #64	@ 0x40
 800526a:	4393      	bics	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a1b      	ldr	r2, [pc, #108]	@ (80052e0 <TIM_OC2_SetConfig+0xf0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00b      	beq.n	800528e <TIM_OC2_SetConfig+0x9e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a1a      	ldr	r2, [pc, #104]	@ (80052e4 <TIM_OC2_SetConfig+0xf4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d007      	beq.n	800528e <TIM_OC2_SetConfig+0x9e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a19      	ldr	r2, [pc, #100]	@ (80052e8 <TIM_OC2_SetConfig+0xf8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d003      	beq.n	800528e <TIM_OC2_SetConfig+0x9e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a18      	ldr	r2, [pc, #96]	@ (80052ec <TIM_OC2_SetConfig+0xfc>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d113      	bne.n	80052b6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4a17      	ldr	r2, [pc, #92]	@ (80052f0 <TIM_OC2_SetConfig+0x100>)
 8005292:	4013      	ands	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	4a16      	ldr	r2, [pc, #88]	@ (80052f4 <TIM_OC2_SetConfig+0x104>)
 800529a:	4013      	ands	r3, r2
 800529c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	621a      	str	r2, [r3, #32]
}
 80052d0:	46c0      	nop			@ (mov r8, r8)
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b006      	add	sp, #24
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	ffff8fff 	.word	0xffff8fff
 80052dc:	fffffcff 	.word	0xfffffcff
 80052e0:	40012c00 	.word	0x40012c00
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40014400 	.word	0x40014400
 80052ec:	40014800 	.word	0x40014800
 80052f0:	fffffbff 	.word	0xfffffbff
 80052f4:	fffff7ff 	.word	0xfffff7ff

080052f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	4a33      	ldr	r2, [pc, #204]	@ (80053dc <TIM_OC3_SetConfig+0xe4>)
 800530e:	401a      	ands	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2270      	movs	r2, #112	@ 0x70
 8005324:	4393      	bics	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2203      	movs	r2, #3
 800532c:	4393      	bics	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	4a28      	ldr	r2, [pc, #160]	@ (80053e0 <TIM_OC3_SetConfig+0xe8>)
 800533e:	4013      	ands	r3, r2
 8005340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a24      	ldr	r2, [pc, #144]	@ (80053e4 <TIM_OC3_SetConfig+0xec>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d10d      	bne.n	8005372 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	4a23      	ldr	r2, [pc, #140]	@ (80053e8 <TIM_OC3_SetConfig+0xf0>)
 800535a:	4013      	ands	r3, r2
 800535c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	021b      	lsls	r3, r3, #8
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	4a1f      	ldr	r2, [pc, #124]	@ (80053ec <TIM_OC3_SetConfig+0xf4>)
 800536e:	4013      	ands	r3, r2
 8005370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a1b      	ldr	r2, [pc, #108]	@ (80053e4 <TIM_OC3_SetConfig+0xec>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00b      	beq.n	8005392 <TIM_OC3_SetConfig+0x9a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a1c      	ldr	r2, [pc, #112]	@ (80053f0 <TIM_OC3_SetConfig+0xf8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d007      	beq.n	8005392 <TIM_OC3_SetConfig+0x9a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a1b      	ldr	r2, [pc, #108]	@ (80053f4 <TIM_OC3_SetConfig+0xfc>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d003      	beq.n	8005392 <TIM_OC3_SetConfig+0x9a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a1a      	ldr	r2, [pc, #104]	@ (80053f8 <TIM_OC3_SetConfig+0x100>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d113      	bne.n	80053ba <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4a19      	ldr	r2, [pc, #100]	@ (80053fc <TIM_OC3_SetConfig+0x104>)
 8005396:	4013      	ands	r3, r2
 8005398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	4a18      	ldr	r2, [pc, #96]	@ (8005400 <TIM_OC3_SetConfig+0x108>)
 800539e:	4013      	ands	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	621a      	str	r2, [r3, #32]
}
 80053d4:	46c0      	nop			@ (mov r8, r8)
 80053d6:	46bd      	mov	sp, r7
 80053d8:	b006      	add	sp, #24
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	fffffeff 	.word	0xfffffeff
 80053e0:	fffffdff 	.word	0xfffffdff
 80053e4:	40012c00 	.word	0x40012c00
 80053e8:	fffff7ff 	.word	0xfffff7ff
 80053ec:	fffffbff 	.word	0xfffffbff
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40014400 	.word	0x40014400
 80053f8:	40014800 	.word	0x40014800
 80053fc:	ffffefff 	.word	0xffffefff
 8005400:	ffffdfff 	.word	0xffffdfff

08005404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	4a26      	ldr	r2, [pc, #152]	@ (80054b4 <TIM_OC4_SetConfig+0xb0>)
 800541a:	401a      	ands	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4a22      	ldr	r2, [pc, #136]	@ (80054b8 <TIM_OC4_SetConfig+0xb4>)
 8005430:	4013      	ands	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4a21      	ldr	r2, [pc, #132]	@ (80054bc <TIM_OC4_SetConfig+0xb8>)
 8005438:	4013      	ands	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	4a1d      	ldr	r2, [pc, #116]	@ (80054c0 <TIM_OC4_SetConfig+0xbc>)
 800544c:	4013      	ands	r3, r2
 800544e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	031b      	lsls	r3, r3, #12
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a19      	ldr	r2, [pc, #100]	@ (80054c4 <TIM_OC4_SetConfig+0xc0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00b      	beq.n	800547c <TIM_OC4_SetConfig+0x78>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a18      	ldr	r2, [pc, #96]	@ (80054c8 <TIM_OC4_SetConfig+0xc4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d007      	beq.n	800547c <TIM_OC4_SetConfig+0x78>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a17      	ldr	r2, [pc, #92]	@ (80054cc <TIM_OC4_SetConfig+0xc8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_OC4_SetConfig+0x78>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a16      	ldr	r2, [pc, #88]	@ (80054d0 <TIM_OC4_SetConfig+0xcc>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d109      	bne.n	8005490 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	4a15      	ldr	r2, [pc, #84]	@ (80054d4 <TIM_OC4_SetConfig+0xd0>)
 8005480:	4013      	ands	r3, r2
 8005482:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	019b      	lsls	r3, r3, #6
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	46c0      	nop			@ (mov r8, r8)
 80054ac:	46bd      	mov	sp, r7
 80054ae:	b006      	add	sp, #24
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	46c0      	nop			@ (mov r8, r8)
 80054b4:	ffffefff 	.word	0xffffefff
 80054b8:	ffff8fff 	.word	0xffff8fff
 80054bc:	fffffcff 	.word	0xfffffcff
 80054c0:	ffffdfff 	.word	0xffffdfff
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40014000 	.word	0x40014000
 80054cc:	40014400 	.word	0x40014400
 80054d0:	40014800 	.word	0x40014800
 80054d4:	ffffbfff 	.word	0xffffbfff

080054d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	221f      	movs	r2, #31
 80054e8:	4013      	ands	r3, r2
 80054ea:	2201      	movs	r2, #1
 80054ec:	409a      	lsls	r2, r3
 80054ee:	0013      	movs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	43d2      	mvns	r2, r2
 80054fa:	401a      	ands	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a1a      	ldr	r2, [r3, #32]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	211f      	movs	r1, #31
 8005508:	400b      	ands	r3, r1
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	4099      	lsls	r1, r3
 800550e:	000b      	movs	r3, r1
 8005510:	431a      	orrs	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	621a      	str	r2, [r3, #32]
}
 8005516:	46c0      	nop			@ (mov r8, r8)
 8005518:	46bd      	mov	sp, r7
 800551a:	b006      	add	sp, #24
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	223c      	movs	r2, #60	@ 0x3c
 800552e:	5c9b      	ldrb	r3, [r3, r2]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005534:	2302      	movs	r3, #2
 8005536:	e041      	b.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	223c      	movs	r2, #60	@ 0x3c
 800553c:	2101      	movs	r1, #1
 800553e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	223d      	movs	r2, #61	@ 0x3d
 8005544:	2102      	movs	r1, #2
 8005546:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2270      	movs	r2, #112	@ 0x70
 800555c:	4393      	bics	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a13      	ldr	r2, [pc, #76]	@ (80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d009      	beq.n	8005590 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a11      	ldr	r2, [pc, #68]	@ (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d004      	beq.n	8005590 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a10      	ldr	r2, [pc, #64]	@ (80055cc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d10c      	bne.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2280      	movs	r2, #128	@ 0x80
 8005594:	4393      	bics	r3, r2
 8005596:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	223d      	movs	r2, #61	@ 0x3d
 80055ae:	2101      	movs	r1, #1
 80055b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	223c      	movs	r2, #60	@ 0x3c
 80055b6:	2100      	movs	r1, #0
 80055b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	0018      	movs	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	b004      	add	sp, #16
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40012c00 	.word	0x40012c00
 80055c8:	40000400 	.word	0x40000400
 80055cc:	40014000 	.word	0x40014000

080055d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	223c      	movs	r2, #60	@ 0x3c
 80055e2:	5c9b      	ldrb	r3, [r3, r2]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e03e      	b.n	800566a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	223c      	movs	r2, #60	@ 0x3c
 80055f0:	2101      	movs	r1, #1
 80055f2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	22ff      	movs	r2, #255	@ 0xff
 80055f8:	4393      	bics	r3, r2
 80055fa:	001a      	movs	r2, r3
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4a1b      	ldr	r2, [pc, #108]	@ (8005674 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005608:	401a      	ands	r2, r3
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4a18      	ldr	r2, [pc, #96]	@ (8005678 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005616:	401a      	ands	r2, r3
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	4313      	orrs	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4a16      	ldr	r2, [pc, #88]	@ (800567c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005624:	401a      	ands	r2, r3
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4a13      	ldr	r2, [pc, #76]	@ (8005680 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005632:	401a      	ands	r2, r3
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4a11      	ldr	r2, [pc, #68]	@ (8005684 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005640:	401a      	ands	r2, r3
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4a0e      	ldr	r2, [pc, #56]	@ (8005688 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800564e:	401a      	ands	r2, r3
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	223c      	movs	r2, #60	@ 0x3c
 8005664:	2100      	movs	r1, #0
 8005666:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	0018      	movs	r0, r3
 800566c:	46bd      	mov	sp, r7
 800566e:	b004      	add	sp, #16
 8005670:	bd80      	pop	{r7, pc}
 8005672:	46c0      	nop			@ (mov r8, r8)
 8005674:	fffffcff 	.word	0xfffffcff
 8005678:	fffffbff 	.word	0xfffffbff
 800567c:	fffff7ff 	.word	0xfffff7ff
 8005680:	ffffefff 	.word	0xffffefff
 8005684:	ffffdfff 	.word	0xffffdfff
 8005688:	ffffbfff 	.word	0xffffbfff

0800568c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e044      	b.n	8005728 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d107      	bne.n	80056b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2278      	movs	r2, #120	@ 0x78
 80056aa:	2100      	movs	r1, #0
 80056ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	0018      	movs	r0, r3
 80056b2:	f7fd fc0d 	bl	8002ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2224      	movs	r2, #36	@ 0x24
 80056ba:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2101      	movs	r1, #1
 80056c8:	438a      	bics	r2, r1
 80056ca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	0018      	movs	r0, r3
 80056d8:	f000 fa0c 	bl	8005af4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	0018      	movs	r0, r3
 80056e0:	f000 f8c8 	bl	8005874 <UART_SetConfig>
 80056e4:	0003      	movs	r3, r0
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e01c      	b.n	8005728 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	490d      	ldr	r1, [pc, #52]	@ (8005730 <HAL_UART_Init+0xa4>)
 80056fa:	400a      	ands	r2, r1
 80056fc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2108      	movs	r1, #8
 800570a:	438a      	bics	r2, r1
 800570c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2101      	movs	r1, #1
 800571a:	430a      	orrs	r2, r1
 800571c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	0018      	movs	r0, r3
 8005722:	f000 fa9b 	bl	8005c5c <UART_CheckIdleState>
 8005726:	0003      	movs	r3, r0
}
 8005728:	0018      	movs	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	b002      	add	sp, #8
 800572e:	bd80      	pop	{r7, pc}
 8005730:	fffff7ff 	.word	0xfffff7ff

08005734 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	@ 0x28
 8005738:	af02      	add	r7, sp, #8
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	603b      	str	r3, [r7, #0]
 8005740:	1dbb      	adds	r3, r7, #6
 8005742:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005748:	2b20      	cmp	r3, #32
 800574a:	d000      	beq.n	800574e <HAL_UART_Transmit+0x1a>
 800574c:	e08c      	b.n	8005868 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <HAL_UART_Transmit+0x28>
 8005754:	1dbb      	adds	r3, r7, #6
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e084      	b.n	800586a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	2380      	movs	r3, #128	@ 0x80
 8005766:	015b      	lsls	r3, r3, #5
 8005768:	429a      	cmp	r2, r3
 800576a:	d109      	bne.n	8005780 <HAL_UART_Transmit+0x4c>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d105      	bne.n	8005780 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2201      	movs	r2, #1
 8005778:	4013      	ands	r3, r2
 800577a:	d001      	beq.n	8005780 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e074      	b.n	800586a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2284      	movs	r2, #132	@ 0x84
 8005784:	2100      	movs	r1, #0
 8005786:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2221      	movs	r2, #33	@ 0x21
 800578c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800578e:	f7fd fcc7 	bl	8003120 <HAL_GetTick>
 8005792:	0003      	movs	r3, r0
 8005794:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1dba      	adds	r2, r7, #6
 800579a:	2150      	movs	r1, #80	@ 0x50
 800579c:	8812      	ldrh	r2, [r2, #0]
 800579e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	1dba      	adds	r2, r7, #6
 80057a4:	2152      	movs	r1, #82	@ 0x52
 80057a6:	8812      	ldrh	r2, [r2, #0]
 80057a8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	689a      	ldr	r2, [r3, #8]
 80057ae:	2380      	movs	r3, #128	@ 0x80
 80057b0:	015b      	lsls	r3, r3, #5
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d108      	bne.n	80057c8 <HAL_UART_Transmit+0x94>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d104      	bne.n	80057c8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	61bb      	str	r3, [r7, #24]
 80057c6:	e003      	b.n	80057d0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057cc:	2300      	movs	r3, #0
 80057ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057d0:	e02f      	b.n	8005832 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	0013      	movs	r3, r2
 80057dc:	2200      	movs	r2, #0
 80057de:	2180      	movs	r1, #128	@ 0x80
 80057e0:	f000 fae4 	bl	8005dac <UART_WaitOnFlagUntilTimeout>
 80057e4:	1e03      	subs	r3, r0, #0
 80057e6:	d004      	beq.n	80057f2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2220      	movs	r2, #32
 80057ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e03b      	b.n	800586a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10b      	bne.n	8005810 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	881a      	ldrh	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	05d2      	lsls	r2, r2, #23
 8005802:	0dd2      	lsrs	r2, r2, #23
 8005804:	b292      	uxth	r2, r2
 8005806:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	3302      	adds	r3, #2
 800580c:	61bb      	str	r3, [r7, #24]
 800580e:	e007      	b.n	8005820 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	781a      	ldrb	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	3301      	adds	r3, #1
 800581e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2252      	movs	r2, #82	@ 0x52
 8005824:	5a9b      	ldrh	r3, [r3, r2]
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b299      	uxth	r1, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2252      	movs	r2, #82	@ 0x52
 8005830:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2252      	movs	r2, #82	@ 0x52
 8005836:	5a9b      	ldrh	r3, [r3, r2]
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1c9      	bne.n	80057d2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	0013      	movs	r3, r2
 8005848:	2200      	movs	r2, #0
 800584a:	2140      	movs	r1, #64	@ 0x40
 800584c:	f000 faae 	bl	8005dac <UART_WaitOnFlagUntilTimeout>
 8005850:	1e03      	subs	r3, r0, #0
 8005852:	d004      	beq.n	800585e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e005      	b.n	800586a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2220      	movs	r2, #32
 8005862:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005864:	2300      	movs	r3, #0
 8005866:	e000      	b.n	800586a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005868:	2302      	movs	r3, #2
  }
}
 800586a:	0018      	movs	r0, r3
 800586c:	46bd      	mov	sp, r7
 800586e:	b008      	add	sp, #32
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800587c:	231e      	movs	r3, #30
 800587e:	18fb      	adds	r3, r7, r3
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	4313      	orrs	r3, r2
 800589a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a8d      	ldr	r2, [pc, #564]	@ (8005ad8 <UART_SetConfig+0x264>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	0019      	movs	r1, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	4a88      	ldr	r2, [pc, #544]	@ (8005adc <UART_SetConfig+0x268>)
 80058ba:	4013      	ands	r3, r2
 80058bc:	0019      	movs	r1, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	4a7f      	ldr	r2, [pc, #508]	@ (8005ae0 <UART_SetConfig+0x26c>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	0019      	movs	r1, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a7b      	ldr	r2, [pc, #492]	@ (8005ae4 <UART_SetConfig+0x270>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d127      	bne.n	800594a <UART_SetConfig+0xd6>
 80058fa:	4b7b      	ldr	r3, [pc, #492]	@ (8005ae8 <UART_SetConfig+0x274>)
 80058fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fe:	2203      	movs	r2, #3
 8005900:	4013      	ands	r3, r2
 8005902:	2b03      	cmp	r3, #3
 8005904:	d00d      	beq.n	8005922 <UART_SetConfig+0xae>
 8005906:	d81b      	bhi.n	8005940 <UART_SetConfig+0xcc>
 8005908:	2b02      	cmp	r3, #2
 800590a:	d014      	beq.n	8005936 <UART_SetConfig+0xc2>
 800590c:	d818      	bhi.n	8005940 <UART_SetConfig+0xcc>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <UART_SetConfig+0xa4>
 8005912:	2b01      	cmp	r3, #1
 8005914:	d00a      	beq.n	800592c <UART_SetConfig+0xb8>
 8005916:	e013      	b.n	8005940 <UART_SetConfig+0xcc>
 8005918:	231f      	movs	r3, #31
 800591a:	18fb      	adds	r3, r7, r3
 800591c:	2200      	movs	r2, #0
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	e021      	b.n	8005966 <UART_SetConfig+0xf2>
 8005922:	231f      	movs	r3, #31
 8005924:	18fb      	adds	r3, r7, r3
 8005926:	2202      	movs	r2, #2
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	e01c      	b.n	8005966 <UART_SetConfig+0xf2>
 800592c:	231f      	movs	r3, #31
 800592e:	18fb      	adds	r3, r7, r3
 8005930:	2204      	movs	r2, #4
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	e017      	b.n	8005966 <UART_SetConfig+0xf2>
 8005936:	231f      	movs	r3, #31
 8005938:	18fb      	adds	r3, r7, r3
 800593a:	2208      	movs	r2, #8
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	e012      	b.n	8005966 <UART_SetConfig+0xf2>
 8005940:	231f      	movs	r3, #31
 8005942:	18fb      	adds	r3, r7, r3
 8005944:	2210      	movs	r2, #16
 8005946:	701a      	strb	r2, [r3, #0]
 8005948:	e00d      	b.n	8005966 <UART_SetConfig+0xf2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a67      	ldr	r2, [pc, #412]	@ (8005aec <UART_SetConfig+0x278>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d104      	bne.n	800595e <UART_SetConfig+0xea>
 8005954:	231f      	movs	r3, #31
 8005956:	18fb      	adds	r3, r7, r3
 8005958:	2200      	movs	r2, #0
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	e003      	b.n	8005966 <UART_SetConfig+0xf2>
 800595e:	231f      	movs	r3, #31
 8005960:	18fb      	adds	r3, r7, r3
 8005962:	2210      	movs	r2, #16
 8005964:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69da      	ldr	r2, [r3, #28]
 800596a:	2380      	movs	r3, #128	@ 0x80
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	429a      	cmp	r2, r3
 8005970:	d15c      	bne.n	8005a2c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8005972:	231f      	movs	r3, #31
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b08      	cmp	r3, #8
 800597a:	d015      	beq.n	80059a8 <UART_SetConfig+0x134>
 800597c:	dc18      	bgt.n	80059b0 <UART_SetConfig+0x13c>
 800597e:	2b04      	cmp	r3, #4
 8005980:	d00d      	beq.n	800599e <UART_SetConfig+0x12a>
 8005982:	dc15      	bgt.n	80059b0 <UART_SetConfig+0x13c>
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <UART_SetConfig+0x11a>
 8005988:	2b02      	cmp	r3, #2
 800598a:	d005      	beq.n	8005998 <UART_SetConfig+0x124>
 800598c:	e010      	b.n	80059b0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800598e:	f7fe ff67 	bl	8004860 <HAL_RCC_GetPCLK1Freq>
 8005992:	0003      	movs	r3, r0
 8005994:	61bb      	str	r3, [r7, #24]
        break;
 8005996:	e012      	b.n	80059be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005998:	4b55      	ldr	r3, [pc, #340]	@ (8005af0 <UART_SetConfig+0x27c>)
 800599a:	61bb      	str	r3, [r7, #24]
        break;
 800599c:	e00f      	b.n	80059be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800599e:	f7fe feff 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 80059a2:	0003      	movs	r3, r0
 80059a4:	61bb      	str	r3, [r7, #24]
        break;
 80059a6:	e00a      	b.n	80059be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059a8:	2380      	movs	r3, #128	@ 0x80
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	61bb      	str	r3, [r7, #24]
        break;
 80059ae:	e006      	b.n	80059be <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059b4:	231e      	movs	r3, #30
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	2201      	movs	r2, #1
 80059ba:	701a      	strb	r2, [r3, #0]
        break;
 80059bc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d100      	bne.n	80059c6 <UART_SetConfig+0x152>
 80059c4:	e07a      	b.n	8005abc <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	005a      	lsls	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	085b      	lsrs	r3, r3, #1
 80059d0:	18d2      	adds	r2, r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	0019      	movs	r1, r3
 80059d8:	0010      	movs	r0, r2
 80059da:	f7fa fba7 	bl	800012c <__udivsi3>
 80059de:	0003      	movs	r3, r0
 80059e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b0f      	cmp	r3, #15
 80059e6:	d91c      	bls.n	8005a22 <UART_SetConfig+0x1ae>
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	2380      	movs	r3, #128	@ 0x80
 80059ec:	025b      	lsls	r3, r3, #9
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d217      	bcs.n	8005a22 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	200e      	movs	r0, #14
 80059f8:	183b      	adds	r3, r7, r0
 80059fa:	210f      	movs	r1, #15
 80059fc:	438a      	bics	r2, r1
 80059fe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	085b      	lsrs	r3, r3, #1
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2207      	movs	r2, #7
 8005a08:	4013      	ands	r3, r2
 8005a0a:	b299      	uxth	r1, r3
 8005a0c:	183b      	adds	r3, r7, r0
 8005a0e:	183a      	adds	r2, r7, r0
 8005a10:	8812      	ldrh	r2, [r2, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	183a      	adds	r2, r7, r0
 8005a1c:	8812      	ldrh	r2, [r2, #0]
 8005a1e:	60da      	str	r2, [r3, #12]
 8005a20:	e04c      	b.n	8005abc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005a22:	231e      	movs	r3, #30
 8005a24:	18fb      	adds	r3, r7, r3
 8005a26:	2201      	movs	r2, #1
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	e047      	b.n	8005abc <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a2c:	231f      	movs	r3, #31
 8005a2e:	18fb      	adds	r3, r7, r3
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d015      	beq.n	8005a62 <UART_SetConfig+0x1ee>
 8005a36:	dc18      	bgt.n	8005a6a <UART_SetConfig+0x1f6>
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d00d      	beq.n	8005a58 <UART_SetConfig+0x1e4>
 8005a3c:	dc15      	bgt.n	8005a6a <UART_SetConfig+0x1f6>
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <UART_SetConfig+0x1d4>
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d005      	beq.n	8005a52 <UART_SetConfig+0x1de>
 8005a46:	e010      	b.n	8005a6a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a48:	f7fe ff0a 	bl	8004860 <HAL_RCC_GetPCLK1Freq>
 8005a4c:	0003      	movs	r3, r0
 8005a4e:	61bb      	str	r3, [r7, #24]
        break;
 8005a50:	e012      	b.n	8005a78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a52:	4b27      	ldr	r3, [pc, #156]	@ (8005af0 <UART_SetConfig+0x27c>)
 8005a54:	61bb      	str	r3, [r7, #24]
        break;
 8005a56:	e00f      	b.n	8005a78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a58:	f7fe fea2 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 8005a5c:	0003      	movs	r3, r0
 8005a5e:	61bb      	str	r3, [r7, #24]
        break;
 8005a60:	e00a      	b.n	8005a78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a62:	2380      	movs	r3, #128	@ 0x80
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	61bb      	str	r3, [r7, #24]
        break;
 8005a68:	e006      	b.n	8005a78 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a6e:	231e      	movs	r3, #30
 8005a70:	18fb      	adds	r3, r7, r3
 8005a72:	2201      	movs	r2, #1
 8005a74:	701a      	strb	r2, [r3, #0]
        break;
 8005a76:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d01e      	beq.n	8005abc <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	085a      	lsrs	r2, r3, #1
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	18d2      	adds	r2, r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	0019      	movs	r1, r3
 8005a8e:	0010      	movs	r0, r2
 8005a90:	f7fa fb4c 	bl	800012c <__udivsi3>
 8005a94:	0003      	movs	r3, r0
 8005a96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2b0f      	cmp	r3, #15
 8005a9c:	d90a      	bls.n	8005ab4 <UART_SetConfig+0x240>
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	2380      	movs	r3, #128	@ 0x80
 8005aa2:	025b      	lsls	r3, r3, #9
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d205      	bcs.n	8005ab4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60da      	str	r2, [r3, #12]
 8005ab2:	e003      	b.n	8005abc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005ab4:	231e      	movs	r3, #30
 8005ab6:	18fb      	adds	r3, r7, r3
 8005ab8:	2201      	movs	r2, #1
 8005aba:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005ac8:	231e      	movs	r3, #30
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	781b      	ldrb	r3, [r3, #0]
}
 8005ace:	0018      	movs	r0, r3
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	b008      	add	sp, #32
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	46c0      	nop			@ (mov r8, r8)
 8005ad8:	ffff69f3 	.word	0xffff69f3
 8005adc:	ffffcfff 	.word	0xffffcfff
 8005ae0:	fffff4ff 	.word	0xfffff4ff
 8005ae4:	40013800 	.word	0x40013800
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	40004400 	.word	0x40004400
 8005af0:	007a1200 	.word	0x007a1200

08005af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b00:	2208      	movs	r2, #8
 8005b02:	4013      	ands	r3, r2
 8005b04:	d00b      	beq.n	8005b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	4a4a      	ldr	r2, [pc, #296]	@ (8005c38 <UART_AdvFeatureConfig+0x144>)
 8005b0e:	4013      	ands	r3, r2
 8005b10:	0019      	movs	r1, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b22:	2201      	movs	r2, #1
 8005b24:	4013      	ands	r3, r2
 8005b26:	d00b      	beq.n	8005b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	4a43      	ldr	r2, [pc, #268]	@ (8005c3c <UART_AdvFeatureConfig+0x148>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	0019      	movs	r1, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b44:	2202      	movs	r2, #2
 8005b46:	4013      	ands	r3, r2
 8005b48:	d00b      	beq.n	8005b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	4a3b      	ldr	r2, [pc, #236]	@ (8005c40 <UART_AdvFeatureConfig+0x14c>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	0019      	movs	r1, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b66:	2204      	movs	r2, #4
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d00b      	beq.n	8005b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4a34      	ldr	r2, [pc, #208]	@ (8005c44 <UART_AdvFeatureConfig+0x150>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	0019      	movs	r1, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b88:	2210      	movs	r2, #16
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d00b      	beq.n	8005ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	4a2c      	ldr	r2, [pc, #176]	@ (8005c48 <UART_AdvFeatureConfig+0x154>)
 8005b96:	4013      	ands	r3, r2
 8005b98:	0019      	movs	r1, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005baa:	2220      	movs	r2, #32
 8005bac:	4013      	ands	r3, r2
 8005bae:	d00b      	beq.n	8005bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	4a25      	ldr	r2, [pc, #148]	@ (8005c4c <UART_AdvFeatureConfig+0x158>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	0019      	movs	r1, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bcc:	2240      	movs	r2, #64	@ 0x40
 8005bce:	4013      	ands	r3, r2
 8005bd0:	d01d      	beq.n	8005c0e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c50 <UART_AdvFeatureConfig+0x15c>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	0019      	movs	r1, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bee:	2380      	movs	r3, #128	@ 0x80
 8005bf0:	035b      	lsls	r3, r3, #13
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d10b      	bne.n	8005c0e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	4a15      	ldr	r2, [pc, #84]	@ (8005c54 <UART_AdvFeatureConfig+0x160>)
 8005bfe:	4013      	ands	r3, r2
 8005c00:	0019      	movs	r1, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c12:	2280      	movs	r2, #128	@ 0x80
 8005c14:	4013      	ands	r3, r2
 8005c16:	d00b      	beq.n	8005c30 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8005c58 <UART_AdvFeatureConfig+0x164>)
 8005c20:	4013      	ands	r3, r2
 8005c22:	0019      	movs	r1, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	605a      	str	r2, [r3, #4]
  }
}
 8005c30:	46c0      	nop			@ (mov r8, r8)
 8005c32:	46bd      	mov	sp, r7
 8005c34:	b002      	add	sp, #8
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	ffff7fff 	.word	0xffff7fff
 8005c3c:	fffdffff 	.word	0xfffdffff
 8005c40:	fffeffff 	.word	0xfffeffff
 8005c44:	fffbffff 	.word	0xfffbffff
 8005c48:	ffffefff 	.word	0xffffefff
 8005c4c:	ffffdfff 	.word	0xffffdfff
 8005c50:	ffefffff 	.word	0xffefffff
 8005c54:	ff9fffff 	.word	0xff9fffff
 8005c58:	fff7ffff 	.word	0xfff7ffff

08005c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b092      	sub	sp, #72	@ 0x48
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2284      	movs	r2, #132	@ 0x84
 8005c68:	2100      	movs	r1, #0
 8005c6a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c6c:	f7fd fa58 	bl	8003120 <HAL_GetTick>
 8005c70:	0003      	movs	r3, r0
 8005c72:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2208      	movs	r2, #8
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	d12c      	bne.n	8005cdc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c84:	2280      	movs	r2, #128	@ 0x80
 8005c86:	0391      	lsls	r1, r2, #14
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	4a46      	ldr	r2, [pc, #280]	@ (8005da4 <UART_CheckIdleState+0x148>)
 8005c8c:	9200      	str	r2, [sp, #0]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f000 f88c 	bl	8005dac <UART_WaitOnFlagUntilTimeout>
 8005c94:	1e03      	subs	r3, r0, #0
 8005c96:	d021      	beq.n	8005cdc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c98:	f3ef 8310 	mrs	r3, PRIMASK
 8005c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca8:	f383 8810 	msr	PRIMASK, r3
}
 8005cac:	46c0      	nop			@ (mov r8, r8)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2180      	movs	r1, #128	@ 0x80
 8005cba:	438a      	bics	r2, r1
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc4:	f383 8810 	msr	PRIMASK, r3
}
 8005cc8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2278      	movs	r2, #120	@ 0x78
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e05f      	b.n	8005d9c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2204      	movs	r2, #4
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d146      	bne.n	8005d78 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cec:	2280      	movs	r2, #128	@ 0x80
 8005cee:	03d1      	lsls	r1, r2, #15
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	4a2c      	ldr	r2, [pc, #176]	@ (8005da4 <UART_CheckIdleState+0x148>)
 8005cf4:	9200      	str	r2, [sp, #0]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f000 f858 	bl	8005dac <UART_WaitOnFlagUntilTimeout>
 8005cfc:	1e03      	subs	r3, r0, #0
 8005cfe:	d03b      	beq.n	8005d78 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d00:	f3ef 8310 	mrs	r3, PRIMASK
 8005d04:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d06:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f383 8810 	msr	PRIMASK, r3
}
 8005d14:	46c0      	nop			@ (mov r8, r8)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4921      	ldr	r1, [pc, #132]	@ (8005da8 <UART_CheckIdleState+0x14c>)
 8005d22:	400a      	ands	r2, r1
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f383 8810 	msr	PRIMASK, r3
}
 8005d30:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d32:	f3ef 8310 	mrs	r3, PRIMASK
 8005d36:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d38:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	f383 8810 	msr	PRIMASK, r3
}
 8005d46:	46c0      	nop			@ (mov r8, r8)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2101      	movs	r1, #1
 8005d54:	438a      	bics	r2, r1
 8005d56:	609a      	str	r2, [r3, #8]
 8005d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	f383 8810 	msr	PRIMASK, r3
}
 8005d62:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2280      	movs	r2, #128	@ 0x80
 8005d68:	2120      	movs	r1, #32
 8005d6a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2278      	movs	r2, #120	@ 0x78
 8005d70:	2100      	movs	r1, #0
 8005d72:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e011      	b.n	8005d9c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2280      	movs	r2, #128	@ 0x80
 8005d82:	2120      	movs	r1, #32
 8005d84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2278      	movs	r2, #120	@ 0x78
 8005d96:	2100      	movs	r1, #0
 8005d98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	b010      	add	sp, #64	@ 0x40
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	01ffffff 	.word	0x01ffffff
 8005da8:	fffffedf 	.word	0xfffffedf

08005dac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	603b      	str	r3, [r7, #0]
 8005db8:	1dfb      	adds	r3, r7, #7
 8005dba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dbc:	e051      	b.n	8005e62 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	d04e      	beq.n	8005e62 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dc4:	f7fd f9ac 	bl	8003120 <HAL_GetTick>
 8005dc8:	0002      	movs	r2, r0
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d302      	bcc.n	8005dda <UART_WaitOnFlagUntilTimeout+0x2e>
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e051      	b.n	8005e82 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2204      	movs	r2, #4
 8005de6:	4013      	ands	r3, r2
 8005de8:	d03b      	beq.n	8005e62 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b80      	cmp	r3, #128	@ 0x80
 8005dee:	d038      	beq.n	8005e62 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b40      	cmp	r3, #64	@ 0x40
 8005df4:	d035      	beq.n	8005e62 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	2208      	movs	r2, #8
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d111      	bne.n	8005e28 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2208      	movs	r2, #8
 8005e0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	0018      	movs	r0, r3
 8005e10:	f000 f83c 	bl	8005e8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2284      	movs	r2, #132	@ 0x84
 8005e18:	2108      	movs	r1, #8
 8005e1a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2278      	movs	r2, #120	@ 0x78
 8005e20:	2100      	movs	r1, #0
 8005e22:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e02c      	b.n	8005e82 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69da      	ldr	r2, [r3, #28]
 8005e2e:	2380      	movs	r3, #128	@ 0x80
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	401a      	ands	r2, r3
 8005e34:	2380      	movs	r3, #128	@ 0x80
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d112      	bne.n	8005e62 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2280      	movs	r2, #128	@ 0x80
 8005e42:	0112      	lsls	r2, r2, #4
 8005e44:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f000 f81f 	bl	8005e8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2284      	movs	r2, #132	@ 0x84
 8005e52:	2120      	movs	r1, #32
 8005e54:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2278      	movs	r2, #120	@ 0x78
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e00f      	b.n	8005e82 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	425a      	negs	r2, r3
 8005e72:	4153      	adcs	r3, r2
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	001a      	movs	r2, r3
 8005e78:	1dfb      	adds	r3, r7, #7
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d09e      	beq.n	8005dbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	0018      	movs	r0, r3
 8005e84:	46bd      	mov	sp, r7
 8005e86:	b004      	add	sp, #16
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08e      	sub	sp, #56	@ 0x38
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e94:	f3ef 8310 	mrs	r3, PRIMASK
 8005e98:	617b      	str	r3, [r7, #20]
  return(result);
 8005e9a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	f383 8810 	msr	PRIMASK, r3
}
 8005ea8:	46c0      	nop			@ (mov r8, r8)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4926      	ldr	r1, [pc, #152]	@ (8005f50 <UART_EndRxTransfer+0xc4>)
 8005eb6:	400a      	ands	r2, r1
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ebc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	f383 8810 	msr	PRIMASK, r3
}
 8005ec4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8005eca:	623b      	str	r3, [r7, #32]
  return(result);
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ece:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed6:	f383 8810 	msr	PRIMASK, r3
}
 8005eda:	46c0      	nop			@ (mov r8, r8)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	438a      	bics	r2, r1
 8005eea:	609a      	str	r2, [r3, #8]
 8005eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef2:	f383 8810 	msr	PRIMASK, r3
}
 8005ef6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d118      	bne.n	8005f32 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f00:	f3ef 8310 	mrs	r3, PRIMASK
 8005f04:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f06:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f383 8810 	msr	PRIMASK, r3
}
 8005f14:	46c0      	nop			@ (mov r8, r8)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2110      	movs	r1, #16
 8005f22:	438a      	bics	r2, r1
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f383 8810 	msr	PRIMASK, r3
}
 8005f30:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2280      	movs	r2, #128	@ 0x80
 8005f36:	2120      	movs	r1, #32
 8005f38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005f46:	46c0      	nop			@ (mov r8, r8)
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	b00e      	add	sp, #56	@ 0x38
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	46c0      	nop			@ (mov r8, r8)
 8005f50:	fffffedf 	.word	0xfffffedf

08005f54 <siprintf>:
 8005f54:	b40e      	push	{r1, r2, r3}
 8005f56:	b500      	push	{lr}
 8005f58:	490b      	ldr	r1, [pc, #44]	@ (8005f88 <siprintf+0x34>)
 8005f5a:	b09c      	sub	sp, #112	@ 0x70
 8005f5c:	ab1d      	add	r3, sp, #116	@ 0x74
 8005f5e:	9002      	str	r0, [sp, #8]
 8005f60:	9006      	str	r0, [sp, #24]
 8005f62:	9107      	str	r1, [sp, #28]
 8005f64:	9104      	str	r1, [sp, #16]
 8005f66:	4809      	ldr	r0, [pc, #36]	@ (8005f8c <siprintf+0x38>)
 8005f68:	4909      	ldr	r1, [pc, #36]	@ (8005f90 <siprintf+0x3c>)
 8005f6a:	cb04      	ldmia	r3!, {r2}
 8005f6c:	9105      	str	r1, [sp, #20]
 8005f6e:	6800      	ldr	r0, [r0, #0]
 8005f70:	a902      	add	r1, sp, #8
 8005f72:	9301      	str	r3, [sp, #4]
 8005f74:	f000 f9a8 	bl	80062c8 <_svfiprintf_r>
 8005f78:	2200      	movs	r2, #0
 8005f7a:	9b02      	ldr	r3, [sp, #8]
 8005f7c:	701a      	strb	r2, [r3, #0]
 8005f7e:	b01c      	add	sp, #112	@ 0x70
 8005f80:	bc08      	pop	{r3}
 8005f82:	b003      	add	sp, #12
 8005f84:	4718      	bx	r3
 8005f86:	46c0      	nop			@ (mov r8, r8)
 8005f88:	7fffffff 	.word	0x7fffffff
 8005f8c:	2000000c 	.word	0x2000000c
 8005f90:	ffff0208 	.word	0xffff0208

08005f94 <memset>:
 8005f94:	0003      	movs	r3, r0
 8005f96:	1882      	adds	r2, r0, r2
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d100      	bne.n	8005f9e <memset+0xa>
 8005f9c:	4770      	bx	lr
 8005f9e:	7019      	strb	r1, [r3, #0]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	e7f9      	b.n	8005f98 <memset+0x4>

08005fa4 <__errno>:
 8005fa4:	4b01      	ldr	r3, [pc, #4]	@ (8005fac <__errno+0x8>)
 8005fa6:	6818      	ldr	r0, [r3, #0]
 8005fa8:	4770      	bx	lr
 8005faa:	46c0      	nop			@ (mov r8, r8)
 8005fac:	2000000c 	.word	0x2000000c

08005fb0 <__libc_init_array>:
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	2600      	movs	r6, #0
 8005fb4:	4c0c      	ldr	r4, [pc, #48]	@ (8005fe8 <__libc_init_array+0x38>)
 8005fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8005fec <__libc_init_array+0x3c>)
 8005fb8:	1b64      	subs	r4, r4, r5
 8005fba:	10a4      	asrs	r4, r4, #2
 8005fbc:	42a6      	cmp	r6, r4
 8005fbe:	d109      	bne.n	8005fd4 <__libc_init_array+0x24>
 8005fc0:	2600      	movs	r6, #0
 8005fc2:	f000 fc65 	bl	8006890 <_init>
 8005fc6:	4c0a      	ldr	r4, [pc, #40]	@ (8005ff0 <__libc_init_array+0x40>)
 8005fc8:	4d0a      	ldr	r5, [pc, #40]	@ (8005ff4 <__libc_init_array+0x44>)
 8005fca:	1b64      	subs	r4, r4, r5
 8005fcc:	10a4      	asrs	r4, r4, #2
 8005fce:	42a6      	cmp	r6, r4
 8005fd0:	d105      	bne.n	8005fde <__libc_init_array+0x2e>
 8005fd2:	bd70      	pop	{r4, r5, r6, pc}
 8005fd4:	00b3      	lsls	r3, r6, #2
 8005fd6:	58eb      	ldr	r3, [r5, r3]
 8005fd8:	4798      	blx	r3
 8005fda:	3601      	adds	r6, #1
 8005fdc:	e7ee      	b.n	8005fbc <__libc_init_array+0xc>
 8005fde:	00b3      	lsls	r3, r6, #2
 8005fe0:	58eb      	ldr	r3, [r5, r3]
 8005fe2:	4798      	blx	r3
 8005fe4:	3601      	adds	r6, #1
 8005fe6:	e7f2      	b.n	8005fce <__libc_init_array+0x1e>
 8005fe8:	08007a00 	.word	0x08007a00
 8005fec:	08007a00 	.word	0x08007a00
 8005ff0:	08007a04 	.word	0x08007a04
 8005ff4:	08007a00 	.word	0x08007a00

08005ff8 <__retarget_lock_acquire_recursive>:
 8005ff8:	4770      	bx	lr

08005ffa <__retarget_lock_release_recursive>:
 8005ffa:	4770      	bx	lr

08005ffc <memcpy>:
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	b510      	push	{r4, lr}
 8006000:	429a      	cmp	r2, r3
 8006002:	d100      	bne.n	8006006 <memcpy+0xa>
 8006004:	bd10      	pop	{r4, pc}
 8006006:	5ccc      	ldrb	r4, [r1, r3]
 8006008:	54c4      	strb	r4, [r0, r3]
 800600a:	3301      	adds	r3, #1
 800600c:	e7f8      	b.n	8006000 <memcpy+0x4>
	...

08006010 <_free_r>:
 8006010:	b570      	push	{r4, r5, r6, lr}
 8006012:	0005      	movs	r5, r0
 8006014:	1e0c      	subs	r4, r1, #0
 8006016:	d010      	beq.n	800603a <_free_r+0x2a>
 8006018:	3c04      	subs	r4, #4
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	da00      	bge.n	8006022 <_free_r+0x12>
 8006020:	18e4      	adds	r4, r4, r3
 8006022:	0028      	movs	r0, r5
 8006024:	f000 f8e0 	bl	80061e8 <__malloc_lock>
 8006028:	4a1d      	ldr	r2, [pc, #116]	@ (80060a0 <_free_r+0x90>)
 800602a:	6813      	ldr	r3, [r2, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d105      	bne.n	800603c <_free_r+0x2c>
 8006030:	6063      	str	r3, [r4, #4]
 8006032:	6014      	str	r4, [r2, #0]
 8006034:	0028      	movs	r0, r5
 8006036:	f000 f8df 	bl	80061f8 <__malloc_unlock>
 800603a:	bd70      	pop	{r4, r5, r6, pc}
 800603c:	42a3      	cmp	r3, r4
 800603e:	d908      	bls.n	8006052 <_free_r+0x42>
 8006040:	6820      	ldr	r0, [r4, #0]
 8006042:	1821      	adds	r1, r4, r0
 8006044:	428b      	cmp	r3, r1
 8006046:	d1f3      	bne.n	8006030 <_free_r+0x20>
 8006048:	6819      	ldr	r1, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	1809      	adds	r1, r1, r0
 800604e:	6021      	str	r1, [r4, #0]
 8006050:	e7ee      	b.n	8006030 <_free_r+0x20>
 8006052:	001a      	movs	r2, r3
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <_free_r+0x4e>
 800605a:	42a3      	cmp	r3, r4
 800605c:	d9f9      	bls.n	8006052 <_free_r+0x42>
 800605e:	6811      	ldr	r1, [r2, #0]
 8006060:	1850      	adds	r0, r2, r1
 8006062:	42a0      	cmp	r0, r4
 8006064:	d10b      	bne.n	800607e <_free_r+0x6e>
 8006066:	6820      	ldr	r0, [r4, #0]
 8006068:	1809      	adds	r1, r1, r0
 800606a:	1850      	adds	r0, r2, r1
 800606c:	6011      	str	r1, [r2, #0]
 800606e:	4283      	cmp	r3, r0
 8006070:	d1e0      	bne.n	8006034 <_free_r+0x24>
 8006072:	6818      	ldr	r0, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	1841      	adds	r1, r0, r1
 8006078:	6011      	str	r1, [r2, #0]
 800607a:	6053      	str	r3, [r2, #4]
 800607c:	e7da      	b.n	8006034 <_free_r+0x24>
 800607e:	42a0      	cmp	r0, r4
 8006080:	d902      	bls.n	8006088 <_free_r+0x78>
 8006082:	230c      	movs	r3, #12
 8006084:	602b      	str	r3, [r5, #0]
 8006086:	e7d5      	b.n	8006034 <_free_r+0x24>
 8006088:	6820      	ldr	r0, [r4, #0]
 800608a:	1821      	adds	r1, r4, r0
 800608c:	428b      	cmp	r3, r1
 800608e:	d103      	bne.n	8006098 <_free_r+0x88>
 8006090:	6819      	ldr	r1, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	1809      	adds	r1, r1, r0
 8006096:	6021      	str	r1, [r4, #0]
 8006098:	6063      	str	r3, [r4, #4]
 800609a:	6054      	str	r4, [r2, #4]
 800609c:	e7ca      	b.n	8006034 <_free_r+0x24>
 800609e:	46c0      	nop			@ (mov r8, r8)
 80060a0:	200004bc 	.word	0x200004bc

080060a4 <sbrk_aligned>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	4e0f      	ldr	r6, [pc, #60]	@ (80060e4 <sbrk_aligned+0x40>)
 80060a8:	000d      	movs	r5, r1
 80060aa:	6831      	ldr	r1, [r6, #0]
 80060ac:	0004      	movs	r4, r0
 80060ae:	2900      	cmp	r1, #0
 80060b0:	d102      	bne.n	80060b8 <sbrk_aligned+0x14>
 80060b2:	f000 fb99 	bl	80067e8 <_sbrk_r>
 80060b6:	6030      	str	r0, [r6, #0]
 80060b8:	0029      	movs	r1, r5
 80060ba:	0020      	movs	r0, r4
 80060bc:	f000 fb94 	bl	80067e8 <_sbrk_r>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d103      	bne.n	80060cc <sbrk_aligned+0x28>
 80060c4:	2501      	movs	r5, #1
 80060c6:	426d      	negs	r5, r5
 80060c8:	0028      	movs	r0, r5
 80060ca:	bd70      	pop	{r4, r5, r6, pc}
 80060cc:	2303      	movs	r3, #3
 80060ce:	1cc5      	adds	r5, r0, #3
 80060d0:	439d      	bics	r5, r3
 80060d2:	42a8      	cmp	r0, r5
 80060d4:	d0f8      	beq.n	80060c8 <sbrk_aligned+0x24>
 80060d6:	1a29      	subs	r1, r5, r0
 80060d8:	0020      	movs	r0, r4
 80060da:	f000 fb85 	bl	80067e8 <_sbrk_r>
 80060de:	3001      	adds	r0, #1
 80060e0:	d1f2      	bne.n	80060c8 <sbrk_aligned+0x24>
 80060e2:	e7ef      	b.n	80060c4 <sbrk_aligned+0x20>
 80060e4:	200004b8 	.word	0x200004b8

080060e8 <_malloc_r>:
 80060e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060ea:	2203      	movs	r2, #3
 80060ec:	1ccb      	adds	r3, r1, #3
 80060ee:	4393      	bics	r3, r2
 80060f0:	3308      	adds	r3, #8
 80060f2:	0005      	movs	r5, r0
 80060f4:	001f      	movs	r7, r3
 80060f6:	2b0c      	cmp	r3, #12
 80060f8:	d234      	bcs.n	8006164 <_malloc_r+0x7c>
 80060fa:	270c      	movs	r7, #12
 80060fc:	42b9      	cmp	r1, r7
 80060fe:	d833      	bhi.n	8006168 <_malloc_r+0x80>
 8006100:	0028      	movs	r0, r5
 8006102:	f000 f871 	bl	80061e8 <__malloc_lock>
 8006106:	4e37      	ldr	r6, [pc, #220]	@ (80061e4 <_malloc_r+0xfc>)
 8006108:	6833      	ldr	r3, [r6, #0]
 800610a:	001c      	movs	r4, r3
 800610c:	2c00      	cmp	r4, #0
 800610e:	d12f      	bne.n	8006170 <_malloc_r+0x88>
 8006110:	0039      	movs	r1, r7
 8006112:	0028      	movs	r0, r5
 8006114:	f7ff ffc6 	bl	80060a4 <sbrk_aligned>
 8006118:	0004      	movs	r4, r0
 800611a:	1c43      	adds	r3, r0, #1
 800611c:	d15f      	bne.n	80061de <_malloc_r+0xf6>
 800611e:	6834      	ldr	r4, [r6, #0]
 8006120:	9400      	str	r4, [sp, #0]
 8006122:	9b00      	ldr	r3, [sp, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d14a      	bne.n	80061be <_malloc_r+0xd6>
 8006128:	2c00      	cmp	r4, #0
 800612a:	d052      	beq.n	80061d2 <_malloc_r+0xea>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	0028      	movs	r0, r5
 8006130:	18e3      	adds	r3, r4, r3
 8006132:	9900      	ldr	r1, [sp, #0]
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	f000 fb57 	bl	80067e8 <_sbrk_r>
 800613a:	9b01      	ldr	r3, [sp, #4]
 800613c:	4283      	cmp	r3, r0
 800613e:	d148      	bne.n	80061d2 <_malloc_r+0xea>
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	0028      	movs	r0, r5
 8006144:	1aff      	subs	r7, r7, r3
 8006146:	0039      	movs	r1, r7
 8006148:	f7ff ffac 	bl	80060a4 <sbrk_aligned>
 800614c:	3001      	adds	r0, #1
 800614e:	d040      	beq.n	80061d2 <_malloc_r+0xea>
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	19db      	adds	r3, r3, r7
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	6833      	ldr	r3, [r6, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	2a00      	cmp	r2, #0
 800615c:	d133      	bne.n	80061c6 <_malloc_r+0xde>
 800615e:	9b00      	ldr	r3, [sp, #0]
 8006160:	6033      	str	r3, [r6, #0]
 8006162:	e019      	b.n	8006198 <_malloc_r+0xb0>
 8006164:	2b00      	cmp	r3, #0
 8006166:	dac9      	bge.n	80060fc <_malloc_r+0x14>
 8006168:	230c      	movs	r3, #12
 800616a:	602b      	str	r3, [r5, #0]
 800616c:	2000      	movs	r0, #0
 800616e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006170:	6821      	ldr	r1, [r4, #0]
 8006172:	1bc9      	subs	r1, r1, r7
 8006174:	d420      	bmi.n	80061b8 <_malloc_r+0xd0>
 8006176:	290b      	cmp	r1, #11
 8006178:	d90a      	bls.n	8006190 <_malloc_r+0xa8>
 800617a:	19e2      	adds	r2, r4, r7
 800617c:	6027      	str	r7, [r4, #0]
 800617e:	42a3      	cmp	r3, r4
 8006180:	d104      	bne.n	800618c <_malloc_r+0xa4>
 8006182:	6032      	str	r2, [r6, #0]
 8006184:	6863      	ldr	r3, [r4, #4]
 8006186:	6011      	str	r1, [r2, #0]
 8006188:	6053      	str	r3, [r2, #4]
 800618a:	e005      	b.n	8006198 <_malloc_r+0xb0>
 800618c:	605a      	str	r2, [r3, #4]
 800618e:	e7f9      	b.n	8006184 <_malloc_r+0x9c>
 8006190:	6862      	ldr	r2, [r4, #4]
 8006192:	42a3      	cmp	r3, r4
 8006194:	d10e      	bne.n	80061b4 <_malloc_r+0xcc>
 8006196:	6032      	str	r2, [r6, #0]
 8006198:	0028      	movs	r0, r5
 800619a:	f000 f82d 	bl	80061f8 <__malloc_unlock>
 800619e:	0020      	movs	r0, r4
 80061a0:	2207      	movs	r2, #7
 80061a2:	300b      	adds	r0, #11
 80061a4:	1d23      	adds	r3, r4, #4
 80061a6:	4390      	bics	r0, r2
 80061a8:	1ac2      	subs	r2, r0, r3
 80061aa:	4298      	cmp	r0, r3
 80061ac:	d0df      	beq.n	800616e <_malloc_r+0x86>
 80061ae:	1a1b      	subs	r3, r3, r0
 80061b0:	50a3      	str	r3, [r4, r2]
 80061b2:	e7dc      	b.n	800616e <_malloc_r+0x86>
 80061b4:	605a      	str	r2, [r3, #4]
 80061b6:	e7ef      	b.n	8006198 <_malloc_r+0xb0>
 80061b8:	0023      	movs	r3, r4
 80061ba:	6864      	ldr	r4, [r4, #4]
 80061bc:	e7a6      	b.n	800610c <_malloc_r+0x24>
 80061be:	9c00      	ldr	r4, [sp, #0]
 80061c0:	6863      	ldr	r3, [r4, #4]
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	e7ad      	b.n	8006122 <_malloc_r+0x3a>
 80061c6:	001a      	movs	r2, r3
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	42a3      	cmp	r3, r4
 80061cc:	d1fb      	bne.n	80061c6 <_malloc_r+0xde>
 80061ce:	2300      	movs	r3, #0
 80061d0:	e7da      	b.n	8006188 <_malloc_r+0xa0>
 80061d2:	230c      	movs	r3, #12
 80061d4:	0028      	movs	r0, r5
 80061d6:	602b      	str	r3, [r5, #0]
 80061d8:	f000 f80e 	bl	80061f8 <__malloc_unlock>
 80061dc:	e7c6      	b.n	800616c <_malloc_r+0x84>
 80061de:	6007      	str	r7, [r0, #0]
 80061e0:	e7da      	b.n	8006198 <_malloc_r+0xb0>
 80061e2:	46c0      	nop			@ (mov r8, r8)
 80061e4:	200004bc 	.word	0x200004bc

080061e8 <__malloc_lock>:
 80061e8:	b510      	push	{r4, lr}
 80061ea:	4802      	ldr	r0, [pc, #8]	@ (80061f4 <__malloc_lock+0xc>)
 80061ec:	f7ff ff04 	bl	8005ff8 <__retarget_lock_acquire_recursive>
 80061f0:	bd10      	pop	{r4, pc}
 80061f2:	46c0      	nop			@ (mov r8, r8)
 80061f4:	200004b4 	.word	0x200004b4

080061f8 <__malloc_unlock>:
 80061f8:	b510      	push	{r4, lr}
 80061fa:	4802      	ldr	r0, [pc, #8]	@ (8006204 <__malloc_unlock+0xc>)
 80061fc:	f7ff fefd 	bl	8005ffa <__retarget_lock_release_recursive>
 8006200:	bd10      	pop	{r4, pc}
 8006202:	46c0      	nop			@ (mov r8, r8)
 8006204:	200004b4 	.word	0x200004b4

08006208 <__ssputs_r>:
 8006208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800620a:	688e      	ldr	r6, [r1, #8]
 800620c:	b085      	sub	sp, #20
 800620e:	001f      	movs	r7, r3
 8006210:	000c      	movs	r4, r1
 8006212:	680b      	ldr	r3, [r1, #0]
 8006214:	9002      	str	r0, [sp, #8]
 8006216:	9203      	str	r2, [sp, #12]
 8006218:	42be      	cmp	r6, r7
 800621a:	d830      	bhi.n	800627e <__ssputs_r+0x76>
 800621c:	210c      	movs	r1, #12
 800621e:	5e62      	ldrsh	r2, [r4, r1]
 8006220:	2190      	movs	r1, #144	@ 0x90
 8006222:	00c9      	lsls	r1, r1, #3
 8006224:	420a      	tst	r2, r1
 8006226:	d028      	beq.n	800627a <__ssputs_r+0x72>
 8006228:	2003      	movs	r0, #3
 800622a:	6921      	ldr	r1, [r4, #16]
 800622c:	1a5b      	subs	r3, r3, r1
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	6963      	ldr	r3, [r4, #20]
 8006232:	4343      	muls	r3, r0
 8006234:	9801      	ldr	r0, [sp, #4]
 8006236:	0fdd      	lsrs	r5, r3, #31
 8006238:	18ed      	adds	r5, r5, r3
 800623a:	1c7b      	adds	r3, r7, #1
 800623c:	181b      	adds	r3, r3, r0
 800623e:	106d      	asrs	r5, r5, #1
 8006240:	42ab      	cmp	r3, r5
 8006242:	d900      	bls.n	8006246 <__ssputs_r+0x3e>
 8006244:	001d      	movs	r5, r3
 8006246:	0552      	lsls	r2, r2, #21
 8006248:	d528      	bpl.n	800629c <__ssputs_r+0x94>
 800624a:	0029      	movs	r1, r5
 800624c:	9802      	ldr	r0, [sp, #8]
 800624e:	f7ff ff4b 	bl	80060e8 <_malloc_r>
 8006252:	1e06      	subs	r6, r0, #0
 8006254:	d02c      	beq.n	80062b0 <__ssputs_r+0xa8>
 8006256:	9a01      	ldr	r2, [sp, #4]
 8006258:	6921      	ldr	r1, [r4, #16]
 800625a:	f7ff fecf 	bl	8005ffc <memcpy>
 800625e:	89a2      	ldrh	r2, [r4, #12]
 8006260:	4b18      	ldr	r3, [pc, #96]	@ (80062c4 <__ssputs_r+0xbc>)
 8006262:	401a      	ands	r2, r3
 8006264:	2380      	movs	r3, #128	@ 0x80
 8006266:	4313      	orrs	r3, r2
 8006268:	81a3      	strh	r3, [r4, #12]
 800626a:	9b01      	ldr	r3, [sp, #4]
 800626c:	6126      	str	r6, [r4, #16]
 800626e:	18f6      	adds	r6, r6, r3
 8006270:	6026      	str	r6, [r4, #0]
 8006272:	003e      	movs	r6, r7
 8006274:	6165      	str	r5, [r4, #20]
 8006276:	1aed      	subs	r5, r5, r3
 8006278:	60a5      	str	r5, [r4, #8]
 800627a:	42be      	cmp	r6, r7
 800627c:	d900      	bls.n	8006280 <__ssputs_r+0x78>
 800627e:	003e      	movs	r6, r7
 8006280:	0032      	movs	r2, r6
 8006282:	9903      	ldr	r1, [sp, #12]
 8006284:	6820      	ldr	r0, [r4, #0]
 8006286:	f000 fa9b 	bl	80067c0 <memmove>
 800628a:	2000      	movs	r0, #0
 800628c:	68a3      	ldr	r3, [r4, #8]
 800628e:	1b9b      	subs	r3, r3, r6
 8006290:	60a3      	str	r3, [r4, #8]
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	199b      	adds	r3, r3, r6
 8006296:	6023      	str	r3, [r4, #0]
 8006298:	b005      	add	sp, #20
 800629a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800629c:	002a      	movs	r2, r5
 800629e:	9802      	ldr	r0, [sp, #8]
 80062a0:	f000 fabf 	bl	8006822 <_realloc_r>
 80062a4:	1e06      	subs	r6, r0, #0
 80062a6:	d1e0      	bne.n	800626a <__ssputs_r+0x62>
 80062a8:	6921      	ldr	r1, [r4, #16]
 80062aa:	9802      	ldr	r0, [sp, #8]
 80062ac:	f7ff feb0 	bl	8006010 <_free_r>
 80062b0:	230c      	movs	r3, #12
 80062b2:	2001      	movs	r0, #1
 80062b4:	9a02      	ldr	r2, [sp, #8]
 80062b6:	4240      	negs	r0, r0
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	89a2      	ldrh	r2, [r4, #12]
 80062bc:	3334      	adds	r3, #52	@ 0x34
 80062be:	4313      	orrs	r3, r2
 80062c0:	81a3      	strh	r3, [r4, #12]
 80062c2:	e7e9      	b.n	8006298 <__ssputs_r+0x90>
 80062c4:	fffffb7f 	.word	0xfffffb7f

080062c8 <_svfiprintf_r>:
 80062c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ca:	b0a1      	sub	sp, #132	@ 0x84
 80062cc:	9003      	str	r0, [sp, #12]
 80062ce:	001d      	movs	r5, r3
 80062d0:	898b      	ldrh	r3, [r1, #12]
 80062d2:	000f      	movs	r7, r1
 80062d4:	0016      	movs	r6, r2
 80062d6:	061b      	lsls	r3, r3, #24
 80062d8:	d511      	bpl.n	80062fe <_svfiprintf_r+0x36>
 80062da:	690b      	ldr	r3, [r1, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10e      	bne.n	80062fe <_svfiprintf_r+0x36>
 80062e0:	2140      	movs	r1, #64	@ 0x40
 80062e2:	f7ff ff01 	bl	80060e8 <_malloc_r>
 80062e6:	6038      	str	r0, [r7, #0]
 80062e8:	6138      	str	r0, [r7, #16]
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d105      	bne.n	80062fa <_svfiprintf_r+0x32>
 80062ee:	230c      	movs	r3, #12
 80062f0:	9a03      	ldr	r2, [sp, #12]
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	2001      	movs	r0, #1
 80062f6:	4240      	negs	r0, r0
 80062f8:	e0cf      	b.n	800649a <_svfiprintf_r+0x1d2>
 80062fa:	2340      	movs	r3, #64	@ 0x40
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	2300      	movs	r3, #0
 8006300:	ac08      	add	r4, sp, #32
 8006302:	6163      	str	r3, [r4, #20]
 8006304:	3320      	adds	r3, #32
 8006306:	7663      	strb	r3, [r4, #25]
 8006308:	3310      	adds	r3, #16
 800630a:	76a3      	strb	r3, [r4, #26]
 800630c:	9507      	str	r5, [sp, #28]
 800630e:	0035      	movs	r5, r6
 8006310:	782b      	ldrb	r3, [r5, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <_svfiprintf_r+0x52>
 8006316:	2b25      	cmp	r3, #37	@ 0x25
 8006318:	d148      	bne.n	80063ac <_svfiprintf_r+0xe4>
 800631a:	1bab      	subs	r3, r5, r6
 800631c:	9305      	str	r3, [sp, #20]
 800631e:	42b5      	cmp	r5, r6
 8006320:	d00b      	beq.n	800633a <_svfiprintf_r+0x72>
 8006322:	0032      	movs	r2, r6
 8006324:	0039      	movs	r1, r7
 8006326:	9803      	ldr	r0, [sp, #12]
 8006328:	f7ff ff6e 	bl	8006208 <__ssputs_r>
 800632c:	3001      	adds	r0, #1
 800632e:	d100      	bne.n	8006332 <_svfiprintf_r+0x6a>
 8006330:	e0ae      	b.n	8006490 <_svfiprintf_r+0x1c8>
 8006332:	6963      	ldr	r3, [r4, #20]
 8006334:	9a05      	ldr	r2, [sp, #20]
 8006336:	189b      	adds	r3, r3, r2
 8006338:	6163      	str	r3, [r4, #20]
 800633a:	782b      	ldrb	r3, [r5, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d100      	bne.n	8006342 <_svfiprintf_r+0x7a>
 8006340:	e0a6      	b.n	8006490 <_svfiprintf_r+0x1c8>
 8006342:	2201      	movs	r2, #1
 8006344:	2300      	movs	r3, #0
 8006346:	4252      	negs	r2, r2
 8006348:	6062      	str	r2, [r4, #4]
 800634a:	a904      	add	r1, sp, #16
 800634c:	3254      	adds	r2, #84	@ 0x54
 800634e:	1852      	adds	r2, r2, r1
 8006350:	1c6e      	adds	r6, r5, #1
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	60e3      	str	r3, [r4, #12]
 8006356:	60a3      	str	r3, [r4, #8]
 8006358:	7013      	strb	r3, [r2, #0]
 800635a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800635c:	4b54      	ldr	r3, [pc, #336]	@ (80064b0 <_svfiprintf_r+0x1e8>)
 800635e:	2205      	movs	r2, #5
 8006360:	0018      	movs	r0, r3
 8006362:	7831      	ldrb	r1, [r6, #0]
 8006364:	9305      	str	r3, [sp, #20]
 8006366:	f000 fa51 	bl	800680c <memchr>
 800636a:	1c75      	adds	r5, r6, #1
 800636c:	2800      	cmp	r0, #0
 800636e:	d11f      	bne.n	80063b0 <_svfiprintf_r+0xe8>
 8006370:	6822      	ldr	r2, [r4, #0]
 8006372:	06d3      	lsls	r3, r2, #27
 8006374:	d504      	bpl.n	8006380 <_svfiprintf_r+0xb8>
 8006376:	2353      	movs	r3, #83	@ 0x53
 8006378:	a904      	add	r1, sp, #16
 800637a:	185b      	adds	r3, r3, r1
 800637c:	2120      	movs	r1, #32
 800637e:	7019      	strb	r1, [r3, #0]
 8006380:	0713      	lsls	r3, r2, #28
 8006382:	d504      	bpl.n	800638e <_svfiprintf_r+0xc6>
 8006384:	2353      	movs	r3, #83	@ 0x53
 8006386:	a904      	add	r1, sp, #16
 8006388:	185b      	adds	r3, r3, r1
 800638a:	212b      	movs	r1, #43	@ 0x2b
 800638c:	7019      	strb	r1, [r3, #0]
 800638e:	7833      	ldrb	r3, [r6, #0]
 8006390:	2b2a      	cmp	r3, #42	@ 0x2a
 8006392:	d016      	beq.n	80063c2 <_svfiprintf_r+0xfa>
 8006394:	0035      	movs	r5, r6
 8006396:	2100      	movs	r1, #0
 8006398:	200a      	movs	r0, #10
 800639a:	68e3      	ldr	r3, [r4, #12]
 800639c:	782a      	ldrb	r2, [r5, #0]
 800639e:	1c6e      	adds	r6, r5, #1
 80063a0:	3a30      	subs	r2, #48	@ 0x30
 80063a2:	2a09      	cmp	r2, #9
 80063a4:	d950      	bls.n	8006448 <_svfiprintf_r+0x180>
 80063a6:	2900      	cmp	r1, #0
 80063a8:	d111      	bne.n	80063ce <_svfiprintf_r+0x106>
 80063aa:	e017      	b.n	80063dc <_svfiprintf_r+0x114>
 80063ac:	3501      	adds	r5, #1
 80063ae:	e7af      	b.n	8006310 <_svfiprintf_r+0x48>
 80063b0:	9b05      	ldr	r3, [sp, #20]
 80063b2:	6822      	ldr	r2, [r4, #0]
 80063b4:	1ac0      	subs	r0, r0, r3
 80063b6:	2301      	movs	r3, #1
 80063b8:	4083      	lsls	r3, r0
 80063ba:	4313      	orrs	r3, r2
 80063bc:	002e      	movs	r6, r5
 80063be:	6023      	str	r3, [r4, #0]
 80063c0:	e7cc      	b.n	800635c <_svfiprintf_r+0x94>
 80063c2:	9b07      	ldr	r3, [sp, #28]
 80063c4:	1d19      	adds	r1, r3, #4
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	9107      	str	r1, [sp, #28]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	db01      	blt.n	80063d2 <_svfiprintf_r+0x10a>
 80063ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063d0:	e004      	b.n	80063dc <_svfiprintf_r+0x114>
 80063d2:	425b      	negs	r3, r3
 80063d4:	60e3      	str	r3, [r4, #12]
 80063d6:	2302      	movs	r3, #2
 80063d8:	4313      	orrs	r3, r2
 80063da:	6023      	str	r3, [r4, #0]
 80063dc:	782b      	ldrb	r3, [r5, #0]
 80063de:	2b2e      	cmp	r3, #46	@ 0x2e
 80063e0:	d10c      	bne.n	80063fc <_svfiprintf_r+0x134>
 80063e2:	786b      	ldrb	r3, [r5, #1]
 80063e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80063e6:	d134      	bne.n	8006452 <_svfiprintf_r+0x18a>
 80063e8:	9b07      	ldr	r3, [sp, #28]
 80063ea:	3502      	adds	r5, #2
 80063ec:	1d1a      	adds	r2, r3, #4
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	9207      	str	r2, [sp, #28]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	da01      	bge.n	80063fa <_svfiprintf_r+0x132>
 80063f6:	2301      	movs	r3, #1
 80063f8:	425b      	negs	r3, r3
 80063fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80063fc:	4e2d      	ldr	r6, [pc, #180]	@ (80064b4 <_svfiprintf_r+0x1ec>)
 80063fe:	2203      	movs	r2, #3
 8006400:	0030      	movs	r0, r6
 8006402:	7829      	ldrb	r1, [r5, #0]
 8006404:	f000 fa02 	bl	800680c <memchr>
 8006408:	2800      	cmp	r0, #0
 800640a:	d006      	beq.n	800641a <_svfiprintf_r+0x152>
 800640c:	2340      	movs	r3, #64	@ 0x40
 800640e:	1b80      	subs	r0, r0, r6
 8006410:	4083      	lsls	r3, r0
 8006412:	6822      	ldr	r2, [r4, #0]
 8006414:	3501      	adds	r5, #1
 8006416:	4313      	orrs	r3, r2
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	7829      	ldrb	r1, [r5, #0]
 800641c:	2206      	movs	r2, #6
 800641e:	4826      	ldr	r0, [pc, #152]	@ (80064b8 <_svfiprintf_r+0x1f0>)
 8006420:	1c6e      	adds	r6, r5, #1
 8006422:	7621      	strb	r1, [r4, #24]
 8006424:	f000 f9f2 	bl	800680c <memchr>
 8006428:	2800      	cmp	r0, #0
 800642a:	d038      	beq.n	800649e <_svfiprintf_r+0x1d6>
 800642c:	4b23      	ldr	r3, [pc, #140]	@ (80064bc <_svfiprintf_r+0x1f4>)
 800642e:	2b00      	cmp	r3, #0
 8006430:	d122      	bne.n	8006478 <_svfiprintf_r+0x1b0>
 8006432:	2207      	movs	r2, #7
 8006434:	9b07      	ldr	r3, [sp, #28]
 8006436:	3307      	adds	r3, #7
 8006438:	4393      	bics	r3, r2
 800643a:	3308      	adds	r3, #8
 800643c:	9307      	str	r3, [sp, #28]
 800643e:	6963      	ldr	r3, [r4, #20]
 8006440:	9a04      	ldr	r2, [sp, #16]
 8006442:	189b      	adds	r3, r3, r2
 8006444:	6163      	str	r3, [r4, #20]
 8006446:	e762      	b.n	800630e <_svfiprintf_r+0x46>
 8006448:	4343      	muls	r3, r0
 800644a:	0035      	movs	r5, r6
 800644c:	2101      	movs	r1, #1
 800644e:	189b      	adds	r3, r3, r2
 8006450:	e7a4      	b.n	800639c <_svfiprintf_r+0xd4>
 8006452:	2300      	movs	r3, #0
 8006454:	200a      	movs	r0, #10
 8006456:	0019      	movs	r1, r3
 8006458:	3501      	adds	r5, #1
 800645a:	6063      	str	r3, [r4, #4]
 800645c:	782a      	ldrb	r2, [r5, #0]
 800645e:	1c6e      	adds	r6, r5, #1
 8006460:	3a30      	subs	r2, #48	@ 0x30
 8006462:	2a09      	cmp	r2, #9
 8006464:	d903      	bls.n	800646e <_svfiprintf_r+0x1a6>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0c8      	beq.n	80063fc <_svfiprintf_r+0x134>
 800646a:	9109      	str	r1, [sp, #36]	@ 0x24
 800646c:	e7c6      	b.n	80063fc <_svfiprintf_r+0x134>
 800646e:	4341      	muls	r1, r0
 8006470:	0035      	movs	r5, r6
 8006472:	2301      	movs	r3, #1
 8006474:	1889      	adds	r1, r1, r2
 8006476:	e7f1      	b.n	800645c <_svfiprintf_r+0x194>
 8006478:	aa07      	add	r2, sp, #28
 800647a:	9200      	str	r2, [sp, #0]
 800647c:	0021      	movs	r1, r4
 800647e:	003a      	movs	r2, r7
 8006480:	4b0f      	ldr	r3, [pc, #60]	@ (80064c0 <_svfiprintf_r+0x1f8>)
 8006482:	9803      	ldr	r0, [sp, #12]
 8006484:	e000      	b.n	8006488 <_svfiprintf_r+0x1c0>
 8006486:	bf00      	nop
 8006488:	9004      	str	r0, [sp, #16]
 800648a:	9b04      	ldr	r3, [sp, #16]
 800648c:	3301      	adds	r3, #1
 800648e:	d1d6      	bne.n	800643e <_svfiprintf_r+0x176>
 8006490:	89bb      	ldrh	r3, [r7, #12]
 8006492:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006494:	065b      	lsls	r3, r3, #25
 8006496:	d500      	bpl.n	800649a <_svfiprintf_r+0x1d2>
 8006498:	e72c      	b.n	80062f4 <_svfiprintf_r+0x2c>
 800649a:	b021      	add	sp, #132	@ 0x84
 800649c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800649e:	aa07      	add	r2, sp, #28
 80064a0:	9200      	str	r2, [sp, #0]
 80064a2:	0021      	movs	r1, r4
 80064a4:	003a      	movs	r2, r7
 80064a6:	4b06      	ldr	r3, [pc, #24]	@ (80064c0 <_svfiprintf_r+0x1f8>)
 80064a8:	9803      	ldr	r0, [sp, #12]
 80064aa:	f000 f87b 	bl	80065a4 <_printf_i>
 80064ae:	e7eb      	b.n	8006488 <_svfiprintf_r+0x1c0>
 80064b0:	080079cc 	.word	0x080079cc
 80064b4:	080079d2 	.word	0x080079d2
 80064b8:	080079d6 	.word	0x080079d6
 80064bc:	00000000 	.word	0x00000000
 80064c0:	08006209 	.word	0x08006209

080064c4 <_printf_common>:
 80064c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064c6:	0016      	movs	r6, r2
 80064c8:	9301      	str	r3, [sp, #4]
 80064ca:	688a      	ldr	r2, [r1, #8]
 80064cc:	690b      	ldr	r3, [r1, #16]
 80064ce:	000c      	movs	r4, r1
 80064d0:	9000      	str	r0, [sp, #0]
 80064d2:	4293      	cmp	r3, r2
 80064d4:	da00      	bge.n	80064d8 <_printf_common+0x14>
 80064d6:	0013      	movs	r3, r2
 80064d8:	0022      	movs	r2, r4
 80064da:	6033      	str	r3, [r6, #0]
 80064dc:	3243      	adds	r2, #67	@ 0x43
 80064de:	7812      	ldrb	r2, [r2, #0]
 80064e0:	2a00      	cmp	r2, #0
 80064e2:	d001      	beq.n	80064e8 <_printf_common+0x24>
 80064e4:	3301      	adds	r3, #1
 80064e6:	6033      	str	r3, [r6, #0]
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	069b      	lsls	r3, r3, #26
 80064ec:	d502      	bpl.n	80064f4 <_printf_common+0x30>
 80064ee:	6833      	ldr	r3, [r6, #0]
 80064f0:	3302      	adds	r3, #2
 80064f2:	6033      	str	r3, [r6, #0]
 80064f4:	6822      	ldr	r2, [r4, #0]
 80064f6:	2306      	movs	r3, #6
 80064f8:	0015      	movs	r5, r2
 80064fa:	401d      	ands	r5, r3
 80064fc:	421a      	tst	r2, r3
 80064fe:	d027      	beq.n	8006550 <_printf_common+0x8c>
 8006500:	0023      	movs	r3, r4
 8006502:	3343      	adds	r3, #67	@ 0x43
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	1e5a      	subs	r2, r3, #1
 8006508:	4193      	sbcs	r3, r2
 800650a:	6822      	ldr	r2, [r4, #0]
 800650c:	0692      	lsls	r2, r2, #26
 800650e:	d430      	bmi.n	8006572 <_printf_common+0xae>
 8006510:	0022      	movs	r2, r4
 8006512:	9901      	ldr	r1, [sp, #4]
 8006514:	9800      	ldr	r0, [sp, #0]
 8006516:	9d08      	ldr	r5, [sp, #32]
 8006518:	3243      	adds	r2, #67	@ 0x43
 800651a:	47a8      	blx	r5
 800651c:	3001      	adds	r0, #1
 800651e:	d025      	beq.n	800656c <_printf_common+0xa8>
 8006520:	2206      	movs	r2, #6
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	2500      	movs	r5, #0
 8006526:	4013      	ands	r3, r2
 8006528:	2b04      	cmp	r3, #4
 800652a:	d105      	bne.n	8006538 <_printf_common+0x74>
 800652c:	6833      	ldr	r3, [r6, #0]
 800652e:	68e5      	ldr	r5, [r4, #12]
 8006530:	1aed      	subs	r5, r5, r3
 8006532:	43eb      	mvns	r3, r5
 8006534:	17db      	asrs	r3, r3, #31
 8006536:	401d      	ands	r5, r3
 8006538:	68a3      	ldr	r3, [r4, #8]
 800653a:	6922      	ldr	r2, [r4, #16]
 800653c:	4293      	cmp	r3, r2
 800653e:	dd01      	ble.n	8006544 <_printf_common+0x80>
 8006540:	1a9b      	subs	r3, r3, r2
 8006542:	18ed      	adds	r5, r5, r3
 8006544:	2600      	movs	r6, #0
 8006546:	42b5      	cmp	r5, r6
 8006548:	d120      	bne.n	800658c <_printf_common+0xc8>
 800654a:	2000      	movs	r0, #0
 800654c:	e010      	b.n	8006570 <_printf_common+0xac>
 800654e:	3501      	adds	r5, #1
 8006550:	68e3      	ldr	r3, [r4, #12]
 8006552:	6832      	ldr	r2, [r6, #0]
 8006554:	1a9b      	subs	r3, r3, r2
 8006556:	42ab      	cmp	r3, r5
 8006558:	ddd2      	ble.n	8006500 <_printf_common+0x3c>
 800655a:	0022      	movs	r2, r4
 800655c:	2301      	movs	r3, #1
 800655e:	9901      	ldr	r1, [sp, #4]
 8006560:	9800      	ldr	r0, [sp, #0]
 8006562:	9f08      	ldr	r7, [sp, #32]
 8006564:	3219      	adds	r2, #25
 8006566:	47b8      	blx	r7
 8006568:	3001      	adds	r0, #1
 800656a:	d1f0      	bne.n	800654e <_printf_common+0x8a>
 800656c:	2001      	movs	r0, #1
 800656e:	4240      	negs	r0, r0
 8006570:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006572:	2030      	movs	r0, #48	@ 0x30
 8006574:	18e1      	adds	r1, r4, r3
 8006576:	3143      	adds	r1, #67	@ 0x43
 8006578:	7008      	strb	r0, [r1, #0]
 800657a:	0021      	movs	r1, r4
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	3145      	adds	r1, #69	@ 0x45
 8006580:	7809      	ldrb	r1, [r1, #0]
 8006582:	18a2      	adds	r2, r4, r2
 8006584:	3243      	adds	r2, #67	@ 0x43
 8006586:	3302      	adds	r3, #2
 8006588:	7011      	strb	r1, [r2, #0]
 800658a:	e7c1      	b.n	8006510 <_printf_common+0x4c>
 800658c:	0022      	movs	r2, r4
 800658e:	2301      	movs	r3, #1
 8006590:	9901      	ldr	r1, [sp, #4]
 8006592:	9800      	ldr	r0, [sp, #0]
 8006594:	9f08      	ldr	r7, [sp, #32]
 8006596:	321a      	adds	r2, #26
 8006598:	47b8      	blx	r7
 800659a:	3001      	adds	r0, #1
 800659c:	d0e6      	beq.n	800656c <_printf_common+0xa8>
 800659e:	3601      	adds	r6, #1
 80065a0:	e7d1      	b.n	8006546 <_printf_common+0x82>
	...

080065a4 <_printf_i>:
 80065a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065a6:	b08b      	sub	sp, #44	@ 0x2c
 80065a8:	9206      	str	r2, [sp, #24]
 80065aa:	000a      	movs	r2, r1
 80065ac:	3243      	adds	r2, #67	@ 0x43
 80065ae:	9307      	str	r3, [sp, #28]
 80065b0:	9005      	str	r0, [sp, #20]
 80065b2:	9203      	str	r2, [sp, #12]
 80065b4:	7e0a      	ldrb	r2, [r1, #24]
 80065b6:	000c      	movs	r4, r1
 80065b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80065ba:	2a78      	cmp	r2, #120	@ 0x78
 80065bc:	d809      	bhi.n	80065d2 <_printf_i+0x2e>
 80065be:	2a62      	cmp	r2, #98	@ 0x62
 80065c0:	d80b      	bhi.n	80065da <_printf_i+0x36>
 80065c2:	2a00      	cmp	r2, #0
 80065c4:	d100      	bne.n	80065c8 <_printf_i+0x24>
 80065c6:	e0bc      	b.n	8006742 <_printf_i+0x19e>
 80065c8:	497b      	ldr	r1, [pc, #492]	@ (80067b8 <_printf_i+0x214>)
 80065ca:	9104      	str	r1, [sp, #16]
 80065cc:	2a58      	cmp	r2, #88	@ 0x58
 80065ce:	d100      	bne.n	80065d2 <_printf_i+0x2e>
 80065d0:	e090      	b.n	80066f4 <_printf_i+0x150>
 80065d2:	0025      	movs	r5, r4
 80065d4:	3542      	adds	r5, #66	@ 0x42
 80065d6:	702a      	strb	r2, [r5, #0]
 80065d8:	e022      	b.n	8006620 <_printf_i+0x7c>
 80065da:	0010      	movs	r0, r2
 80065dc:	3863      	subs	r0, #99	@ 0x63
 80065de:	2815      	cmp	r0, #21
 80065e0:	d8f7      	bhi.n	80065d2 <_printf_i+0x2e>
 80065e2:	f7f9 fd99 	bl	8000118 <__gnu_thumb1_case_shi>
 80065e6:	0016      	.short	0x0016
 80065e8:	fff6001f 	.word	0xfff6001f
 80065ec:	fff6fff6 	.word	0xfff6fff6
 80065f0:	001ffff6 	.word	0x001ffff6
 80065f4:	fff6fff6 	.word	0xfff6fff6
 80065f8:	fff6fff6 	.word	0xfff6fff6
 80065fc:	003600a1 	.word	0x003600a1
 8006600:	fff60080 	.word	0xfff60080
 8006604:	00b2fff6 	.word	0x00b2fff6
 8006608:	0036fff6 	.word	0x0036fff6
 800660c:	fff6fff6 	.word	0xfff6fff6
 8006610:	0084      	.short	0x0084
 8006612:	0025      	movs	r5, r4
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	3542      	adds	r5, #66	@ 0x42
 8006618:	1d11      	adds	r1, r2, #4
 800661a:	6019      	str	r1, [r3, #0]
 800661c:	6813      	ldr	r3, [r2, #0]
 800661e:	702b      	strb	r3, [r5, #0]
 8006620:	2301      	movs	r3, #1
 8006622:	e0a0      	b.n	8006766 <_printf_i+0x1c2>
 8006624:	6818      	ldr	r0, [r3, #0]
 8006626:	6809      	ldr	r1, [r1, #0]
 8006628:	1d02      	adds	r2, r0, #4
 800662a:	060d      	lsls	r5, r1, #24
 800662c:	d50b      	bpl.n	8006646 <_printf_i+0xa2>
 800662e:	6806      	ldr	r6, [r0, #0]
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	2e00      	cmp	r6, #0
 8006634:	da03      	bge.n	800663e <_printf_i+0x9a>
 8006636:	232d      	movs	r3, #45	@ 0x2d
 8006638:	9a03      	ldr	r2, [sp, #12]
 800663a:	4276      	negs	r6, r6
 800663c:	7013      	strb	r3, [r2, #0]
 800663e:	4b5e      	ldr	r3, [pc, #376]	@ (80067b8 <_printf_i+0x214>)
 8006640:	270a      	movs	r7, #10
 8006642:	9304      	str	r3, [sp, #16]
 8006644:	e018      	b.n	8006678 <_printf_i+0xd4>
 8006646:	6806      	ldr	r6, [r0, #0]
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	0649      	lsls	r1, r1, #25
 800664c:	d5f1      	bpl.n	8006632 <_printf_i+0x8e>
 800664e:	b236      	sxth	r6, r6
 8006650:	e7ef      	b.n	8006632 <_printf_i+0x8e>
 8006652:	6808      	ldr	r0, [r1, #0]
 8006654:	6819      	ldr	r1, [r3, #0]
 8006656:	c940      	ldmia	r1!, {r6}
 8006658:	0605      	lsls	r5, r0, #24
 800665a:	d402      	bmi.n	8006662 <_printf_i+0xbe>
 800665c:	0640      	lsls	r0, r0, #25
 800665e:	d500      	bpl.n	8006662 <_printf_i+0xbe>
 8006660:	b2b6      	uxth	r6, r6
 8006662:	6019      	str	r1, [r3, #0]
 8006664:	4b54      	ldr	r3, [pc, #336]	@ (80067b8 <_printf_i+0x214>)
 8006666:	270a      	movs	r7, #10
 8006668:	9304      	str	r3, [sp, #16]
 800666a:	2a6f      	cmp	r2, #111	@ 0x6f
 800666c:	d100      	bne.n	8006670 <_printf_i+0xcc>
 800666e:	3f02      	subs	r7, #2
 8006670:	0023      	movs	r3, r4
 8006672:	2200      	movs	r2, #0
 8006674:	3343      	adds	r3, #67	@ 0x43
 8006676:	701a      	strb	r2, [r3, #0]
 8006678:	6863      	ldr	r3, [r4, #4]
 800667a:	60a3      	str	r3, [r4, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	db03      	blt.n	8006688 <_printf_i+0xe4>
 8006680:	2104      	movs	r1, #4
 8006682:	6822      	ldr	r2, [r4, #0]
 8006684:	438a      	bics	r2, r1
 8006686:	6022      	str	r2, [r4, #0]
 8006688:	2e00      	cmp	r6, #0
 800668a:	d102      	bne.n	8006692 <_printf_i+0xee>
 800668c:	9d03      	ldr	r5, [sp, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00c      	beq.n	80066ac <_printf_i+0x108>
 8006692:	9d03      	ldr	r5, [sp, #12]
 8006694:	0030      	movs	r0, r6
 8006696:	0039      	movs	r1, r7
 8006698:	f7f9 fdce 	bl	8000238 <__aeabi_uidivmod>
 800669c:	9b04      	ldr	r3, [sp, #16]
 800669e:	3d01      	subs	r5, #1
 80066a0:	5c5b      	ldrb	r3, [r3, r1]
 80066a2:	702b      	strb	r3, [r5, #0]
 80066a4:	0033      	movs	r3, r6
 80066a6:	0006      	movs	r6, r0
 80066a8:	429f      	cmp	r7, r3
 80066aa:	d9f3      	bls.n	8006694 <_printf_i+0xf0>
 80066ac:	2f08      	cmp	r7, #8
 80066ae:	d109      	bne.n	80066c4 <_printf_i+0x120>
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	07db      	lsls	r3, r3, #31
 80066b4:	d506      	bpl.n	80066c4 <_printf_i+0x120>
 80066b6:	6862      	ldr	r2, [r4, #4]
 80066b8:	6923      	ldr	r3, [r4, #16]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	dc02      	bgt.n	80066c4 <_printf_i+0x120>
 80066be:	2330      	movs	r3, #48	@ 0x30
 80066c0:	3d01      	subs	r5, #1
 80066c2:	702b      	strb	r3, [r5, #0]
 80066c4:	9b03      	ldr	r3, [sp, #12]
 80066c6:	1b5b      	subs	r3, r3, r5
 80066c8:	6123      	str	r3, [r4, #16]
 80066ca:	9b07      	ldr	r3, [sp, #28]
 80066cc:	0021      	movs	r1, r4
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	9805      	ldr	r0, [sp, #20]
 80066d2:	9b06      	ldr	r3, [sp, #24]
 80066d4:	aa09      	add	r2, sp, #36	@ 0x24
 80066d6:	f7ff fef5 	bl	80064c4 <_printf_common>
 80066da:	3001      	adds	r0, #1
 80066dc:	d148      	bne.n	8006770 <_printf_i+0x1cc>
 80066de:	2001      	movs	r0, #1
 80066e0:	4240      	negs	r0, r0
 80066e2:	b00b      	add	sp, #44	@ 0x2c
 80066e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066e6:	2220      	movs	r2, #32
 80066e8:	6809      	ldr	r1, [r1, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	6022      	str	r2, [r4, #0]
 80066ee:	2278      	movs	r2, #120	@ 0x78
 80066f0:	4932      	ldr	r1, [pc, #200]	@ (80067bc <_printf_i+0x218>)
 80066f2:	9104      	str	r1, [sp, #16]
 80066f4:	0021      	movs	r1, r4
 80066f6:	3145      	adds	r1, #69	@ 0x45
 80066f8:	700a      	strb	r2, [r1, #0]
 80066fa:	6819      	ldr	r1, [r3, #0]
 80066fc:	6822      	ldr	r2, [r4, #0]
 80066fe:	c940      	ldmia	r1!, {r6}
 8006700:	0610      	lsls	r0, r2, #24
 8006702:	d402      	bmi.n	800670a <_printf_i+0x166>
 8006704:	0650      	lsls	r0, r2, #25
 8006706:	d500      	bpl.n	800670a <_printf_i+0x166>
 8006708:	b2b6      	uxth	r6, r6
 800670a:	6019      	str	r1, [r3, #0]
 800670c:	07d3      	lsls	r3, r2, #31
 800670e:	d502      	bpl.n	8006716 <_printf_i+0x172>
 8006710:	2320      	movs	r3, #32
 8006712:	4313      	orrs	r3, r2
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	2e00      	cmp	r6, #0
 8006718:	d001      	beq.n	800671e <_printf_i+0x17a>
 800671a:	2710      	movs	r7, #16
 800671c:	e7a8      	b.n	8006670 <_printf_i+0xcc>
 800671e:	2220      	movs	r2, #32
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	4393      	bics	r3, r2
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	e7f8      	b.n	800671a <_printf_i+0x176>
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	680d      	ldr	r5, [r1, #0]
 800672c:	1d10      	adds	r0, r2, #4
 800672e:	6949      	ldr	r1, [r1, #20]
 8006730:	6018      	str	r0, [r3, #0]
 8006732:	6813      	ldr	r3, [r2, #0]
 8006734:	062e      	lsls	r6, r5, #24
 8006736:	d501      	bpl.n	800673c <_printf_i+0x198>
 8006738:	6019      	str	r1, [r3, #0]
 800673a:	e002      	b.n	8006742 <_printf_i+0x19e>
 800673c:	066d      	lsls	r5, r5, #25
 800673e:	d5fb      	bpl.n	8006738 <_printf_i+0x194>
 8006740:	8019      	strh	r1, [r3, #0]
 8006742:	2300      	movs	r3, #0
 8006744:	9d03      	ldr	r5, [sp, #12]
 8006746:	6123      	str	r3, [r4, #16]
 8006748:	e7bf      	b.n	80066ca <_printf_i+0x126>
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	1d11      	adds	r1, r2, #4
 800674e:	6019      	str	r1, [r3, #0]
 8006750:	6815      	ldr	r5, [r2, #0]
 8006752:	2100      	movs	r1, #0
 8006754:	0028      	movs	r0, r5
 8006756:	6862      	ldr	r2, [r4, #4]
 8006758:	f000 f858 	bl	800680c <memchr>
 800675c:	2800      	cmp	r0, #0
 800675e:	d001      	beq.n	8006764 <_printf_i+0x1c0>
 8006760:	1b40      	subs	r0, r0, r5
 8006762:	6060      	str	r0, [r4, #4]
 8006764:	6863      	ldr	r3, [r4, #4]
 8006766:	6123      	str	r3, [r4, #16]
 8006768:	2300      	movs	r3, #0
 800676a:	9a03      	ldr	r2, [sp, #12]
 800676c:	7013      	strb	r3, [r2, #0]
 800676e:	e7ac      	b.n	80066ca <_printf_i+0x126>
 8006770:	002a      	movs	r2, r5
 8006772:	6923      	ldr	r3, [r4, #16]
 8006774:	9906      	ldr	r1, [sp, #24]
 8006776:	9805      	ldr	r0, [sp, #20]
 8006778:	9d07      	ldr	r5, [sp, #28]
 800677a:	47a8      	blx	r5
 800677c:	3001      	adds	r0, #1
 800677e:	d0ae      	beq.n	80066de <_printf_i+0x13a>
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	079b      	lsls	r3, r3, #30
 8006784:	d415      	bmi.n	80067b2 <_printf_i+0x20e>
 8006786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006788:	68e0      	ldr	r0, [r4, #12]
 800678a:	4298      	cmp	r0, r3
 800678c:	daa9      	bge.n	80066e2 <_printf_i+0x13e>
 800678e:	0018      	movs	r0, r3
 8006790:	e7a7      	b.n	80066e2 <_printf_i+0x13e>
 8006792:	0022      	movs	r2, r4
 8006794:	2301      	movs	r3, #1
 8006796:	9906      	ldr	r1, [sp, #24]
 8006798:	9805      	ldr	r0, [sp, #20]
 800679a:	9e07      	ldr	r6, [sp, #28]
 800679c:	3219      	adds	r2, #25
 800679e:	47b0      	blx	r6
 80067a0:	3001      	adds	r0, #1
 80067a2:	d09c      	beq.n	80066de <_printf_i+0x13a>
 80067a4:	3501      	adds	r5, #1
 80067a6:	68e3      	ldr	r3, [r4, #12]
 80067a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067aa:	1a9b      	subs	r3, r3, r2
 80067ac:	42ab      	cmp	r3, r5
 80067ae:	dcf0      	bgt.n	8006792 <_printf_i+0x1ee>
 80067b0:	e7e9      	b.n	8006786 <_printf_i+0x1e2>
 80067b2:	2500      	movs	r5, #0
 80067b4:	e7f7      	b.n	80067a6 <_printf_i+0x202>
 80067b6:	46c0      	nop			@ (mov r8, r8)
 80067b8:	080079dd 	.word	0x080079dd
 80067bc:	080079ee 	.word	0x080079ee

080067c0 <memmove>:
 80067c0:	b510      	push	{r4, lr}
 80067c2:	4288      	cmp	r0, r1
 80067c4:	d806      	bhi.n	80067d4 <memmove+0x14>
 80067c6:	2300      	movs	r3, #0
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d008      	beq.n	80067de <memmove+0x1e>
 80067cc:	5ccc      	ldrb	r4, [r1, r3]
 80067ce:	54c4      	strb	r4, [r0, r3]
 80067d0:	3301      	adds	r3, #1
 80067d2:	e7f9      	b.n	80067c8 <memmove+0x8>
 80067d4:	188b      	adds	r3, r1, r2
 80067d6:	4298      	cmp	r0, r3
 80067d8:	d2f5      	bcs.n	80067c6 <memmove+0x6>
 80067da:	3a01      	subs	r2, #1
 80067dc:	d200      	bcs.n	80067e0 <memmove+0x20>
 80067de:	bd10      	pop	{r4, pc}
 80067e0:	5c8b      	ldrb	r3, [r1, r2]
 80067e2:	5483      	strb	r3, [r0, r2]
 80067e4:	e7f9      	b.n	80067da <memmove+0x1a>
	...

080067e8 <_sbrk_r>:
 80067e8:	2300      	movs	r3, #0
 80067ea:	b570      	push	{r4, r5, r6, lr}
 80067ec:	4d06      	ldr	r5, [pc, #24]	@ (8006808 <_sbrk_r+0x20>)
 80067ee:	0004      	movs	r4, r0
 80067f0:	0008      	movs	r0, r1
 80067f2:	602b      	str	r3, [r5, #0]
 80067f4:	f7fc fbd4 	bl	8002fa0 <_sbrk>
 80067f8:	1c43      	adds	r3, r0, #1
 80067fa:	d103      	bne.n	8006804 <_sbrk_r+0x1c>
 80067fc:	682b      	ldr	r3, [r5, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d000      	beq.n	8006804 <_sbrk_r+0x1c>
 8006802:	6023      	str	r3, [r4, #0]
 8006804:	bd70      	pop	{r4, r5, r6, pc}
 8006806:	46c0      	nop			@ (mov r8, r8)
 8006808:	200004b0 	.word	0x200004b0

0800680c <memchr>:
 800680c:	b2c9      	uxtb	r1, r1
 800680e:	1882      	adds	r2, r0, r2
 8006810:	4290      	cmp	r0, r2
 8006812:	d101      	bne.n	8006818 <memchr+0xc>
 8006814:	2000      	movs	r0, #0
 8006816:	4770      	bx	lr
 8006818:	7803      	ldrb	r3, [r0, #0]
 800681a:	428b      	cmp	r3, r1
 800681c:	d0fb      	beq.n	8006816 <memchr+0xa>
 800681e:	3001      	adds	r0, #1
 8006820:	e7f6      	b.n	8006810 <memchr+0x4>

08006822 <_realloc_r>:
 8006822:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006824:	0006      	movs	r6, r0
 8006826:	000c      	movs	r4, r1
 8006828:	0015      	movs	r5, r2
 800682a:	2900      	cmp	r1, #0
 800682c:	d105      	bne.n	800683a <_realloc_r+0x18>
 800682e:	0011      	movs	r1, r2
 8006830:	f7ff fc5a 	bl	80060e8 <_malloc_r>
 8006834:	0004      	movs	r4, r0
 8006836:	0020      	movs	r0, r4
 8006838:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800683a:	2a00      	cmp	r2, #0
 800683c:	d103      	bne.n	8006846 <_realloc_r+0x24>
 800683e:	f7ff fbe7 	bl	8006010 <_free_r>
 8006842:	2400      	movs	r4, #0
 8006844:	e7f7      	b.n	8006836 <_realloc_r+0x14>
 8006846:	f000 f81b 	bl	8006880 <_malloc_usable_size_r>
 800684a:	0007      	movs	r7, r0
 800684c:	4285      	cmp	r5, r0
 800684e:	d802      	bhi.n	8006856 <_realloc_r+0x34>
 8006850:	0843      	lsrs	r3, r0, #1
 8006852:	42ab      	cmp	r3, r5
 8006854:	d3ef      	bcc.n	8006836 <_realloc_r+0x14>
 8006856:	0029      	movs	r1, r5
 8006858:	0030      	movs	r0, r6
 800685a:	f7ff fc45 	bl	80060e8 <_malloc_r>
 800685e:	9001      	str	r0, [sp, #4]
 8006860:	2800      	cmp	r0, #0
 8006862:	d0ee      	beq.n	8006842 <_realloc_r+0x20>
 8006864:	002a      	movs	r2, r5
 8006866:	42bd      	cmp	r5, r7
 8006868:	d900      	bls.n	800686c <_realloc_r+0x4a>
 800686a:	003a      	movs	r2, r7
 800686c:	0021      	movs	r1, r4
 800686e:	9801      	ldr	r0, [sp, #4]
 8006870:	f7ff fbc4 	bl	8005ffc <memcpy>
 8006874:	0021      	movs	r1, r4
 8006876:	0030      	movs	r0, r6
 8006878:	f7ff fbca 	bl	8006010 <_free_r>
 800687c:	9c01      	ldr	r4, [sp, #4]
 800687e:	e7da      	b.n	8006836 <_realloc_r+0x14>

08006880 <_malloc_usable_size_r>:
 8006880:	1f0b      	subs	r3, r1, #4
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	1f18      	subs	r0, r3, #4
 8006886:	2b00      	cmp	r3, #0
 8006888:	da01      	bge.n	800688e <_malloc_usable_size_r+0xe>
 800688a:	580b      	ldr	r3, [r1, r0]
 800688c:	18c0      	adds	r0, r0, r3
 800688e:	4770      	bx	lr

08006890 <_init>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	46c0      	nop			@ (mov r8, r8)
 8006894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006896:	bc08      	pop	{r3}
 8006898:	469e      	mov	lr, r3
 800689a:	4770      	bx	lr

0800689c <_fini>:
 800689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689e:	46c0      	nop			@ (mov r8, r8)
 80068a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a2:	bc08      	pop	{r3}
 80068a4:	469e      	mov	lr, r3
 80068a6:	4770      	bx	lr
